if(function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){"use strict";function n(t,e){var n=(e=e||et).createElement("script");n.text=t,e.head.appendChild(n).parentNode.removeChild(n)}function r(t){var e=!!t&&"length"in t&&t.length,n=dt.type(t);return"function"!==n&&!dt.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function i(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}function o(t,e,n){return dt.isFunction(e)?dt.grep(t,function(t,r){return!!e.call(t,r,t)!==n}):e.nodeType?dt.grep(t,function(t){return t===e!==n}):"string"!=typeof e?dt.grep(t,function(t){return at.call(e,t)>-1!==n}):Mt.test(e)?dt.filter(e,t,n):(e=dt.filter(e,t),dt.grep(t,function(t){return at.call(e,t)>-1!==n&&1===t.nodeType}))}function a(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function u(t){var e={};return dt.each(t.match(Ct)||[],function(t,n){e[n]=!0}),e}function s(t){return t}function l(t){throw t}function c(t,e,n,r){var i;try{t&&dt.isFunction(i=t.promise)?i.call(t).done(e).fail(n):t&&dt.isFunction(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}function f(){et.removeEventListener("DOMContentLoaded",f),t.removeEventListener("load",f),dt.ready()}function h(){this.expando=dt.expando+h.uid++}function d(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:jt.test(t)?JSON.parse(t):t)}function p(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(Pt,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=d(n)}catch(t){}Rt.set(t,e,n)}else n=void 0;return n}function g(t,e,n,r){var i,o=1,a=20,u=r?function(){return r.cur()}:function(){return dt.css(t,e,"")},s=u(),l=n&&n[3]||(dt.cssNumber[e]?"":"px"),c=(dt.cssNumber[e]||"px"!==l&&+s)&&It.exec(dt.css(t,e));if(c&&c[3]!==l){l=l||c[3],n=n||[],c=+s||1;do{c/=o=o||".5",dt.style(t,e,c+l)}while(o!==(o=u()/s)&&1!==o&&--a)}return n&&(c=+c||+s||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}function v(t){var e,n=t.ownerDocument,r=t.nodeName,i=qt[r];return i||(e=n.body.appendChild(n.createElement(r)),i=dt.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),qt[r]=i,i)}function m(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)(r=t[o]).style&&(n=r.style.display,e?("none"===n&&(i[o]=Ot.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&Ht(r)&&(i[o]=v(r))):"none"!==n&&(i[o]="none",Ot.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}function y(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&i(t,e)?dt.merge([t],n):n}function x(t,e){for(var n=0,r=t.length;n<r;n++)Ot.set(t[n],"globalEval",!e||Ot.get(e[n],"globalEval"))}function b(t,e,n,r,i){for(var o,a,u,s,l,c,f=e.createDocumentFragment(),h=[],d=0,p=t.length;d<p;d++)if((o=t[d])||0===o)if("object"===dt.type(o))dt.merge(h,o.nodeType?[o]:o);else if(Vt.test(o)){for(a=a||f.appendChild(e.createElement("div")),u=(zt.exec(o)||["",""])[1].toLowerCase(),s=Bt[u]||Bt._default,a.innerHTML=s[1]+dt.htmlPrefilter(o)+s[2],c=s[0];c--;)a=a.lastChild;dt.merge(h,a.childNodes),(a=f.firstChild).textContent=""}else h.push(e.createTextNode(o));for(f.textContent="",d=0;o=h[d++];)if(r&&dt.inArray(o,r)>-1)i&&i.push(o);else if(l=dt.contains(o.ownerDocument,o),a=y(f.appendChild(o),"script"),l&&x(a),n)for(c=0;o=a[c++];)Wt.test(o.type||"")&&n.push(o);return f}function w(){return!0}function _(){return!1}function M(){try{return et.activeElement}catch(t){}}function A(t,e,n,r,i,o){var a,u;if("object"==typeof e){"string"!=typeof n&&(r=r||n,n=void 0);for(u in e)A(t,u,n,r,e[u],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=_;else if(!i)return t;return 1===o&&(a=i,(i=function(t){return dt().off(t),a.apply(this,arguments)}).guid=a.guid||(a.guid=dt.guid++)),t.each(function(){dt.event.add(this,e,i,r,n)})}function k(t,e){return i(t,"table")&&i(11!==e.nodeType?e:e.firstChild,"tr")?dt(">tbody",t)[0]||t:t}function S(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function T(t){var e=ee.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function C(t,e){var n,r,i,o,a,u,s,l;if(1===e.nodeType){if(Ot.hasData(t)&&(o=Ot.access(t),a=Ot.set(e,o),l=o.events)){delete a.handle,a.events={};for(i in l)for(n=0,r=l[i].length;n<r;n++)dt.event.add(e,i,l[i][n])}Rt.hasData(t)&&(u=Rt.access(t),s=dt.extend({},u),Rt.set(e,s))}}function D(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Ut.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function E(t,e,r,i){e=it.apply([],e);var o,a,u,s,l,c,f=0,h=t.length,d=h-1,p=e[0],g=dt.isFunction(p);if(g||h>1&&"string"==typeof p&&!ht.checkClone&&te.test(p))return t.each(function(n){var o=t.eq(n);g&&(e[0]=p.call(this,n,o.html())),E(o,e,r,i)});if(h&&(o=b(e,t[0].ownerDocument,!1,t,i),a=o.firstChild,1===o.childNodes.length&&(o=a),a||i)){for(s=(u=dt.map(y(o,"script"),S)).length;f<h;f++)l=o,f!==d&&(l=dt.clone(l,!0,!0),s&&dt.merge(u,y(l,"script"))),r.call(t[f],l,f);if(s)for(c=u[u.length-1].ownerDocument,dt.map(u,T),f=0;f<s;f++)l=u[f],Wt.test(l.type||"")&&!Ot.access(l,"globalEval")&&dt.contains(c,l)&&(l.src?dt._evalUrl&&dt._evalUrl(l.src):n(l.textContent.replace(ne,""),c))}return t}function N(t,e,n){for(var r,i=e?dt.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||dt.cleanData(y(r)),r.parentNode&&(n&&dt.contains(r.ownerDocument,r)&&x(y(r,"script")),r.parentNode.removeChild(r));return t}function L(t,e,n){var r,i,o,a,u=t.style;return(n=n||oe(t))&&(""!==(a=n.getPropertyValue(e)||n[e])||dt.contains(t.ownerDocument,t)||(a=dt.style(t,e)),!ht.pixelMarginRight()&&ie.test(a)&&re.test(e)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+"":a}function O(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}function R(t){if(t in fe)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=ce.length;n--;)if((t=ce[n]+e)in fe)return t}function j(t){var e=dt.cssProps[t];return e||(e=dt.cssProps[t]=R(t)||t),e}function P(t,e,n){var r=It.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function F(t,e,n,r,i){var o,a=0;for(o=n===(r?"border":"content")?4:"width"===e?1:0;o<4;o+=2)"margin"===n&&(a+=dt.css(t,n+Yt[o],!0,i)),r?("content"===n&&(a-=dt.css(t,"padding"+Yt[o],!0,i)),"margin"!==n&&(a-=dt.css(t,"border"+Yt[o]+"Width",!0,i))):(a+=dt.css(t,"padding"+Yt[o],!0,i),"padding"!==n&&(a+=dt.css(t,"border"+Yt[o]+"Width",!0,i)));return a}function I(t,e,n){var r,i=oe(t),o=L(t,e,i),a="border-box"===dt.css(t,"boxSizing",!1,i);return ie.test(o)?o:(r=a&&(ht.boxSizingReliable()||o===t.style[e]),"auto"===o&&(o=t["offset"+e[0].toUpperCase()+e.slice(1)]),(o=parseFloat(o)||0)+F(t,e,n||(a?"border":"content"),r,i)+"px")}function Y(t,e,n,r,i){return new Y.prototype.init(t,e,n,r,i)}function H(){de&&(!1===et.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(H):t.setTimeout(H,dt.fx.interval),dt.fx.tick())}function $(){return t.setTimeout(function(){he=void 0}),he=dt.now()}function q(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)i["margin"+(n=Yt[r])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function U(t,e,n){for(var r,i=(W.tweeners[e]||[]).concat(W.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function z(t,e){var n,r,i,o,a;for(n in t)if(r=dt.camelCase(n),i=e[r],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(a=dt.cssHooks[r])&&"expand"in a){o=a.expand(o),delete t[r];for(n in o)n in t||(t[n]=o[n],e[n]=i)}else e[r]=i}function W(t,e,n){var r,i,o=0,a=W.prefilters.length,u=dt.Deferred().always(function(){delete s.elem}),s=function(){if(i)return!1;for(var e=he||$(),n=Math.max(0,l.startTime+l.duration-e),r=1-(n/l.duration||0),o=0,a=l.tweens.length;o<a;o++)l.tweens[o].run(r);return u.notifyWith(t,[l,r,n]),r<1&&a?n:(a||u.notifyWith(t,[l,1,0]),u.resolveWith(t,[l]),!1)},l=u.promise({elem:t,props:dt.extend({},e),opts:dt.extend(!0,{specialEasing:{},easing:dt.easing._default},n),originalProperties:e,originalOptions:n,startTime:he||$(),duration:n.duration,tweens:[],createTween:function(e,n){var r=dt.Tween(t,l.opts,e,n,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(r),r},stop:function(e){var n=0,r=e?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return e?(u.notifyWith(t,[l,1,0]),u.resolveWith(t,[l,e])):u.rejectWith(t,[l,e]),this}}),c=l.props;for(z(c,l.opts.specialEasing);o<a;o++)if(r=W.prefilters[o].call(l,t,c,l.opts))return dt.isFunction(r.stop)&&(dt._queueHooks(l.elem,l.opts.queue).stop=dt.proxy(r.stop,r)),r;return dt.map(c,U,l),dt.isFunction(l.opts.start)&&l.opts.start.call(t,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),dt.fx.timer(dt.extend(s,{elem:t,anim:l,queue:l.opts.queue})),l}function B(t){return(t.match(Ct)||[]).join(" ")}function V(t){return t.getAttribute&&t.getAttribute("class")||""}function G(t,e,n,r){var i;if(Array.isArray(e))dt.each(e,function(e,i){n||ke.test(t)?r(t,i):G(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)});else if(n||"object"!==dt.type(e))r(t,e);else for(i in e)G(t+"["+i+"]",e[i],n,r)}function X(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(Ct)||[];if(dt.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function Z(t,e,n,r){function i(u){var s;return o[u]=!0,dt.each(t[u]||[],function(t,u){var l=u(e,n,r);return"string"!=typeof l||a||o[l]?a?!(s=l):void 0:(e.dataTypes.unshift(l),i(l),!1)}),s}var o={},a=t===Fe;return i(e.dataTypes[0])||!o["*"]&&i("*")}function K(t,e){var n,r,i=dt.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&dt.extend(!0,t,r),t}function Q(t,e,n){for(var r,i,o,a,u=t.contents,s=t.dataTypes;"*"===s[0];)s.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in u)if(u[i]&&u[i].test(r)){s.unshift(i);break}if(s[0]in n)o=s[0];else{for(i in n){if(!s[0]||t.converters[i+" "+s[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==s[0]&&s.unshift(o),n[o]}function J(t,e,n,r){var i,o,a,u,s,l={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)l[a.toLowerCase()]=t.converters[a];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!s&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),s=o,o=c.shift())if("*"===o)o=s;else if("*"!==s&&s!==o){if(!(a=l[s+" "+o]||l["* "+o]))for(i in l)if((u=i.split(" "))[1]===o&&(a=l[s+" "+u[0]]||l["* "+u[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=u[0],c.unshift(u[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+s+" to "+o}}}return{state:"success",data:e}}var tt=[],et=t.document,nt=Object.getPrototypeOf,rt=tt.slice,it=tt.concat,ot=tt.push,at=tt.indexOf,ut={},st=ut.toString,lt=ut.hasOwnProperty,ct=lt.toString,ft=ct.call(Object),ht={},dt=function(t,e){return new dt.fn.init(t,e)},pt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,gt=/^-ms-/,vt=/-([a-z])/g,mt=function(t,e){return e.toUpperCase()};dt.fn=dt.prototype={jquery:"3.2.1",constructor:dt,length:0,toArray:function(){return rt.call(this)},get:function(t){return null==t?rt.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=dt.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return dt.each(this,t)},map:function(t){return this.pushStack(dt.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(rt.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ot,sort:tt.sort,splice:tt.splice},dt.extend=dt.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},u=1,s=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[u]||{},u++),"object"==typeof a||dt.isFunction(a)||(a={}),u===s&&(a=this,u--);u<s;u++)if(null!=(t=arguments[u]))for(e in t)n=a[e],a!==(r=t[e])&&(l&&r&&(dt.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&dt.isPlainObject(n)?n:{},a[e]=dt.extend(l,o,r)):void 0!==r&&(a[e]=r));return a},dt.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===dt.type(t)},isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=dt.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==st.call(t))&&(!(e=nt(t))||"function"==typeof(n=lt.call(e,"constructor")&&e.constructor)&&ct.call(n)===ft)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?ut[st.call(t)]||"object":typeof t},globalEval:function(t){n(t)},camelCase:function(t){return t.replace(gt,"ms-").replace(vt,mt)},each:function(t,e){var n,i=0;if(r(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace(pt,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(r(Object(t))?dt.merge(n,"string"==typeof t?[t]:t):ot.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:at.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,a=!n;i<o;i++)!e(t[i],i)!==a&&r.push(t[i]);return r},map:function(t,e,n){var i,o,a=0,u=[];if(r(t))for(i=t.length;a<i;a++)null!=(o=e(t[a],a,n))&&u.push(o);else for(a in t)null!=(o=e(t[a],a,n))&&u.push(o);return it.apply([],u)},guid:1,proxy:function(t,e){var n,r,i;if("string"==typeof e&&(n=t[e],e=t,t=n),dt.isFunction(t))return r=rt.call(arguments,2),i=function(){return t.apply(e||this,r.concat(rt.call(arguments)))},i.guid=t.guid=t.guid||dt.guid++,i},now:Date.now,support:ht}),"function"==typeof Symbol&&(dt.fn[Symbol.iterator]=tt[Symbol.iterator]),dt.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){ut["[object "+e+"]"]=e.toLowerCase()});var yt=function(t){function e(t,e,n,r){var i,o,a,u,s,c,h,d=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!r&&((e?e.ownerDocument||e:Y)!==N&&E(e),e=e||N,O)){if(11!==p&&(s=gt.exec(t)))if(i=s[1]){if(9===p){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(d&&(a=d.getElementById(i))&&F(e,a)&&a.id===i)return n.push(a),n}else{if(s[2])return Z.apply(n,e.getElementsByTagName(t)),n;if((i=s[3])&&b.getElementsByClassName&&e.getElementsByClassName)return Z.apply(n,e.getElementsByClassName(i)),n}if(b.qsa&&!z[t+" "]&&(!R||!R.test(t))){if(1!==p)d=e,h=t;else if("object"!==e.nodeName.toLowerCase()){for((u=e.getAttribute("id"))?u=u.replace(xt,bt):e.setAttribute("id",u=I),o=(c=A(t)).length;o--;)c[o]="#"+u+" "+f(c[o]);h=c.join(","),d=vt.test(t)&&l(e.parentNode)||e}if(h)try{return Z.apply(n,d.querySelectorAll(h)),n}catch(t){}finally{u===I&&e.removeAttribute("id")}}}return S(t.replace(ot,"$1"),e,n,r)}function n(){function t(n,r){return e.push(n+" ")>w.cacheLength&&delete t[e.shift()],t[n+" "]=r}var e=[];return t}function r(t){return t[I]=!0,t}function i(t){var e=N.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),r=n.length;r--;)w.attrHandle[n[r]]=e}function a(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function u(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&_t(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function s(t){return r(function(e){return e=+e,r(function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function l(t){return t&&void 0!==t.getElementsByTagName&&t}function c(){}function f(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function h(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,u=$++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,s){var l,c,f,h=[H,u];if(s){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,s))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(f=e[I]||(e[I]={}),c=f[e.uniqueID]||(f[e.uniqueID]={}),i&&i===e.nodeName.toLowerCase())e=e[r]||e;else{if((l=c[o])&&l[0]===H&&l[1]===u)return h[2]=l[2];if(c[o]=h,h[2]=t(e,n,s))return!0}return!1}}function d(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function p(t,n,r){for(var i=0,o=n.length;i<o;i++)e(t,n[i],r);return r}function g(t,e,n,r,i){for(var o,a=[],u=0,s=t.length,l=null!=e;u<s;u++)(o=t[u])&&(n&&!n(o,r,i)||(a.push(o),l&&e.push(u)));return a}function v(t,e,n,i,o,a){return i&&!i[I]&&(i=v(i)),o&&!o[I]&&(o=v(o,a)),r(function(r,a,u,s){var l,c,f,h=[],d=[],v=a.length,m=r||p(e||"*",u.nodeType?[u]:u,[]),y=!t||!r&&e?m:g(m,h,t,u,s),x=n?o||(r?t:v||i)?[]:a:y;if(n&&n(y,x,u,s),i)for(l=g(x,d),i(l,[],u,s),c=l.length;c--;)(f=l[c])&&(x[d[c]]=!(y[d[c]]=f));if(r){if(o||t){if(o){for(l=[],c=x.length;c--;)(f=x[c])&&l.push(y[c]=f);o(null,x=[],l,s)}for(c=x.length;c--;)(f=x[c])&&(l=o?Q(r,f):h[c])>-1&&(r[l]=!(a[l]=f))}}else x=g(x===a?x.splice(v,x.length):x),o?o(null,a,x,s):Z.apply(a,x)})}function m(t){for(var e,n,r,i=t.length,o=w.relative[t[0].type],a=o||w.relative[" "],u=o?1:0,s=h(function(t){return t===e},a,!0),l=h(function(t){return Q(e,t)>-1},a,!0),c=[function(t,n,r){var i=!o&&(r||n!==T)||((e=n).nodeType?s(t,n,r):l(t,n,r));return e=null,i}];u<i;u++)if(n=w.relative[t[u].type])c=[h(d(c),n)];else{if((n=w.filter[t[u].type].apply(null,t[u].matches))[I]){for(r=++u;r<i&&!w.relative[t[r].type];r++);return v(u>1&&d(c),u>1&&f(t.slice(0,u-1).concat({value:" "===t[u-2].type?"*":""})).replace(ot,"$1"),n,u<r&&m(t.slice(u,r)),r<i&&m(t=t.slice(r)),r<i&&f(t))}c.push(n)}return d(c)}function y(t,n){var i=n.length>0,o=t.length>0,a=function(r,a,u,s,l){var c,f,h,d=0,p="0",v=r&&[],m=[],y=T,x=r||o&&w.find.TAG("*",l),b=H+=null==y?1:Math.random()||.1,_=x.length;for(l&&(T=a===N||a||l);p!==_&&null!=(c=x[p]);p++){if(o&&c){for(f=0,a||c.ownerDocument===N||(E(c),u=!O);h=t[f++];)if(h(c,a||N,u)){s.push(c);break}l&&(H=b)}i&&((c=!h&&c)&&d--,r&&v.push(c))}if(d+=p,i&&p!==d){for(f=0;h=n[f++];)h(v,m,a,u);if(r){if(d>0)for(;p--;)v[p]||m[p]||(m[p]=G.call(s));m=g(m)}Z.apply(s,m),l&&!r&&m.length>0&&d+n.length>1&&e.uniqueSort(s)}return l&&(H=b,T=y),v};return i?r(a):a}var x,b,w,_,M,A,k,S,T,C,D,E,N,L,O,R,j,P,F,I="sizzle"+1*new Date,Y=t.document,H=0,$=0,q=n(),U=n(),z=n(),W=function(t,e){return t===e&&(D=!0),0},B={}.hasOwnProperty,V=[],G=V.pop,X=V.push,Z=V.push,K=V.slice,Q=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",tt="[\\x20\\t\\r\\n\\f]",et="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",nt="\\["+tt+"*("+et+")(?:"+tt+"*([*^$|!~]?=)"+tt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+et+"))|)"+tt+"*\\]",rt=":("+et+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+nt+")*)|.*)\\)|)",it=new RegExp(tt+"+","g"),ot=new RegExp("^"+tt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+tt+"+$","g"),at=new RegExp("^"+tt+"*,"+tt+"*"),ut=new RegExp("^"+tt+"*([>+~]|"+tt+")"+tt+"*"),st=new RegExp("="+tt+"*([^\\]'\"]*?)"+tt+"*\\]","g"),lt=new RegExp(rt),ct=new RegExp("^"+et+"$"),ft={ID:new RegExp("^#("+et+")"),CLASS:new RegExp("^\\.("+et+")"),TAG:new RegExp("^("+et+"|[*])"),ATTR:new RegExp("^"+nt),PSEUDO:new RegExp("^"+rt),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+tt+"*(even|odd|(([+-]|)(\\d*)n|)"+tt+"*(?:([+-]|)"+tt+"*(\\d+)|))"+tt+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+tt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+tt+"*((?:-\\d)?\\d*)"+tt+"*\\)|)(?=[^-]|$)","i")},ht=/^(?:input|select|textarea|button)$/i,dt=/^h\d$/i,pt=/^[^{]+\{\s*\[native \w/,gt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,vt=/[+~]/,mt=new RegExp("\\\\([\\da-f]{1,6}"+tt+"?|("+tt+")|.)","ig"),yt=function(t,e,n){var r="0x"+e-65536;return r!==r||n?e:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},xt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,bt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},wt=function(){E()},_t=h(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{Z.apply(V=K.call(Y.childNodes),Y.childNodes),V[Y.childNodes.length].nodeType}catch(t){Z={apply:V.length?function(t,e){X.apply(t,K.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}b=e.support={},M=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},E=e.setDocument=function(t){var e,n,r=t?t.ownerDocument||t:Y;return r!==N&&9===r.nodeType&&r.documentElement?(N=r,L=N.documentElement,O=!M(N),Y!==N&&(n=N.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",wt,!1):n.attachEvent&&n.attachEvent("onunload",wt)),b.attributes=i(function(t){return t.className="i",!t.getAttribute("className")}),b.getElementsByTagName=i(function(t){return t.appendChild(N.createComment("")),!t.getElementsByTagName("*").length}),b.getElementsByClassName=pt.test(N.getElementsByClassName),b.getById=i(function(t){return L.appendChild(t).id=I,!N.getElementsByName||!N.getElementsByName(I).length}),b.getById?(w.filter.ID=function(t){var e=t.replace(mt,yt);return function(t){return t.getAttribute("id")===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&O){var n=e.getElementById(t);return n?[n]:[]}}):(w.filter.ID=function(t){var e=t.replace(mt,yt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&O){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),w.find.TAG=b.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):b.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},w.find.CLASS=b.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&O)return e.getElementsByClassName(t)},j=[],R=[],(b.qsa=pt.test(N.querySelectorAll))&&(i(function(t){L.appendChild(t).innerHTML="<a id='"+I+"'></a><select id='"+I+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&R.push("[*^$]="+tt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||R.push("\\["+tt+"*(?:value|"+J+")"),t.querySelectorAll("[id~="+I+"-]").length||R.push("~="),t.querySelectorAll(":checked").length||R.push(":checked"),t.querySelectorAll("a#"+I+"+*").length||R.push(".#.+[+~]")}),i(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=N.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&R.push("name"+tt+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&R.push(":enabled",":disabled"),L.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&R.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),R.push(",.*:")})),(b.matchesSelector=pt.test(P=L.matches||L.webkitMatchesSelector||L.mozMatchesSelector||L.oMatchesSelector||L.msMatchesSelector))&&i(function(t){b.disconnectedMatch=P.call(t,"*"),P.call(t,"[s!='']:x"),j.push("!=",rt)}),R=R.length&&new RegExp(R.join("|")),j=j.length&&new RegExp(j.join("|")),e=pt.test(L.compareDocumentPosition),F=e||pt.test(L.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},W=e?function(t,e){if(t===e)return D=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!b.sortDetached&&e.compareDocumentPosition(t)===n?t===N||t.ownerDocument===Y&&F(Y,t)?-1:e===N||e.ownerDocument===Y&&F(Y,e)?1:C?Q(C,t)-Q(C,e):0:4&n?-1:1)}:function(t,e){if(t===e)return D=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,u=[t],s=[e];if(!i||!o)return t===N?-1:e===N?1:i?-1:o?1:C?Q(C,t)-Q(C,e):0;if(i===o)return a(t,e);for(n=t;n=n.parentNode;)u.unshift(n);for(n=e;n=n.parentNode;)s.unshift(n);for(;u[r]===s[r];)r++;return r?a(u[r],s[r]):u[r]===Y?-1:s[r]===Y?1:0},N):N},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==N&&E(t),n=n.replace(st,"='$1']"),b.matchesSelector&&O&&!z[n+" "]&&(!j||!j.test(n))&&(!R||!R.test(n)))try{var r=P.call(t,n);if(r||b.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(t){}return e(n,N,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==N&&E(t),F(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==N&&E(t);var n=w.attrHandle[e.toLowerCase()],r=n&&B.call(w.attrHandle,e.toLowerCase())?n(t,e,!O):void 0;return void 0!==r?r:b.attributes||!O?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},e.escape=function(t){return(t+"").replace(xt,bt)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],r=0,i=0;if(D=!b.detectDuplicates,C=!b.sortStable&&t.slice(0),t.sort(W),D){for(;e=t[i++];)e===t[i]&&(r=n.push(i));for(;r--;)t.splice(n[r],1)}return C=null,t},_=e.getText=function(t){var e,n="",r=0,i=t.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=_(t)}else if(3===i||4===i)return t.nodeValue}else for(;e=t[r++];)n+=_(e);return n},(w=e.selectors={cacheLength:50,createPseudo:r,match:ft,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(mt,yt),t[3]=(t[3]||t[4]||t[5]||"").replace(mt,yt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return ft.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&lt.test(n)&&(e=A(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(mt,yt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=q[t+" "];return e||(e=new RegExp("(^|"+tt+")"+t+"("+tt+"|$)"))&&q(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,r){return function(i){var o=e.attr(i,t);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(it," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),u="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,s){var l,c,f,h,d,p,g=o!==a?"nextSibling":"previousSibling",v=e.parentNode,m=u&&e.nodeName.toLowerCase(),y=!s&&!u,x=!1;if(v){if(o){for(;g;){for(h=e;h=h[g];)if(u?h.nodeName.toLowerCase()===m:1===h.nodeType)return!1;p=g="only"===t&&!p&&"nextSibling"}return!0}if(p=[a?v.firstChild:v.lastChild],a&&y){for(x=(d=(l=(c=(f=(h=v)[I]||(h[I]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===H&&l[1])&&l[2],h=d&&v.childNodes[d];h=++d&&h&&h[g]||(x=d=0)||p.pop();)if(1===h.nodeType&&++x&&h===e){c[t]=[H,d,x];break}}else if(y&&(x=d=(l=(c=(f=(h=e)[I]||(h[I]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===H&&l[1]),!1===x)for(;(h=++d&&h&&h[g]||(x=d=0)||p.pop())&&((u?h.nodeName.toLowerCase()!==m:1!==h.nodeType)||!++x||(y&&((c=(f=h[I]||(h[I]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]=[H,x]),h!==e)););return(x-=i)===r||x%r==0&&x/r>=0}}},PSEUDO:function(t,n){var i,o=w.pseudos[t]||w.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[I]?o(n):o.length>1?(i=[t,t,"",n],w.setFilters.hasOwnProperty(t.toLowerCase())?r(function(t,e){for(var r,i=o(t,n),a=i.length;a--;)t[r=Q(t,i[a])]=!(e[r]=i[a])}):function(t){return o(t,0,i)}):o}},pseudos:{not:r(function(t){var e=[],n=[],i=k(t.replace(ot,"$1"));return i[I]?r(function(t,e,n,r){for(var o,a=i(t,null,r,[]),u=t.length;u--;)(o=a[u])&&(t[u]=!(e[u]=o))}):function(t,r,o){return e[0]=t,i(e,null,o,n),e[0]=null,!n.pop()}}),has:r(function(t){return function(n){return e(t,n).length>0}}),contains:r(function(t){return t=t.replace(mt,yt),function(e){return(e.textContent||e.innerText||_(e)).indexOf(t)>-1}}),lang:r(function(t){return ct.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(mt,yt).toLowerCase(),function(e){var n;do{if(n=O?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===L},focus:function(t){return t===N.activeElement&&(!N.hasFocus||N.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:u(!1),disabled:u(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!w.pseudos.empty(t)},header:function(t){return dt.test(t.nodeName)},input:function(t){return ht.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:s(function(){return[0]}),last:s(function(t,e){return[e-1]}),eq:s(function(t,e,n){return[n<0?n+e:n]}),even:s(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:s(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:s(function(t,e,n){for(var r=n<0?n+e:n;--r>=0;)t.push(r);return t}),gt:s(function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t})}}).pseudos.nth=w.pseudos.eq;for(x in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[x]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(x);for(x in{submit:!0,reset:!0})w.pseudos[x]=function(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}(x);return c.prototype=w.filters=w.pseudos,w.setFilters=new c,A=e.tokenize=function(t,n){var r,i,o,a,u,s,l,c=U[t+" "];if(c)return n?0:c.slice(0);for(u=t,s=[],l=w.preFilter;u;){r&&!(i=at.exec(u))||(i&&(u=u.slice(i[0].length)||u),s.push(o=[])),r=!1,(i=ut.exec(u))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ot," ")}),u=u.slice(r.length));for(a in w.filter)!(i=ft[a].exec(u))||l[a]&&!(i=l[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),u=u.slice(r.length));if(!r)break}return n?u.length:u?e.error(t):U(t,s).slice(0)},k=e.compile=function(t,e){var n,r=[],i=[],o=z[t+" "];if(!o){for(e||(e=A(t)),n=e.length;n--;)(o=m(e[n]))[I]?r.push(o):i.push(o);(o=z(t,y(i,r))).selector=t}return o},S=e.select=function(t,e,n,r){var i,o,a,u,s,c="function"==typeof t&&t,h=!r&&A(t=c.selector||t);if(n=n||[],1===h.length){if((o=h[0]=h[0].slice(0)).length>2&&"ID"===(a=o[0]).type&&9===e.nodeType&&O&&w.relative[o[1].type]){if(!(e=(w.find.ID(a.matches[0].replace(mt,yt),e)||[])[0]))return n;c&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(i=ft.needsContext.test(t)?0:o.length;i--&&(a=o[i],!w.relative[u=a.type]);)if((s=w.find[u])&&(r=s(a.matches[0].replace(mt,yt),vt.test(o[0].type)&&l(e.parentNode)||e))){if(o.splice(i,1),!(t=r.length&&f(o)))return Z.apply(n,r),n;break}}return(c||k(t,h))(r,e,!O,n,!e||vt.test(t)&&l(e.parentNode)||e),n},b.sortStable=I.split("").sort(W).join("")===I,b.detectDuplicates=!!D,E(),b.sortDetached=i(function(t){return 1&t.compareDocumentPosition(N.createElement("fieldset"))}),i(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),b.attributes&&i(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),i(function(t){return null==t.getAttribute("disabled")})||o(J,function(t,e,n){var r;if(!n)return!0===t[e]?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null}),e}(t);dt.find=yt,dt.expr=yt.selectors,dt.expr[":"]=dt.expr.pseudos,dt.uniqueSort=dt.unique=yt.uniqueSort,dt.text=yt.getText,dt.isXMLDoc=yt.isXML,dt.contains=yt.contains,dt.escapeSelector=yt.escape;var xt=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&dt(t).is(n))break;r.push(t)}return r},bt=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},wt=dt.expr.match.needsContext,_t=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Mt=/^.[^:#\[\.,]*$/;dt.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?dt.find.matchesSelector(r,t)?[r]:[]:dt.find.matches(t,dt.grep(e,function(t){return 1===t.nodeType}))},dt.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(dt(t).filter(function(){for(e=0;e<r;e++)if(dt.contains(i[e],this))return!0}));for(n=this.pushStack([]),e=0;e<r;e++)dt.find(t,i[e],n);return r>1?dt.uniqueSort(n):n},filter:function(t){return this.pushStack(o(this,t||[],!1))},not:function(t){return this.pushStack(o(this,t||[],!0))},is:function(t){return!!o(this,"string"==typeof t&&wt.test(t)?dt(t):t||[],!1).length}});var At,kt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(dt.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||At,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:kt.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof dt?e[0]:e,dt.merge(this,dt.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:et,!0)),_t.test(r[1])&&dt.isPlainObject(e))for(r in e)dt.isFunction(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(i=et.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):dt.isFunction(t)?void 0!==n.ready?n.ready(t):t(dt):dt.makeArray(t,this)}).prototype=dt.fn,At=dt(et);var St=/^(?:parents|prev(?:Until|All))/,Tt={children:!0,contents:!0,next:!0,prev:!0};dt.fn.extend({has:function(t){var e=dt(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(dt.contains(this,e[t]))return!0})},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&dt(t);if(!wt.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&dt.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?dt.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?at.call(dt(t),this[0]):at.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(dt.uniqueSort(dt.merge(this.get(),dt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),dt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return xt(t,"parentNode")},parentsUntil:function(t,e,n){return xt(t,"parentNode",n)},next:function(t){return a(t,"nextSibling")},prev:function(t){return a(t,"previousSibling")},nextAll:function(t){return xt(t,"nextSibling")},prevAll:function(t){return xt(t,"previousSibling")},nextUntil:function(t,e,n){return xt(t,"nextSibling",n)},prevUntil:function(t,e,n){return xt(t,"previousSibling",n)},siblings:function(t){return bt((t.parentNode||{}).firstChild,t)},children:function(t){return bt(t.firstChild)},contents:function(t){return i(t,"iframe")?t.contentDocument:(i(t,"template")&&(t=t.content||t),dt.merge([],t.childNodes))}},function(t,e){dt.fn[t]=function(n,r){var i=dt.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=dt.filter(r,i)),this.length>1&&(Tt[t]||dt.uniqueSort(i),St.test(t)&&i.reverse()),this.pushStack(i)}});var Ct=/[^\x20\t\r\n\f]+/g;dt.Callbacks=function(t){t="string"==typeof t?u(t):dt.extend({},t);var e,n,r,i,o=[],a=[],s=-1,l=function(){for(i=i||t.once,r=e=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&t.stopOnFalse&&(s=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!e&&(s=o.length-1,a.push(n)),function e(n){dt.each(n,function(n,r){dt.isFunction(r)?t.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==dt.type(r)&&e(r)})}(arguments),n&&!e&&l()),this},remove:function(){return dt.each(arguments,function(t,e){for(var n;(n=dt.inArray(e,o,n))>-1;)o.splice(n,1),n<=s&&s--}),this},has:function(t){return t?dt.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=[t,(n=n||[]).slice?n.slice():n],a.push(n),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},dt.extend({Deferred:function(e){var n=[["notify","progress",dt.Callbacks("memory"),dt.Callbacks("memory"),2],["resolve","done",dt.Callbacks("once memory"),dt.Callbacks("once memory"),0,"resolved"],["reject","fail",dt.Callbacks("once memory"),dt.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return dt.Deferred(function(e){dt.each(n,function(n,r){var i=dt.isFunction(t[r[4]])&&t[r[4]];o[r[1]](function(){var t=i&&i.apply(this,arguments);t&&dt.isFunction(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[r[0]+"With"](this,i?[t]:arguments)})}),t=null}).promise()},then:function(e,r,i){function o(e,n,r,i){return function(){var u=this,c=arguments,f=function(){var t,f;if(!(e<a)){if((t=r.apply(u,c))===n.promise())throw new TypeError("Thenable self-resolution");f=t&&("object"==typeof t||"function"==typeof t)&&t.then,dt.isFunction(f)?i?f.call(t,o(a,n,s,i),o(a,n,l,i)):(a++,f.call(t,o(a,n,s,i),o(a,n,l,i),o(a,n,s,n.notifyWith))):(r!==s&&(u=void 0,c=[t]),(i||n.resolveWith)(u,c))}},h=i?f:function(){try{f()}catch(t){dt.Deferred.exceptionHook&&dt.Deferred.exceptionHook(t,h.stackTrace),e+1>=a&&(r!==l&&(u=void 0,c=[t]),n.rejectWith(u,c))}};e?h():(dt.Deferred.getStackHook&&(h.stackTrace=dt.Deferred.getStackHook()),t.setTimeout(h))}}var a=0;return dt.Deferred(function(t){n[0][3].add(o(0,t,dt.isFunction(i)?i:s,t.notifyWith)),n[1][3].add(o(0,t,dt.isFunction(e)?e:s)),n[2][3].add(o(0,t,dt.isFunction(r)?r:l))}).promise()},promise:function(t){return null!=t?dt.extend(t,i):i}},o={};return dt.each(n,function(t,e){var a=e[2],u=e[5];i[e[1]]=a.add,u&&a.add(function(){r=u},n[3-t][2].disable,n[0][2].lock),a.add(e[3].fire),o[e[0]]=function(){return o[e[0]+"With"](this===o?void 0:this,arguments),this},o[e[0]+"With"]=a.fireWith}),i.promise(o),e&&e.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),i=rt.call(arguments),o=dt.Deferred(),a=function(t){return function(n){r[t]=this,i[t]=arguments.length>1?rt.call(arguments):n,--e||o.resolveWith(r,i)}};if(e<=1&&(c(t,o.done(a(n)).resolve,o.reject,!e),"pending"===o.state()||dt.isFunction(i[n]&&i[n].then)))return o.then();for(;n--;)c(i[n],a(n),o.reject);return o.promise()}});var Dt=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;dt.Deferred.exceptionHook=function(e,n){t.console&&t.console.warn&&e&&Dt.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},dt.readyException=function(e){t.setTimeout(function(){throw e})};var Et=dt.Deferred();dt.fn.ready=function(t){return Et.then(t).catch(function(t){dt.readyException(t)}),this},dt.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--dt.readyWait:dt.isReady)||(dt.isReady=!0,!0!==t&&--dt.readyWait>0||Et.resolveWith(et,[dt]))}}),dt.ready.then=Et.then,"complete"===et.readyState||"loading"!==et.readyState&&!et.documentElement.doScroll?t.setTimeout(dt.ready):(et.addEventListener("DOMContentLoaded",f),t.addEventListener("load",f));var Nt=function(t,e,n,r,i,o,a){var u=0,s=t.length,l=null==n;if("object"===dt.type(n)){i=!0;for(u in n)Nt(t,e,u,n[u],!0,o,a)}else if(void 0!==r&&(i=!0,dt.isFunction(r)||(a=!0),l&&(a?(e.call(t,r),e=null):(l=e,e=function(t,e,n){return l.call(dt(t),n)})),e))for(;u<s;u++)e(t[u],n,a?r:r.call(t[u],u,e(t[u],n)));return i?t:l?e.call(t):s?e(t[0],n):o},Lt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};h.uid=1,h.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Lt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[dt.camelCase(e)]=n;else for(r in e)i[dt.camelCase(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][dt.camelCase(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(dt.camelCase):(e=dt.camelCase(e))in r?[e]:e.match(Ct)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||dt.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!dt.isEmptyObject(e)}};var Ot=new h,Rt=new h,jt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Pt=/[A-Z]/g;dt.extend({hasData:function(t){return Rt.hasData(t)||Ot.hasData(t)},data:function(t,e,n){return Rt.access(t,e,n)},removeData:function(t,e){Rt.remove(t,e)},_data:function(t,e,n){return Ot.access(t,e,n)},_removeData:function(t,e){Ot.remove(t,e)}}),dt.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=Rt.get(o),1===o.nodeType&&!Ot.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=dt.camelCase(r.slice(5)),p(o,r,i[r]));Ot.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each(function(){Rt.set(this,t)}):Nt(this,function(e){var n;if(o&&void 0===e){if(void 0!==(n=Rt.get(o,t)))return n;if(void 0!==(n=p(o,t)))return n}else this.each(function(){Rt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Rt.remove(this,t)})}}),dt.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=Ot.get(t,e),n&&(!r||Array.isArray(n)?r=Ot.access(t,e,dt.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=dt.queue(t,e),r=n.length,i=n.shift(),o=dt._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,function(){dt.dequeue(t,e)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Ot.get(t,n)||Ot.access(t,n,{empty:dt.Callbacks("once memory").add(function(){Ot.remove(t,[e+"queue",n])})})}}),dt.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?dt.queue(this[0],t):void 0===e?this:this.each(function(){var n=dt.queue(this,t,e);dt._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&dt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){dt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=dt.Deferred(),o=this,a=this.length,u=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=Ot.get(o[a],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(u));return u(),i.promise(e)}});var Ft=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,It=new RegExp("^(?:([+-])=|)("+Ft+")([a-z%]*)$","i"),Yt=["Top","Right","Bottom","Left"],Ht=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&dt.contains(t.ownerDocument,t)&&"none"===dt.css(t,"display")},$t=function(t,e,n,r){var i,o,a={};for(o in e)a[o]=t.style[o],t.style[o]=e[o];i=n.apply(t,r||[]);for(o in e)t.style[o]=a[o];return i},qt={};dt.fn.extend({show:function(){return m(this,!0)},hide:function(){return m(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Ht(this)?dt(this).show():dt(this).hide()})}});var Ut=/^(?:checkbox|radio)$/i,zt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Wt=/^$|\/(?:java|ecma)script/i,Bt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Bt.optgroup=Bt.option,Bt.tbody=Bt.tfoot=Bt.colgroup=Bt.caption=Bt.thead,Bt.th=Bt.td;var Vt=/<|&#?\w+;/;!function(){var t=et.createDocumentFragment().appendChild(et.createElement("div")),e=et.createElement("input");e.setAttribute("type","radio"),e.setAttribute("checked","checked"),e.setAttribute("name","t"),t.appendChild(e),ht.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",ht.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Gt=et.documentElement,Xt=/^key/,Zt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Kt=/^([^.]*)(?:\.(.+)|)/;dt.event={global:{},add:function(t,e,n,r,i){var o,a,u,s,l,c,f,h,d,p,g,v=Ot.get(t);if(v)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&dt.find.matchesSelector(Gt,i),n.guid||(n.guid=dt.guid++),(s=v.events)||(s=v.events={}),(a=v.handle)||(a=v.handle=function(e){return void 0!==dt&&dt.event.triggered!==e.type?dt.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(Ct)||[""]).length;l--;)d=g=(u=Kt.exec(e[l])||[])[1],p=(u[2]||"").split(".").sort(),d&&(f=dt.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=dt.event.special[d]||{},c=dt.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&dt.expr.match.needsContext.test(i),namespace:p.join(".")},o),(h=s[d])||((h=s[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,p,a)||t.addEventListener&&t.addEventListener(d,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,c):h.push(c),dt.event.global[d]=!0)},remove:function(t,e,n,r,i){var o,a,u,s,l,c,f,h,d,p,g,v=Ot.hasData(t)&&Ot.get(t);if(v&&(s=v.events)){for(l=(e=(e||"").match(Ct)||[""]).length;l--;)if(u=Kt.exec(e[l])||[],d=g=u[1],p=(u[2]||"").split(".").sort(),d){for(f=dt.event.special[d]||{},h=s[d=(r?f.delegateType:f.bindType)||d]||[],u=u[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)c=h[o],!i&&g!==c.origType||n&&n.guid!==c.guid||u&&!u.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,f.remove&&f.remove.call(t,c));a&&!h.length&&(f.teardown&&!1!==f.teardown.call(t,p,v.handle)||dt.removeEvent(t,d,v.handle),delete s[d])}else for(d in s)dt.event.remove(t,d+e[l],n,r,!0);dt.isEmptyObject(s)&&Ot.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,u=dt.event.fix(t),s=new Array(arguments.length),l=(Ot.get(this,"events")||{})[u.type]||[],c=dt.event.special[u.type]||{};for(s[0]=u,e=1;e<arguments.length;e++)s[e]=arguments[e];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){for(a=dt.event.handlers.call(this,u,l),e=0;(i=a[e++])&&!u.isPropagationStopped();)for(u.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((dt.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(t,e){var n,r,i,o,a,u=[],s=e.delegateCount,l=t.target;if(s&&l.nodeType&&!("click"===t.type&&t.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==t.type||!0!==l.disabled)){for(o=[],a={},n=0;n<s;n++)void 0===a[i=(r=e[n]).selector+" "]&&(a[i]=r.needsContext?dt(i,this).index(l)>-1:dt.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&u.push({elem:l,handlers:o})}return l=this,s<e.length&&u.push({elem:l,handlers:e.slice(s)}),u},addProp:function(t,e){Object.defineProperty(dt.Event.prototype,t,{enumerable:!0,configurable:!0,get:dt.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[dt.expando]?t:new dt.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==M()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===M()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&i(this,"input"))return this.click(),!1},_default:function(t){return i(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},dt.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},dt.Event=function(t,e){if(!(this instanceof dt.Event))return new dt.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?w:_,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&dt.extend(this,e),this.timeStamp=t&&t.timeStamp||dt.now(),this[dt.expando]=!0},dt.Event.prototype={constructor:dt.Event,isDefaultPrevented:_,isPropagationStopped:_,isImmediatePropagationStopped:_,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=w,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=w,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=w,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},dt.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Xt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Zt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},dt.event.addProp),dt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){dt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=this,i=t.relatedTarget,o=t.handleObj;return i&&(i===r||dt.contains(r,i))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),dt.fn.extend({on:function(t,e,n,r){return A(this,t,e,n,r)},one:function(t,e,n,r){return A(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,dt(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=_),this.each(function(){dt.event.remove(this,t,n,e)})}});var Qt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Jt=/<script|<style|<link/i,te=/checked\s*(?:[^=]|=\s*.checked.)/i,ee=/^true\/(.*)/,ne=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;dt.extend({htmlPrefilter:function(t){return t.replace(Qt,"<$1></$2>")},clone:function(t,e,n){var r,i,o,a,u=t.cloneNode(!0),s=dt.contains(t.ownerDocument,t);if(!(ht.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||dt.isXMLDoc(t)))for(a=y(u),r=0,i=(o=y(t)).length;r<i;r++)D(o[r],a[r]);if(e)if(n)for(o=o||y(t),a=a||y(u),r=0,i=o.length;r<i;r++)C(o[r],a[r]);else C(t,u);return(a=y(u,"script")).length>0&&x(a,!s&&y(t,"script")),u},cleanData:function(t){for(var e,n,r,i=dt.event.special,o=0;void 0!==(n=t[o]);o++)if(Lt(n)){if(e=n[Ot.expando]){if(e.events)for(r in e.events)i[r]?dt.event.remove(n,r):dt.removeEvent(n,r,e.handle);n[Ot.expando]=void 0}n[Rt.expando]&&(n[Rt.expando]=void 0)}}}),dt.fn.extend({detach:function(t){return N(this,t,!0)},remove:function(t){return N(this,t)},text:function(t){return Nt(this,function(t){return void 0===t?dt.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return E(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||k(this,t).appendChild(t)})},prepend:function(){return E(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=k(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return E(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return E(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(dt.cleanData(y(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return dt.clone(this,t,e)})},html:function(t){return Nt(this,function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Jt.test(t)&&!Bt[(zt.exec(t)||["",""])[1].toLowerCase()]){t=dt.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(dt.cleanData(y(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return E(this,arguments,function(e){var n=this.parentNode;dt.inArray(this,t)<0&&(dt.cleanData(y(this)),n&&n.replaceChild(e,this))},t)}}),dt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){dt.fn[t]=function(t){for(var n,r=[],i=dt(t),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),dt(i[a])[e](n),ot.apply(r,n.get());return this.pushStack(r)}});var re=/^margin/,ie=new RegExp("^("+Ft+")(?!px)[a-z%]+$","i"),oe=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)};!function(){function e(){if(u){u.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",u.innerHTML="",Gt.appendChild(a);var e=t.getComputedStyle(u);n="1%"!==e.top,o="2px"===e.marginLeft,r="4px"===e.width,u.style.marginRight="50%",i="4px"===e.marginRight,Gt.removeChild(a),u=null}}var n,r,i,o,a=et.createElement("div"),u=et.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",ht.clearCloneStyle="content-box"===u.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(u),dt.extend(ht,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return e(),r},pixelMarginRight:function(){return e(),i},reliableMarginLeft:function(){return e(),o}}))}();var ae=/^(none|table(?!-c[ea]).+)/,ue=/^--/,se={position:"absolute",visibility:"hidden",display:"block"},le={letterSpacing:"0",fontWeight:"400"},ce=["Webkit","Moz","ms"],fe=et.createElement("div").style;dt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=L(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,u=dt.camelCase(e),s=ue.test(e),l=t.style;if(s||(e=j(u)),a=dt.cssHooks[e]||dt.cssHooks[u],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:l[e];"string"==(o=typeof n)&&(i=It.exec(n))&&i[1]&&(n=g(t,e,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(dt.cssNumber[u]?"":"px")),ht.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(s?l.setProperty(e,n):l[e]=n))}},css:function(t,e,n,r){var i,o,a,u=dt.camelCase(e);return ue.test(e)||(e=j(u)),(a=dt.cssHooks[e]||dt.cssHooks[u])&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=L(t,e,r)),"normal"===i&&e in le&&(i=le[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),dt.each(["height","width"],function(t,e){dt.cssHooks[e]={get:function(t,n,r){if(n)return!ae.test(dt.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?I(t,e,r):$t(t,se,function(){return I(t,e,r)})},set:function(t,n,r){var i,o=r&&oe(t),a=r&&F(t,e,r,"border-box"===dt.css(t,"boxSizing",!1,o),o);return a&&(i=It.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=dt.css(t,e)),P(0,n,a)}}}),dt.cssHooks.marginLeft=O(ht.reliableMarginLeft,function(t,e){if(e)return(parseFloat(L(t,"marginLeft"))||t.getBoundingClientRect().left-$t(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),dt.each({margin:"",padding:"",border:"Width"},function(t,e){dt.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+Yt[r]+e]=o[r]||o[r-2]||o[0];return i}},re.test(t)||(dt.cssHooks[t+e].set=P)}),dt.fn.extend({css:function(t,e){return Nt(this,function(t,e,n){var r,i,o={},a=0;if(Array.isArray(e)){for(r=oe(t),i=e.length;a<i;a++)o[e[a]]=dt.css(t,e[a],!1,r);return o}return void 0!==n?dt.style(t,e,n):dt.css(t,e)},t,e,arguments.length>1)}}),dt.Tween=Y,Y.prototype={constructor:Y,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||dt.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(dt.cssNumber[n]?"":"px")},cur:function(){var t=Y.propHooks[this.prop];return t&&t.get?t.get(this):Y.propHooks._default.get(this)},run:function(t){var e,n=Y.propHooks[this.prop];return this.options.duration?this.pos=e=dt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Y.propHooks._default.set(this),this}},Y.prototype.init.prototype=Y.prototype,Y.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=dt.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){dt.fx.step[t.prop]?dt.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[dt.cssProps[t.prop]]&&!dt.cssHooks[t.prop]?t.elem[t.prop]=t.now:dt.style(t.elem,t.prop,t.now+t.unit)}}},Y.propHooks.scrollTop=Y.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},dt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},dt.fx=Y.prototype.init,dt.fx.step={};var he,de,pe=/^(?:toggle|show|hide)$/,ge=/queueHooks$/;dt.Animation=dt.extend(W,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return g(n.elem,t,It.exec(e),n),n}]},tweener:function(t,e){dt.isFunction(t)?(e=t,t=["*"]):t=t.match(Ct);for(var n,r=0,i=t.length;r<i;r++)n=t[r],W.tweeners[n]=W.tweeners[n]||[],W.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,i,o,a,u,s,l,c,f="width"in e||"height"in e,h=this,d={},p=t.style,g=t.nodeType&&Ht(t),v=Ot.get(t,"fxshow");n.queue||(null==(a=dt._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,h.always(function(){h.always(function(){a.unqueued--,dt.queue(t,"fx").length||a.empty.fire()})}));for(r in e)if(i=e[r],pe.test(i)){if(delete e[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}d[r]=v&&v[r]||dt.style(t,r)}if((s=!dt.isEmptyObject(e))||!dt.isEmptyObject(d)){f&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(l=v&&v.display)&&(l=Ot.get(t,"display")),"none"===(c=dt.css(t,"display"))&&(l?c=l:(m([t],!0),l=t.style.display||l,c=dt.css(t,"display"),m([t]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===dt.css(t,"float")&&(s||(h.done(function(){p.display=l}),null==l&&(c=p.display,l="none"===c?"":c)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",h.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),s=!1;for(r in d)s||(v?"hidden"in v&&(g=v.hidden):v=Ot.access(t,"fxshow",{display:l}),o&&(v.hidden=!g),g&&m([t],!0),h.done(function(){g||m([t]),Ot.remove(t,"fxshow");for(r in d)dt.style(t,r,d[r])})),s=U(g?v[r]:0,r,h),r in v||(v[r]=s.start,g&&(s.end=s.start,s.start=0))}}],prefilter:function(t,e){e?W.prefilters.unshift(t):W.prefilters.push(t)}}),dt.speed=function(t,e,n){var r=t&&"object"==typeof t?dt.extend({},t):{complete:n||!n&&e||dt.isFunction(t)&&t,duration:t,easing:n&&e||e&&!dt.isFunction(e)&&e};return dt.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in dt.fx.speeds?r.duration=dt.fx.speeds[r.duration]:r.duration=dt.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){dt.isFunction(r.old)&&r.old.call(this),r.queue&&dt.dequeue(this,r.queue)},r},dt.fn.extend({fadeTo:function(t,e,n,r){return this.filter(Ht).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=dt.isEmptyObject(t),o=dt.speed(e,n,r),a=function(){var e=W(this,dt.extend({},t),o);(i||Ot.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,i=null!=t&&t+"queueHooks",o=dt.timers,a=Ot.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ge.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||dt.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=Ot.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=dt.timers,a=r?r.length:0;for(n.finish=!0,dt.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish})}}),dt.each(["toggle","show","hide"],function(t,e){var n=dt.fn[e];dt.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(q(e,!0),t,r,i)}}),dt.each({slideDown:q("show"),slideUp:q("hide"),slideToggle:q("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){dt.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}}),dt.timers=[],dt.fx.tick=function(){var t,e=0,n=dt.timers;for(he=dt.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||dt.fx.stop(),he=void 0},dt.fx.timer=function(t){dt.timers.push(t),dt.fx.start()},dt.fx.interval=13,dt.fx.start=function(){de||(de=!0,H())},dt.fx.stop=function(){de=null},dt.fx.speeds={slow:600,fast:200,_default:400},dt.fn.delay=function(e,n){return e=dt.fx?dt.fx.speeds[e]||e:e,n=n||"fx",this.queue(n,function(n,r){var i=t.setTimeout(n,e);r.stop=function(){t.clearTimeout(i)}})},function(){var t=et.createElement("input"),e=et.createElement("select").appendChild(et.createElement("option"));t.type="checkbox",ht.checkOn=""!==t.value,ht.optSelected=e.selected,(t=et.createElement("input")).value="t",t.type="radio",ht.radioValue="t"===t.value}();var ve,me=dt.expr.attrHandle;dt.fn.extend({attr:function(t,e){return Nt(this,dt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){dt.removeAttr(this,t)})}}),dt.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?dt.prop(t,e,n):(1===o&&dt.isXMLDoc(t)||(i=dt.attrHooks[e.toLowerCase()]||(dt.expr.match.bool.test(e)?ve:void 0)),void 0!==n?null===n?void dt.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:null==(r=dt.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!ht.radioValue&&"radio"===e&&i(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(Ct);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),ve={set:function(t,e,n){return!1===e?dt.removeAttr(t,n):t.setAttribute(n,n),n}},dt.each(dt.expr.match.bool.source.match(/\w+/g),function(t,e){var n=me[e]||dt.find.attr;me[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=me[a],me[a]=i,i=null!=n(t,e,r)?a:null,me[a]=o),i}});var ye=/^(?:input|select|textarea|button)$/i,xe=/^(?:a|area)$/i;dt.fn.extend({prop:function(t,e){return Nt(this,dt.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[dt.propFix[t]||t]})}}),dt.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&dt.isXMLDoc(t)||(e=dt.propFix[e]||e,i=dt.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=dt.find.attr(t,"tabindex");return e?parseInt(e,10):ye.test(t.nodeName)||xe.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),ht.optSelected||(dt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),dt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){dt.propFix[this.toLowerCase()]=this}),dt.fn.extend({addClass:function(t){var e,n,r,i,o,a,u,s=0;if(dt.isFunction(t))return this.each(function(e){dt(this).addClass(t.call(this,e,V(this)))});if("string"==typeof t&&t)for(e=t.match(Ct)||[];n=this[s++];)if(i=V(n),r=1===n.nodeType&&" "+B(i)+" "){for(a=0;o=e[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(u=B(r))&&n.setAttribute("class",u)}return this},removeClass:function(t){var e,n,r,i,o,a,u,s=0;if(dt.isFunction(t))return this.each(function(e){dt(this).removeClass(t.call(this,e,V(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(Ct)||[];n=this[s++];)if(i=V(n),r=1===n.nodeType&&" "+B(i)+" "){for(a=0;o=e[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(u=B(r))&&n.setAttribute("class",u)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):dt.isFunction(t)?this.each(function(n){dt(this).toggleClass(t.call(this,n,V(this),e),e)}):this.each(function(){var e,r,i,o;if("string"===n)for(r=0,i=dt(this),o=t.match(Ct)||[];e=o[r++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==t&&"boolean"!==n||((e=V(this))&&Ot.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Ot.get(this,"__className__")||""))})},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+B(V(n))+" ").indexOf(e)>-1)return!0;return!1}});var be=/\r/g;dt.fn.extend({val:function(t){var e,n,r,i=this[0];{if(arguments.length)return r=dt.isFunction(t),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?t.call(this,n,dt(this).val()):t)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=dt.map(i,function(t){return null==t?"":t+""})),(e=dt.valHooks[this.type]||dt.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))});if(i)return(e=dt.valHooks[i.type]||dt.valHooks[i.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(be,""):null==n?"":n}}}),dt.extend({valHooks:{option:{get:function(t){var e=dt.find.attr(t,"value");return null!=e?e:B(dt.text(t))}},select:{get:function(t){var e,n,r,o=t.options,a=t.selectedIndex,u="select-one"===t.type,s=u?null:[],l=u?a+1:o.length;for(r=a<0?l:u?a:0;r<l;r++)if(((n=o[r]).selected||r===a)&&!n.disabled&&(!n.parentNode.disabled||!i(n.parentNode,"optgroup"))){if(e=dt(n).val(),u)return e;s.push(e)}return s},set:function(t,e){for(var n,r,i=t.options,o=dt.makeArray(e),a=i.length;a--;)((r=i[a]).selected=dt.inArray(dt.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),dt.each(["radio","checkbox"],function(){dt.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=dt.inArray(dt(t).val(),e)>-1}},ht.checkOn||(dt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var we=/^(?:focusinfocus|focusoutblur)$/;dt.extend(dt.event,{trigger:function(e,n,r,i){var o,a,u,s,l,c,f,h=[r||et],d=lt.call(e,"type")?e.type:e,p=lt.call(e,"namespace")?e.namespace.split("."):[];if(a=u=r=r||et,3!==r.nodeType&&8!==r.nodeType&&!we.test(d+dt.event.triggered)&&(d.indexOf(".")>-1&&(d=(p=d.split(".")).shift(),p.sort()),l=d.indexOf(":")<0&&"on"+d,e=e[dt.expando]?e:new dt.Event(d,"object"==typeof e&&e),e.isTrigger=i?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),n=null==n?[e]:dt.makeArray(n,[e]),f=dt.event.special[d]||{},i||!f.trigger||!1!==f.trigger.apply(r,n))){if(!i&&!f.noBubble&&!dt.isWindow(r)){for(s=f.delegateType||d,we.test(s+d)||(a=a.parentNode);a;a=a.parentNode)h.push(a),u=a;u===(r.ownerDocument||et)&&h.push(u.defaultView||u.parentWindow||t)}for(o=0;(a=h[o++])&&!e.isPropagationStopped();)e.type=o>1?s:f.bindType||d,(c=(Ot.get(a,"events")||{})[e.type]&&Ot.get(a,"handle"))&&c.apply(a,n),(c=l&&a[l])&&c.apply&&Lt(a)&&(e.result=c.apply(a,n),!1===e.result&&e.preventDefault());return e.type=d,i||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(h.pop(),n)||!Lt(r)||l&&dt.isFunction(r[d])&&!dt.isWindow(r)&&((u=r[l])&&(r[l]=null),dt.event.triggered=d,r[d](),dt.event.triggered=void 0,u&&(r[l]=u)),e.result}},simulate:function(t,e,n){var r=dt.extend(new dt.Event,n,{type:t,isSimulated:!0});dt.event.trigger(r,null,e)}}),dt.fn.extend({trigger:function(t,e){return this.each(function(){dt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return dt.event.trigger(t,e,n,!0)}}),dt.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){dt.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),dt.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),ht.focusin="onfocusin"in t,ht.focusin||dt.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){dt.event.simulate(e,t.target,dt.event.fix(t))};dt.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=Ot.access(r,e);i||r.addEventListener(t,n,!0),Ot.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Ot.access(r,e)-1;i?Ot.access(r,e,i):(r.removeEventListener(t,n,!0),Ot.remove(r,e))}}});var _e=t.location,Me=dt.now(),Ae=/\?/;dt.parseXML=function(e){var n;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||dt.error("Invalid XML: "+e),n};var ke=/\[\]$/,Se=/\r?\n/g,Te=/^(?:submit|button|image|reset|file)$/i,Ce=/^(?:input|select|textarea|keygen)/i;dt.param=function(t,e){var n,r=[],i=function(t,e){var n=dt.isFunction(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!dt.isPlainObject(t))dt.each(t,function(){i(this.name,this.value)});else for(n in t)G(n,t[n],e,i);return r.join("&")},dt.fn.extend({serialize:function(){return dt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=dt.prop(this,"elements");return t?dt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!dt(this).is(":disabled")&&Ce.test(this.nodeName)&&!Te.test(t)&&(this.checked||!Ut.test(t))}).map(function(t,e){var n=dt(this).val();return null==n?null:Array.isArray(n)?dt.map(n,function(t){return{name:e.name,value:t.replace(Se,"\r\n")}}):{name:e.name,value:n.replace(Se,"\r\n")}}).get()}});var De=/%20/g,Ee=/#.*$/,Ne=/([?&])_=[^&]*/,Le=/^(.*?):[ \t]*([^\r\n]*)$/gm,Oe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Re=/^(?:GET|HEAD)$/,je=/^\/\//,Pe={},Fe={},Ie="*/".concat("*"),Ye=et.createElement("a");Ye.href=_e.href,dt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:_e.href,type:"GET",isLocal:Oe.test(_e.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ie,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":dt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?K(K(t,dt.ajaxSettings),e):K(dt.ajaxSettings,t)},ajaxPrefilter:X(Pe),ajaxTransport:X(Fe),ajax:function(e,n){function r(e,n,r,u){var l,h,d,b,w,_=n;c||(c=!0,s&&t.clearTimeout(s),i=void 0,a=u||"",M.readyState=e>0?4:0,l=e>=200&&e<300||304===e,r&&(b=Q(p,M,r)),b=J(p,b,M,l),l?(p.ifModified&&((w=M.getResponseHeader("Last-Modified"))&&(dt.lastModified[o]=w),(w=M.getResponseHeader("etag"))&&(dt.etag[o]=w)),204===e||"HEAD"===p.type?_="nocontent":304===e?_="notmodified":(_=b.state,h=b.data,l=!(d=b.error))):(d=_,!e&&_||(_="error",e<0&&(e=0))),M.status=e,M.statusText=(n||_)+"",l?m.resolveWith(g,[h,_,M]):m.rejectWith(g,[M,_,d]),M.statusCode(x),x=void 0,f&&v.trigger(l?"ajaxSuccess":"ajaxError",[M,p,l?h:d]),y.fireWith(g,[M,_]),f&&(v.trigger("ajaxComplete",[M,p]),--dt.active||dt.event.trigger("ajaxStop")))}"object"==typeof e&&(n=e,e=void 0),n=n||{};var i,o,a,u,s,l,c,f,h,d,p=dt.ajaxSetup({},n),g=p.context||p,v=p.context&&(g.nodeType||g.jquery)?dt(g):dt.event,m=dt.Deferred(),y=dt.Callbacks("once memory"),x=p.statusCode||{},b={},w={},_="canceled",M={readyState:0,getResponseHeader:function(t){var e;if(c){if(!u)for(u={};e=Le.exec(a);)u[e[1].toLowerCase()]=e[2];e=u[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(t,e){return null==c&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,b[t]=e),this},overrideMimeType:function(t){return null==c&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)M.always(t[M.status]);else for(e in t)x[e]=[x[e],t[e]];return this},abort:function(t){var e=t||_;return i&&i.abort(e),r(0,e),this}};if(m.promise(M),p.url=((e||p.url||_e.href)+"").replace(je,_e.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(Ct)||[""],null==p.crossDomain){l=et.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=Ye.protocol+"//"+Ye.host!=l.protocol+"//"+l.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=dt.param(p.data,p.traditional)),Z(Pe,p,n,M),c)return M;(f=dt.event&&p.global)&&0==dt.active++&&dt.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Re.test(p.type),o=p.url.replace(Ee,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(De,"+")):(d=p.url.slice(o.length),p.data&&(o+=(Ae.test(o)?"&":"?")+p.data,delete p.data),!1===p.cache&&(o=o.replace(Ne,"$1"),d=(Ae.test(o)?"&":"?")+"_="+Me+++d),p.url=o+d),p.ifModified&&(dt.lastModified[o]&&M.setRequestHeader("If-Modified-Since",dt.lastModified[o]),dt.etag[o]&&M.setRequestHeader("If-None-Match",dt.etag[o])),(p.data&&p.hasContent&&!1!==p.contentType||n.contentType)&&M.setRequestHeader("Content-Type",p.contentType),M.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Ie+"; q=0.01":""):p.accepts["*"]);for(h in p.headers)M.setRequestHeader(h,p.headers[h]);if(p.beforeSend&&(!1===p.beforeSend.call(g,M,p)||c))return M.abort();if(_="abort",y.add(p.complete),M.done(p.success),M.fail(p.error),i=Z(Fe,p,n,M)){if(M.readyState=1,f&&v.trigger("ajaxSend",[M,p]),c)return M;p.async&&p.timeout>0&&(s=t.setTimeout(function(){M.abort("timeout")},p.timeout));try{c=!1,i.send(b,r)}catch(t){if(c)throw t;r(-1,t)}}else r(-1,"No Transport");return M},getJSON:function(t,e,n){return dt.get(t,e,n,"json")},getScript:function(t,e){return dt.get(t,void 0,e,"script")}}),dt.each(["get","post"],function(t,e){dt[e]=function(t,n,r,i){return dt.isFunction(n)&&(i=i||r,r=n,n=void 0),dt.ajax(dt.extend({url:t,type:e,dataType:i,data:n,success:r},dt.isPlainObject(t)&&t))}}),dt._evalUrl=function(t){return dt.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},dt.fn.extend({wrapAll:function(t){var e;return this[0]&&(dt.isFunction(t)&&(t=t.call(this[0])),e=dt(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return dt.isFunction(t)?this.each(function(e){dt(this).wrapInner(t.call(this,e))}):this.each(function(){var e=dt(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=dt.isFunction(t);return this.each(function(n){dt(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){dt(this).replaceWith(this.childNodes)}),this}}),dt.expr.pseudos.hidden=function(t){return!dt.expr.pseudos.visible(t)},dt.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},dt.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var He={0:200,1223:204},$e=dt.ajaxSettings.xhr();ht.cors=!!$e&&"withCredentials"in $e,ht.ajax=$e=!!$e,dt.ajaxTransport(function(e){var n,r;if(ht.cors||$e&&!e.crossDomain)return{send:function(i,o){var a,u=e.xhr();if(u.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)u[a]=e.xhrFields[a];e.mimeType&&u.overrideMimeType&&u.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)u.setRequestHeader(a,i[a]);n=function(t){return function(){n&&(n=r=u.onload=u.onerror=u.onabort=u.onreadystatechange=null,"abort"===t?u.abort():"error"===t?"number"!=typeof u.status?o(0,"error"):o(u.status,u.statusText):o(He[u.status]||u.status,u.statusText,"text"!==(u.responseType||"text")||"string"!=typeof u.responseText?{binary:u.response}:{text:u.responseText},u.getAllResponseHeaders()))}},u.onload=n(),r=u.onerror=n("error"),void 0!==u.onabort?u.onabort=r:u.onreadystatechange=function(){4===u.readyState&&t.setTimeout(function(){n&&r()})},n=n("abort");try{u.send(e.hasContent&&e.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}}),dt.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),dt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return dt.globalEval(t),t}}}),dt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),dt.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(r,i){e=dt("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),et.head.appendChild(e[0])},abort:function(){n&&n()}}}});var qe=[],Ue=/(=)\?(?=&|$)|\?\?/;dt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=qe.pop()||dt.expando+"_"+Me++;return this[t]=!0,t}}),dt.ajaxPrefilter("json jsonp",function(e,n,r){var i,o,a,u=!1!==e.jsonp&&(Ue.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ue.test(e.data)&&"data");if(u||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=dt.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,u?e[u]=e[u].replace(Ue,"$1"+i):!1!==e.jsonp&&(e.url+=(Ae.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||dt.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=t[i],t[i]=function(){a=arguments},r.always(function(){void 0===o?dt(t).removeProp(i):t[i]=o,e[i]&&(e.jsonpCallback=n.jsonpCallback,qe.push(i)),a&&dt.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),ht.createHTMLDocument=function(){var t=et.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),dt.parseHTML=function(t,e,n){if("string"!=typeof t)return[];"boolean"==typeof e&&(n=e,e=!1);var r,i,o;return e||(ht.createHTMLDocument?((r=(e=et.implementation.createHTMLDocument("")).createElement("base")).href=et.location.href,e.head.appendChild(r)):e=et),i=_t.exec(t),o=!n&&[],i?[e.createElement(i[1])]:(i=b([t],e,o),o&&o.length&&dt(o).remove(),dt.merge([],i.childNodes))},dt.fn.load=function(t,e,n){var r,i,o,a=this,u=t.indexOf(" ");return u>-1&&(r=B(t.slice(u)),t=t.slice(0,u)),dt.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&dt.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done(function(t){o=arguments,a.html(r?dt("<div>").append(dt.parseHTML(t)).find(r):t)}).always(n&&function(t,e){a.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},dt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){dt.fn[e]=function(t){return this.on(e,t)}}),dt.expr.pseudos.animated=function(t){return dt.grep(dt.timers,function(e){return t===e.elem}).length},dt.offset={setOffset:function(t,e,n){var r,i,o,a,u,s,l=dt.css(t,"position"),c=dt(t),f={};"static"===l&&(t.style.position="relative"),u=c.offset(),o=dt.css(t,"top"),s=dt.css(t,"left"),("absolute"===l||"fixed"===l)&&(o+s).indexOf("auto")>-1?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(s)||0),dt.isFunction(e)&&(e=e.call(t,n,dt.extend({},u))),null!=e.top&&(f.top=e.top-u.top+a),null!=e.left&&(f.left=e.left-u.left+i),"using"in e?e.using.call(t,f):c.css(f)}},dt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){dt.offset.setOffset(this,t,e)});var e,n,r,i,o=this[0];if(o)return o.getClientRects().length?(r=o.getBoundingClientRect(),e=o.ownerDocument,n=e.documentElement,i=e.defaultView,{top:r.top+i.pageYOffset-n.clientTop,left:r.left+i.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var t,e,n=this[0],r={top:0,left:0};return"fixed"===dt.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),i(t[0],"html")||(r=t.offset()),r={top:r.top+dt.css(t[0],"borderTopWidth",!0),left:r.left+dt.css(t[0],"borderLeftWidth",!0)}),{top:e.top-r.top-dt.css(n,"marginTop",!0),left:e.left-r.left-dt.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===dt.css(t,"position");)t=t.offsetParent;return t||Gt})}}),dt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;dt.fn[t]=function(r){return Nt(this,function(t,r,i){var o;if(dt.isWindow(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[e]:t[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i},t,r,arguments.length)}}),dt.each(["top","left"],function(t,e){dt.cssHooks[e]=O(ht.pixelPosition,function(t,n){if(n)return n=L(t,e),ie.test(n)?dt(t).position()[e]+"px":n})}),dt.each({Height:"height",Width:"width"},function(t,e){dt.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,r){dt.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),u=n||(!0===i||!0===o?"margin":"border");return Nt(this,function(e,n,i){var o;return dt.isWindow(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?dt.css(e,n,u):dt.style(e,n,i,u)},e,a?i:void 0,a)}})}),dt.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),dt.holdReady=function(t){t?dt.readyWait++:dt.ready(!0)},dt.isArray=Array.isArray,dt.parseJSON=JSON.parse,dt.nodeName=i,"function"==typeof define&&define.amd&&define("jquery",[],function(){return dt});var ze=t.jQuery,We=t.$;return dt.noConflict=function(e){return t.$===dt&&(t.$=We),e&&t.jQuery===dt&&(t.jQuery=ze),dt},e||(t.jQuery=t.$=dt),dt}),function(t){"use strict";var e=function(t,n){var r=/[^\w\-.:]/.test(t)?new Function(e.arg+",tmpl","var _e=tmpl.encode"+e.helper+",_s='"+t.replace(e.regexp,e.func)+"';return _s;"):e.cache[t]=e.cache[t]||e(e.load(t));return n?r(n,e):function(t){return r(t,e)}};e.cache={},e.load=function(t){return document.getElementById(t).innerHTML},e.regexp=/([\s'\\])(?!(?:[^{]|\{(?!%))*%\})|(?:\{%(=|#)([\s\S]+?)%\})|(\{%)|(%\})/g,e.func=function(t,e,n,r,i,o){return e?{"\n":"\\n","\r":"\\r","\t":"\\t"," ":" "}[e]||"\\"+e:n?"="===n?"'+_e("+r+")+'":"'+("+r+"==null?'':"+r+")+'":i?"';":o?"_s+='":void 0},e.encReg=/[<>&"'\x00]/g,e.encMap={"<":"&lt;",">":"&gt;","&":"&amp;",'"':"&quot;","'":"&#39;"},e.encode=function(t){return(null==t?"":""+t).replace(e.encReg,function(t){return e.encMap[t]||""})},e.arg="o",e.helper=",print=function(s,e){_s+=e?(s==null?'':s):_e(s);},include=function(s,d){_s+=tmpl(s,d);}","function"==typeof define&&define.amd?define(function(){return e}):"object"==typeof module&&module.exports?module.exports=e:t.tmpl=e}(this),function(){function t(t){return t&&(t.ownerDocument||t.document||t).documentElement}function e(t){return t&&(t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView)}function n(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function r(t){return null===t?NaN:+t}function i(t){return!isNaN(t)}function o(t){return{left:function(e,n,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}}function a(t){return t.length}function u(t){for(var e=1;t*e%1;)e*=10;return e}function s(t,e){for(var n in e)Object.defineProperty(t.prototype,n,{value:e[n],enumerable:!1})}function l(){this._=Object.create(null)}function c(t){return(t+="")===Jo||t[0]===ta?ta+t:t}function f(t){return(t+="")[0]===ta?t.slice(1):t}function h(t){return c(t)in this._}function d(t){return(t=c(t))in this._&&delete this._[t]}function p(){var t=[];for(var e in this._)t.push(f(e));return t}function g(){var t=0;for(var e in this._)++t;return t}function v(){for(var t in this._)return!1;return!0}function m(){this._=Object.create(null)}function y(t){return t}function x(t,e,n){return function(){var r=n.apply(e,arguments);return r===e?t:r}}function b(t,e){if(e in t)return e;e=e.charAt(0).toUpperCase()+e.slice(1);for(var n=0,r=ea.length;n<r;++n){var i=ea[n]+e;if(i in t)return i}}function w(){}function _(){}function M(t){function e(){for(var e,r=n,i=-1,o=r.length;++i<o;)(e=r[i].on)&&e.apply(this,arguments);return t}var n=[],r=new l;return e.on=function(e,i){var o,a=r.get(e);return arguments.length<2?a&&a.on:(a&&(a.on=null,n=n.slice(0,o=n.indexOf(a)).concat(n.slice(o+1)),r.remove(e)),i&&n.push(r.set(e,{on:i})),t)},e}function A(){qo.event.preventDefault()}function k(){for(var t,e=qo.event;t=e.sourceEvent;)e=t;return e}function S(t){for(var e=new _,n=0,r=arguments.length;++n<r;)e[arguments[n]]=M(e);return e.of=function(n,r){return function(i){try{var o=i.sourceEvent=qo.event;i.target=t,qo.event=i,e[i.type].apply(n,r)}finally{qo.event=o}}},e}function T(t){return ra(t,ua),t}function C(t){return"function"==typeof t?t:function(){return ia(t,this)}}function D(t){return"function"==typeof t?t:function(){return oa(t,this)}}function E(t,e){return t=qo.ns.qualify(t),null==e?t.local?function(){this.removeAttributeNS(t.space,t.local)}:function(){this.removeAttribute(t)}:"function"==typeof e?t.local?function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}:function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}:t.local?function(){this.setAttributeNS(t.space,t.local,e)}:function(){this.setAttribute(t,e)}}function N(t){return t.trim().replace(/\s+/g," ")}function L(t){return new RegExp("(?:^|\\s+)"+qo.requote(t)+"(?:\\s+|$)","g")}function O(t){return(t+"").trim().split(/^|\s+/)}function R(t,e){var n=(t=O(t).map(j)).length;return"function"==typeof e?function(){for(var r=-1,i=e.apply(this,arguments);++r<n;)t[r](this,i)}:function(){for(var r=-1;++r<n;)t[r](this,e)}}function j(t){var e=L(t);return function(n,r){if(i=n.classList)return r?i.add(t):i.remove(t);var i=n.getAttribute("class")||"";r?(e.lastIndex=0,e.test(i)||n.setAttribute("class",N(i+" "+t))):n.setAttribute("class",N(i.replace(e," ")))}}function P(t,e,n){return null==e?function(){this.style.removeProperty(t)}:"function"==typeof e?function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}:function(){this.style.setProperty(t,e,n)}}function F(t,e){return null==e?function(){delete this[t]}:"function"==typeof e?function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}:function(){this[t]=e}}function I(t){return"function"==typeof t?t:(t=qo.ns.qualify(t)).local?function(){return this.ownerDocument.createElementNS(t.space,t.local)}:function(){var e=this.ownerDocument,n=this.namespaceURI;return n===sa&&e.documentElement.namespaceURI===sa?e.createElement(t):e.createElementNS(n,t)}}function Y(){var t=this.parentNode;t&&t.removeChild(this)}function H(t){return{__data__:t}}function $(t){return function(){return aa(this,t)}}function q(t){return arguments.length||(t=n),function(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}}function U(t,e){for(var n=0,r=t.length;n<r;n++)for(var i,o=t[n],a=0,u=o.length;a<u;a++)(i=o[a])&&e(i,a,n);return t}function z(t){return ra(t,ca),t}function W(t){var e,n;return function(r,i,o){var a,u=t[o].update,s=u.length;for(o!=n&&(n=o,e=0),i>=e&&(e=i+1);!(a=u[e])&&++e<s;);return a}}function B(t,e,n){function r(){var e=this[i];e&&(this.removeEventListener(t,e,e.$),delete this[i])}var i="__on"+t,o=t.indexOf("."),a=V;o>0&&(t=t.slice(0,o));var u=fa.get(t);return u&&(t=u,a=G),o?e?function(){var o=a(e,zo(arguments));r.call(this),this.addEventListener(t,this[i]=o,o.$=n),o._=e}:r:e?w:function(){var e,n=new RegExp("^__on([^.]+)"+qo.requote(t)+"$");for(var r in this)if(e=r.match(n)){var i=this[r];this.removeEventListener(e[1],i,i.$),delete this[r]}}}function V(t,e){return function(n){var r=qo.event;qo.event=n,e[0]=this.__data__;try{t.apply(this,e)}finally{qo.event=r}}}function G(t,e){var n=V(t,e);return function(t){var e=this,r=t.relatedTarget;r&&(r===e||8&r.compareDocumentPosition(e))||n.call(e,t)}}function X(n){var r=".dragsuppress-"+ ++da,i="click"+r,o=qo.select(e(n)).on("touchmove"+r,A).on("dragstart"+r,A).on("selectstart"+r,A);if(null==ha&&(ha=!("onselectstart"in n)&&b(n.style,"userSelect")),ha){var a=t(n).style,u=a[ha];a[ha]="none"}return function(t){if(o.on(r,null),ha&&(a[ha]=u),t){var e=function(){o.on(i,null)};o.on(i,function(){A(),e()},!0),setTimeout(e,0)}}}function Z(t,n){n.changedTouches&&(n=n.changedTouches[0]);var r=t.ownerSVGElement||t;if(r.createSVGPoint){var i=r.createSVGPoint();if(pa<0){var o=e(t);if(o.scrollX||o.scrollY){var a=(r=qo.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important"))[0][0].getScreenCTM();pa=!(a.f||a.e),r.remove()}}return pa?(i.x=n.pageX,i.y=n.pageY):(i.x=n.clientX,i.y=n.clientY),i=i.matrixTransform(t.getScreenCTM().inverse()),[i.x,i.y]}var u=t.getBoundingClientRect();return[n.clientX-u.left-t.clientLeft,n.clientY-u.top-t.clientTop]}function K(){return qo.event.changedTouches[0].identifier}function Q(t){return t>0?1:t<0?-1:0}function J(t,e,n){return(e[0]-t[0])*(n[1]-t[1])-(e[1]-t[1])*(n[0]-t[0])}function tt(t){return t>1?0:t<-1?ma:Math.acos(t)}function et(t){return t>1?ba:t<-1?-ba:Math.asin(t)}function nt(t){return((t=Math.exp(t))-1/t)/2}function rt(t){return((t=Math.exp(t))+1/t)/2}function it(t){return((t=Math.exp(2*t))-1)/(t+1)}function ot(t){return(t=Math.sin(t/2))*t}function at(){}function ut(t,e,n){return this instanceof ut?(this.h=+t,this.s=+e,void(this.l=+n)):arguments.length<2?t instanceof ut?new ut(t.h,t.s,t.l):wt(""+t,_t,ut):new ut(t,e,n)}function st(t,e,n){function r(t){return t>360?t-=360:t<0&&(t+=360),t<60?o+(a-o)*t/60:t<180?a:t<240?o+(a-o)*(240-t)/60:o}function i(t){return Math.round(255*r(t))}var o,a;return t=isNaN(t)?0:(t%=360)<0?t+360:t,e=isNaN(e)?0:e<0?0:e>1?1:e,n=n<0?0:n>1?1:n,a=n<=.5?n*(1+e):n+e-n*e,o=2*n-a,new mt(i(t+120),i(t),i(t-120))}function lt(t,e,n){return this instanceof lt?(this.h=+t,this.c=+e,void(this.l=+n)):arguments.length<2?t instanceof lt?new lt(t.h,t.c,t.l):t instanceof ft?dt(t.l,t.a,t.b):dt((t=Mt((t=qo.rgb(t)).r,t.g,t.b)).l,t.a,t.b):new lt(t,e,n)}function ct(t,e,n){return isNaN(t)&&(t=0),isNaN(e)&&(e=0),new ft(n,Math.cos(t*=wa)*e,Math.sin(t)*e)}function ft(t,e,n){return this instanceof ft?(this.l=+t,this.a=+e,void(this.b=+n)):arguments.length<2?t instanceof ft?new ft(t.l,t.a,t.b):t instanceof lt?ct(t.h,t.c,t.l):Mt((t=mt(t)).r,t.g,t.b):new ft(t,e,n)}function ht(t,e,n){var r=(t+16)/116,i=r+e/500,o=r-n/200;return i=pt(i)*Ea,r=pt(r)*Na,o=pt(o)*La,new mt(vt(3.2404542*i-1.5371385*r-.4985314*o),vt(-.969266*i+1.8760108*r+.041556*o),vt(.0556434*i-.2040259*r+1.0572252*o))}function dt(t,e,n){return t>0?new lt(Math.atan2(n,e)*_a,Math.sqrt(e*e+n*n),t):new lt(NaN,NaN,t)}function pt(t){return t>.206893034?t*t*t:(t-4/29)/7.787037}function gt(t){return t>.008856?Math.pow(t,1/3):7.787037*t+4/29}function vt(t){return Math.round(255*(t<=.00304?12.92*t:1.055*Math.pow(t,1/2.4)-.055))}function mt(t,e,n){return this instanceof mt?(this.r=~~t,this.g=~~e,void(this.b=~~n)):arguments.length<2?t instanceof mt?new mt(t.r,t.g,t.b):wt(""+t,mt,st):new mt(t,e,n)}function yt(t){return new mt(t>>16,t>>8&255,255&t)}function xt(t){return yt(t)+""}function bt(t){return t<16?"0"+Math.max(0,t).toString(16):Math.min(255,t).toString(16)}function wt(t,e,n){var r,i,o,a=0,u=0,s=0;if(r=/([a-z]+)\((.*)\)/.exec(t=t.toLowerCase()))switch(i=r[2].split(","),r[1]){case"hsl":return n(parseFloat(i[0]),parseFloat(i[1])/100,parseFloat(i[2])/100);case"rgb":return e(kt(i[0]),kt(i[1]),kt(i[2]))}return(o=ja.get(t))?e(o.r,o.g,o.b):(null==t||"#"!==t.charAt(0)||isNaN(o=parseInt(t.slice(1),16))||(4===t.length?(a=(3840&o)>>4,a|=a>>4,u=240&o,u|=u>>4,s=15&o,s|=s<<4):7===t.length&&(a=(16711680&o)>>16,u=(65280&o)>>8,s=255&o)),e(a,u,s))}function _t(t,e,n){var r,i,o=Math.min(t/=255,e/=255,n/=255),a=Math.max(t,e,n),u=a-o,s=(a+o)/2;return u?(i=s<.5?u/(a+o):u/(2-a-o),r=t==a?(e-n)/u+(e<n?6:0):e==a?(n-t)/u+2:(t-e)/u+4,r*=60):(r=NaN,i=s>0&&s<1?0:r),new ut(r,i,s)}function Mt(t,e,n){var r=gt((.4124564*(t=At(t))+.3575761*(e=At(e))+.1804375*(n=At(n)))/Ea),i=gt((.2126729*t+.7151522*e+.072175*n)/Na);return ft(116*i-16,500*(r-i),200*(i-gt((.0193339*t+.119192*e+.9503041*n)/La)))}function At(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function kt(t){var e=parseFloat(t);return"%"===t.charAt(t.length-1)?Math.round(2.55*e):e}function St(t){return"function"==typeof t?t:function(){return t}}function Tt(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=null),Ct(e,n,t,r)}}function Ct(t,e,n,r){function i(){var t,e=s.status;if(!e&&Et(s)||e>=200&&e<300||304===e){try{t=n.call(o,s)}catch(t){return void a.error.call(o,t)}a.load.call(o,t)}else a.error.call(o,s)}var o={},a=qo.dispatch("beforesend","progress","load","error"),u={},s=new XMLHttpRequest,l=null;return!this.XDomainRequest||"withCredentials"in s||!/^(http(s)?:)?\/\//.test(t)||(s=new XDomainRequest),"onload"in s?s.onload=s.onerror=i:s.onreadystatechange=function(){s.readyState>3&&i()},s.onprogress=function(t){var e=qo.event;qo.event=t;try{a.progress.call(o,s)}finally{qo.event=e}},o.header=function(t,e){return t=(t+"").toLowerCase(),arguments.length<2?u[t]:(null==e?delete u[t]:u[t]=e+"",o)},o.mimeType=function(t){return arguments.length?(e=null==t?null:t+"",o):e},o.responseType=function(t){return arguments.length?(l=t,o):l},o.response=function(t){return n=t,o},["get","post"].forEach(function(t){o[t]=function(){return o.send.apply(o,[t].concat(zo(arguments)))}}),o.send=function(n,r,i){if(2===arguments.length&&"function"==typeof r&&(i=r,r=null),s.open(n,t,!0),null==e||"accept"in u||(u.accept=e+",*/*"),s.setRequestHeader)for(var c in u)s.setRequestHeader(c,u[c]);return null!=e&&s.overrideMimeType&&s.overrideMimeType(e),null!=l&&(s.responseType=l),null!=i&&o.on("error",i).on("load",function(t){i(null,t)}),a.beforesend.call(o,s),s.send(null==r?null:r),o},o.abort=function(){return s.abort(),o},qo.rebind(o,a,"on"),null==r?o:o.get(Dt(r))}function Dt(t){return 1===t.length?function(e,n){t(null==e?n:null)}:t}function Et(t){var e=t.responseType;return e&&"text"!==e?t.response:t.responseText}function Nt(t,e,n){var r=arguments.length;r<2&&(e=0),r<3&&(n=Date.now());var i={c:t,t:n+e,n:null};return Fa?Fa.n=i:Pa=i,Fa=i,Ia||(Ya=clearTimeout(Ya),Ia=1,Ha(Lt)),i}function Lt(){var t=Ot(),e=Rt()-t;e>24?(isFinite(e)&&(clearTimeout(Ya),Ya=setTimeout(Lt,e)),Ia=0):(Ia=1,Ha(Lt))}function Ot(){for(var t=Date.now(),e=Pa;e;)t>=e.t&&e.c(t-e.t)&&(e.c=null),e=e.n;return t}function Rt(){for(var t,e=Pa,n=1/0;e;)e.c?(e.t<n&&(n=e.t),e=(t=e).n):e=t?t.n=e.n:Pa=e.n;return Fa=t,n}function jt(t,e){return e-(t?Math.ceil(Math.log(t)/Math.LN10):1)}function Pt(t){var e=t.decimal,n=t.thousands,r=t.grouping,i=t.currency,o=r&&n?function(t,e){for(var i=t.length,o=[],a=0,u=r[0],s=0;i>0&&u>0&&(s+u+1>e&&(u=Math.max(1,e-s)),o.push(t.substring(i-=u,i+u)),!((s+=u+1)>e));)u=r[a=(a+1)%r.length];return o.reverse().join(n)}:y;return function(t){var n=qa.exec(t),r=n[1]||" ",a=n[2]||">",u=n[3]||"-",s=n[4]||"",l=n[5],c=+n[6],f=n[7],h=n[8],d=n[9],p=1,g="",v="",m=!1,y=!0;switch(h&&(h=+h.substring(1)),(l||"0"===r&&"="===a)&&(l=r="0",a="="),d){case"n":f=!0,d="g";break;case"%":p=100,v="%",d="f";break;case"p":p=100,v="%",d="r";break;case"b":case"o":case"x":case"X":"#"===s&&(g="0"+d.toLowerCase());case"c":y=!1;case"d":m=!0,h=0;break;case"s":p=-1,d="r"}"$"===s&&(g=i[0],v=i[1]),"r"!=d||h||(d="g"),null!=h&&("g"==d?h=Math.max(1,Math.min(21,h)):"e"!=d&&"f"!=d||(h=Math.max(0,Math.min(20,h)))),d=Ua.get(d)||Ft;var x=l&&f;return function(t){var n=v;if(m&&t%1)return"";var i=t<0||0===t&&1/t<0?(t=-t,"-"):"-"===u?"":u;if(p<0){var s=qo.formatPrefix(t,h);t=s.scale(t),n=s.symbol+v}else t*=p;var b,w,_=(t=d(t,h)).lastIndexOf(".");if(_<0){var M=y?t.lastIndexOf("e"):-1;M<0?(b=t,w=""):(b=t.substring(0,M),w=t.substring(M))}else b=t.substring(0,_),w=e+t.substring(_+1);!l&&f&&(b=o(b,1/0));var A=g.length+b.length+w.length+(x?0:i.length),k=A<c?new Array(A=c-A+1).join(r):"";return x&&(b=o(k+b,k.length?c-w.length:1/0)),i+=g,t=b+w,("<"===a?i+t+k:">"===a?k+i+t:"^"===a?k.substring(0,A>>=1)+i+t+k.substring(A):i+(x?t:k+t))+n}}}function Ft(t){return t+""}function It(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}function Yt(t,e,n){function r(e){var n=t(e),r=o(n,1);return e-n<r-e?n:r}function i(n){return e(n=t(new Wa(n-1)),1),n}function o(t,n){return e(t=new Wa(+t),n),t}function a(t,r,o){var a=i(t),u=[];if(o>1)for(;a<r;)n(a)%o||u.push(new Date(+a)),e(a,1);else for(;a<r;)u.push(new Date(+a)),e(a,1);return u}t.floor=t,t.round=r,t.ceil=i,t.offset=o,t.range=a;var u=t.utc=Ht(t);return u.floor=u,u.round=Ht(r),u.ceil=Ht(i),u.offset=Ht(o),u.range=function(t,e,n){try{Wa=It;var r=new It;return r._=t,a(r,e,n)}finally{Wa=Date}},t}function Ht(t){return function(e,n){try{Wa=It;var r=new It;return r._=e,t(r,n)._}finally{Wa=Date}}}function $t(t){function e(t){function e(e){for(var n,i,o,a=[],u=-1,s=0;++u<r;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(i=Va[n=t.charAt(++u)])&&(n=t.charAt(++u)),(o=b[n])&&(n=o(e,null==i?"e"===n?" ":"0":i)),a.push(n),s=u+1);return a.push(t.slice(s,u)),a.join("")}var r=t.length;return e.parse=function(e){var r={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null};if(n(r,t,e,0)!=e.length)return null;"p"in r&&(r.H=r.H%12+12*r.p);var i=null!=r.Z&&Wa!==It,o=new(i?It:Wa);return"j"in r?o.setFullYear(r.y,0,r.j):"W"in r||"U"in r?("w"in r||(r.w="W"in r?1:0),o.setFullYear(r.y,0,1),o.setFullYear(r.y,0,"W"in r?(r.w+6)%7+7*r.W-(o.getDay()+5)%7:r.w+7*r.U-(o.getDay()+6)%7)):o.setFullYear(r.y,r.m,r.d),o.setHours(r.H+(r.Z/100|0),r.M+r.Z%100,r.S,r.L),i?o._:o},e.toString=function(){return t},e}function n(t,e,n,r){for(var i,o,a,u=0,s=e.length,l=n.length;u<s;){if(r>=l)return-1;if(37===(i=e.charCodeAt(u++))){if(a=e.charAt(u++),!(o=w[a in Va?e.charAt(u++):a])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}var r=t.dateTime,i=t.date,o=t.time,a=t.periods,u=t.days,s=t.shortDays,l=t.months,c=t.shortMonths;e.utc=function(t){function n(t){try{var e=new(Wa=It);return e._=t,r(e)}finally{Wa=Date}}var r=e(t);return n.parse=function(t){try{Wa=It;var e=r.parse(t);return e&&e._}finally{Wa=Date}},n.toString=r.toString,n},e.multi=e.utc.multi=ue;var f=qo.map(),h=Ut(u),d=zt(u),p=Ut(s),g=zt(s),v=Ut(l),m=zt(l),y=Ut(c),x=zt(c);a.forEach(function(t,e){f.set(t.toLowerCase(),e)});var b={a:function(t){return s[t.getDay()]},A:function(t){return u[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return l[t.getMonth()]},c:e(r),d:function(t,e){return qt(t.getDate(),e,2)},e:function(t,e){return qt(t.getDate(),e,2)},H:function(t,e){return qt(t.getHours(),e,2)},I:function(t,e){return qt(t.getHours()%12||12,e,2)},j:function(t,e){return qt(1+za.dayOfYear(t),e,3)},L:function(t,e){return qt(t.getMilliseconds(),e,3)},m:function(t,e){return qt(t.getMonth()+1,e,2)},M:function(t,e){return qt(t.getMinutes(),e,2)},p:function(t){return a[+(t.getHours()>=12)]},S:function(t,e){return qt(t.getSeconds(),e,2)},U:function(t,e){return qt(za.sundayOfYear(t),e,2)},w:function(t){return t.getDay()},W:function(t,e){return qt(za.mondayOfYear(t),e,2)},x:e(i),X:e(o),y:function(t,e){return qt(t.getFullYear()%100,e,2)},Y:function(t,e){return qt(t.getFullYear()%1e4,e,4)},Z:oe,"%":function(){return"%"}},w={a:function(t,e,n){p.lastIndex=0;var r=p.exec(e.slice(n));return r?(t.w=g.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(t,e,n){h.lastIndex=0;var r=h.exec(e.slice(n));return r?(t.w=d.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(t,e,n){y.lastIndex=0;var r=y.exec(e.slice(n));return r?(t.m=x.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(t,e,n){v.lastIndex=0;var r=v.exec(e.slice(n));return r?(t.m=m.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(t,e,r){return n(t,b.c.toString(),e,r)},d:Jt,e:Jt,H:ee,I:ee,j:te,L:ie,m:Qt,M:ne,p:function(t,e,n){var r=f.get(e.slice(n,n+=2).toLowerCase());return null==r?-1:(t.p=r,n)},S:re,U:Bt,w:Wt,W:Vt,x:function(t,e,r){return n(t,b.x.toString(),e,r)},X:function(t,e,r){return n(t,b.X.toString(),e,r)},y:Xt,Y:Gt,Z:Zt,"%":ae};return e}function qt(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function Ut(t){return new RegExp("^(?:"+t.map(qo.requote).join("|")+")","i")}function zt(t){for(var e=new l,n=-1,r=t.length;++n<r;)e.set(t[n].toLowerCase(),n);return e}function Wt(t,e,n){Ga.lastIndex=0;var r=Ga.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Bt(t,e,n){Ga.lastIndex=0;var r=Ga.exec(e.slice(n));return r?(t.U=+r[0],n+r[0].length):-1}function Vt(t,e,n){Ga.lastIndex=0;var r=Ga.exec(e.slice(n));return r?(t.W=+r[0],n+r[0].length):-1}function Gt(t,e,n){Ga.lastIndex=0;var r=Ga.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function Xt(t,e,n){Ga.lastIndex=0;var r=Ga.exec(e.slice(n,n+2));return r?(t.y=Kt(+r[0]),n+r[0].length):-1}function Zt(t,e,n){return/^[+-]\d{4}$/.test(e=e.slice(n,n+5))?(t.Z=-e,n+5):-1}function Kt(t){return t+(t>68?1900:2e3)}function Qt(t,e,n){Ga.lastIndex=0;var r=Ga.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function Jt(t,e,n){Ga.lastIndex=0;var r=Ga.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function te(t,e,n){Ga.lastIndex=0;var r=Ga.exec(e.slice(n,n+3));return r?(t.j=+r[0],n+r[0].length):-1}function ee(t,e,n){Ga.lastIndex=0;var r=Ga.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function ne(t,e,n){Ga.lastIndex=0;var r=Ga.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function re(t,e,n){Ga.lastIndex=0;var r=Ga.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function ie(t,e,n){Ga.lastIndex=0;var r=Ga.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function oe(t){var e=t.getTimezoneOffset(),n=e>0?"-":"+",r=Qo(e)/60|0,i=Qo(e)%60;return n+qt(r,"0",2)+qt(i,"0",2)}function ae(t,e,n){Xa.lastIndex=0;var r=Xa.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function ue(t){for(var e=t.length,n=-1;++n<e;)t[n][0]=this(t[n][0]);return function(e){for(var n=0,r=t[n];!r[1](e);)r=t[++n];return r[0](e)}}function se(){}function le(t,e,n){var r=n.s=t+e,i=r-t,o=r-i;n.t=t-o+(e-i)}function ce(t,e){t&&Ja.hasOwnProperty(t.type)&&Ja[t.type](t,e)}function fe(t,e,n){var r,i=-1,o=t.length-n;for(e.lineStart();++i<o;)r=t[i],e.point(r[0],r[1],r[2]);e.lineEnd()}function he(t,e){var n=-1,r=t.length;for(e.polygonStart();++n<r;)fe(t[n],e,1);e.polygonEnd()}function de(){function t(t,e){e=e*wa/2+ma/4;var n=(t*=wa)-r,a=n>=0?1:-1,u=a*n,s=Math.cos(e),l=Math.sin(e),c=o*l,f=i*s+c*Math.cos(u),h=c*a*Math.sin(u);eu.add(Math.atan2(h,f)),r=t,i=s,o=l}var e,n,r,i,o;nu.point=function(a,u){nu.point=t,r=(e=a)*wa,i=Math.cos(u=(n=u)*wa/2+ma/4),o=Math.sin(u)},nu.lineEnd=function(){t(e,n)}}function pe(t){var e=t[0],n=t[1],r=Math.cos(n);return[r*Math.cos(e),r*Math.sin(e),Math.sin(n)]}function ge(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function ve(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function me(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function ye(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function xe(t){var e=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}function be(t){return[Math.atan2(t[1],t[0]),et(t[2])]}function we(t,e){return Qo(t[0]-e[0])<ga&&Qo(t[1]-e[1])<ga}function _e(t,e){t*=wa;var n=Math.cos(e*=wa);Me(n*Math.cos(t),n*Math.sin(t),Math.sin(e))}function Me(t,e,n){ou+=(t-ou)/++ru,au+=(e-au)/ru,uu+=(n-uu)/ru}function Ae(){function t(t,i){t*=wa;var o=Math.cos(i*=wa),a=o*Math.cos(t),u=o*Math.sin(t),s=Math.sin(i),l=Math.atan2(Math.sqrt((l=n*s-r*u)*l+(l=r*a-e*s)*l+(l=e*u-n*a)*l),e*a+n*u+r*s);iu+=l,su+=l*(e+(e=a)),lu+=l*(n+(n=u)),cu+=l*(r+(r=s)),Me(e,n,r)}var e,n,r;pu.point=function(i,o){i*=wa;var a=Math.cos(o*=wa);e=a*Math.cos(i),n=a*Math.sin(i),r=Math.sin(o),pu.point=t,Me(e,n,r)}}function ke(){pu.point=_e}function Se(){function t(t,e){t*=wa;var n=Math.cos(e*=wa),a=n*Math.cos(t),u=n*Math.sin(t),s=Math.sin(e),l=i*s-o*u,c=o*a-r*s,f=r*u-i*a,h=Math.sqrt(l*l+c*c+f*f),d=r*a+i*u+o*s,p=h&&-tt(d)/h,g=Math.atan2(h,d);fu+=p*l,hu+=p*c,du+=p*f,iu+=g,su+=g*(r+(r=a)),lu+=g*(i+(i=u)),cu+=g*(o+(o=s)),Me(r,i,o)}var e,n,r,i,o;pu.point=function(a,u){e=a,n=u,pu.point=t,a*=wa;var s=Math.cos(u*=wa);r=s*Math.cos(a),i=s*Math.sin(a),o=Math.sin(u),Me(r,i,o)},pu.lineEnd=function(){t(e,n),pu.lineEnd=ke,pu.point=_e}}function Te(t,e){function n(n,r){return n=t(n,r),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,r){return(n=e.invert(n,r))&&t.invert(n[0],n[1])}),n}function Ce(){return!0}function De(t,e,n,r,i){var o=[],a=[];if(t.forEach(function(t){if(!((e=t.length-1)<=0)){var e,n=t[0],r=t[e];if(we(n,r)){i.lineStart();for(var u=0;u<e;++u)i.point((n=t[u])[0],n[1]);i.lineEnd()}else{var s=new Ne(n,t,null,!0),l=new Ne(n,null,s,!1);s.o=l,o.push(s),a.push(l),l=new Ne(r,null,s=new Ne(r,t,null,!1),!0),s.o=l,o.push(s),a.push(l)}}}),a.sort(e),Ee(o),Ee(a),o.length){for(var u=0,s=n,l=a.length;u<l;++u)a[u].e=s=!s;for(var c,f,h=o[0];;){for(var d=h,p=!0;d.v;)if((d=d.n)===h)return;c=d.z,i.lineStart();do{if(d.v=d.o.v=!0,d.e){if(p)for(var u=0,l=c.length;u<l;++u)i.point((f=c[u])[0],f[1]);else r(d.x,d.n.x,1,i);d=d.n}else{if(p)for(u=(c=d.p.z).length-1;u>=0;--u)i.point((f=c[u])[0],f[1]);else r(d.x,d.p.x,-1,i);d=d.p}c=(d=d.o).z,p=!p}while(!d.v);i.lineEnd()}}}function Ee(t){if(e=t.length){for(var e,n,r=0,i=t[0];++r<e;)i.n=n=t[r],n.p=i,i=n;i.n=n=t[0],n.p=i}}function Ne(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}function Le(t,e,n,r){return function(i,o){function a(e,n){var r=i(e,n);t(e=r[0],n=r[1])&&o.point(e,n)}function u(t,e){var n=i(t,e);v.point(n[0],n[1])}function s(){y.point=u,v.lineStart()}function l(){y.point=a,v.lineEnd()}function c(t,e){g.push([t,e]);var n=i(t,e);b.point(n[0],n[1])}function f(){b.lineStart(),g=[]}function h(){c(g[0][0],g[0][1]),b.lineEnd();var t,e=b.clean(),n=x.buffer(),r=n.length;if(g.pop(),p.push(g),g=null,r)if(1&e){var i,a=-1;if((r=(t=n[0]).length-1)>0){for(w||(o.polygonStart(),w=!0),o.lineStart();++a<r;)o.point((i=t[a])[0],i[1]);o.lineEnd()}}else r>1&&2&e&&n.push(n.pop().concat(n.shift())),d.push(n.filter(Oe))}var d,p,g,v=e(o),m=i.invert(r[0],r[1]),y={point:a,lineStart:s,lineEnd:l,polygonStart:function(){y.point=c,y.lineStart=f,y.lineEnd=h,d=[],p=[]},polygonEnd:function(){y.point=a,y.lineStart=s,y.lineEnd=l,d=qo.merge(d);var t=Fe(m,p);d.length?(w||(o.polygonStart(),w=!0),De(d,je,t,n,o)):t&&(w||(o.polygonStart(),w=!0),o.lineStart(),n(null,null,1,o),o.lineEnd()),w&&(o.polygonEnd(),w=!1),d=p=null},sphere:function(){o.polygonStart(),o.lineStart(),n(null,null,1,o),o.lineEnd(),o.polygonEnd()}},x=Re(),b=e(x),w=!1;return y}}function Oe(t){return t.length>1}function Re(){var t,e=[];return{lineStart:function(){e.push(t=[])},point:function(e,n){t.push([e,n])},lineEnd:w,buffer:function(){var n=e;return e=[],t=null,n},rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))}}}function je(t,e){return((t=t.x)[0]<0?t[1]-ba-ga:ba-t[1])-((e=e.x)[0]<0?e[1]-ba-ga:ba-e[1])}function Pe(t,e,n,r){var i,o,a=Math.sin(t-n);return Qo(a)>ga?Math.atan((Math.sin(e)*(o=Math.cos(r))*Math.sin(n)-Math.sin(r)*(i=Math.cos(e))*Math.sin(t))/(i*o*a)):(e+r)/2}function Fe(t,e){var n=t[0],r=t[1],i=[Math.sin(n),-Math.cos(n),0],o=0,a=0;eu.reset();for(var u=0,s=e.length;u<s;++u){var l=e[u],c=l.length;if(c)for(var f=l[0],h=f[0],d=f[1]/2+ma/4,p=Math.sin(d),g=Math.cos(d),v=1;;){v===c&&(v=0);var m=(t=l[v])[0],y=t[1]/2+ma/4,x=Math.sin(y),b=Math.cos(y),w=m-h,_=w>=0?1:-1,M=_*w,A=M>ma,k=p*x;if(eu.add(Math.atan2(k*_*Math.sin(M),g*b+k*Math.cos(M))),o+=A?w+_*ya:w,A^h>=n^m>=n){var S=ve(pe(f),pe(t));xe(S);var T=ve(i,S);xe(T);var C=(A^w>=0?-1:1)*et(T[2]);(r>C||r===C&&(S[0]||S[1]))&&(a+=A^w>=0?1:-1)}if(!v++)break;h=m,p=x,g=b,f=t}}return(o<-ga||o<ga&&eu<-ga)^1&a}function Ie(t){function e(t,e){return Math.cos(t)*Math.cos(e)>i}function n(t,e,n){var r=[1,0,0],o=ve(pe(t),pe(e)),a=ge(o,o),u=o[0],s=a-u*u;if(!s)return!n&&t;var l=i*a/s,c=-i*u/s,f=ve(r,o),h=ye(r,l);me(h,ye(o,c));var d=f,p=ge(h,d),g=ge(d,d),v=p*p-g*(ge(h,h)-1);if(!(v<0)){var m=Math.sqrt(v),y=ye(d,(-p-m)/g);if(me(y,h),y=be(y),!n)return y;var x,b=t[0],w=e[0],_=t[1],M=e[1];w<b&&(x=b,b=w,w=x);var A=w-b,k=Qo(A-ma)<ga,S=k||A<ga;if(!k&&M<_&&(x=_,_=M,M=x),S?k?_+M>0^y[1]<(Qo(y[0]-b)<ga?_:M):_<=y[1]&&y[1]<=M:A>ma^(b<=y[0]&&y[0]<=w)){var T=ye(d,(-p+m)/g);return me(T,h),[y,be(T)]}}}function r(e,n){var r=o?t:ma-t,i=0;return e<-r?i|=1:e>r&&(i|=2),n<-r?i|=4:n>r&&(i|=8),i}var i=Math.cos(t),o=i>0,a=Qo(i)>ga;return Le(e,function(t){var i,u,s,l,c;return{lineStart:function(){l=s=!1,c=1},point:function(f,h){var d,p=[f,h],g=e(f,h),v=o?g?0:r(f,h):g?r(f+(f<0?ma:-ma),h):0;if(!i&&(l=s=g)&&t.lineStart(),g!==s&&(d=n(i,p),(we(i,d)||we(p,d))&&(p[0]+=ga,p[1]+=ga,g=e(p[0],p[1]))),g!==s)c=0,g?(t.lineStart(),d=n(p,i),t.point(d[0],d[1])):(d=n(i,p),t.point(d[0],d[1]),t.lineEnd()),i=d;else if(a&&i&&o^g){var m;v&u||!(m=n(p,i,!0))||(c=0,o?(t.lineStart(),t.point(m[0][0],m[0][1]),t.point(m[1][0],m[1][1]),t.lineEnd()):(t.point(m[1][0],m[1][1]),t.lineEnd(),t.lineStart(),t.point(m[0][0],m[0][1])))}!g||i&&we(i,p)||t.point(p[0],p[1]),i=p,s=g,u=v},lineEnd:function(){s&&t.lineEnd(),i=null},clean:function(){return c|(l&&s)<<1}}},fn(t,6*wa),o?[0,-t]:[-ma,t-ma])}function Ye(t,e,n,r){return function(i){var o,a=i.a,u=i.b,s=a.x,l=a.y,c=0,f=1,h=u.x-s,d=u.y-l;if(o=t-s,h||!(o>0)){if(o/=h,h<0){if(o<c)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>c&&(c=o)}if(o=n-s,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>c&&(c=o)}else if(h>0){if(o<c)return;o<f&&(f=o)}if(o=e-l,d||!(o>0)){if(o/=d,d<0){if(o<c)return;o<f&&(f=o)}else if(d>0){if(o>f)return;o>c&&(c=o)}if(o=r-l,d||!(o<0)){if(o/=d,d<0){if(o>f)return;o>c&&(c=o)}else if(d>0){if(o<c)return;o<f&&(f=o)}return c>0&&(i.a={x:s+c*h,y:l+c*d}),f<1&&(i.b={x:s+f*h,y:l+f*d}),i}}}}}}function He(t,e,n,r){function i(r,i){return Qo(r[0]-t)<ga?i>0?0:3:Qo(r[0]-n)<ga?i>0?2:1:Qo(r[1]-e)<ga?i>0?1:0:i>0?3:2}function o(t,e){return a(t.x,e.x)}function a(t,e){var n=i(t,1),r=i(e,1);return n!==r?n-r:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(u){function s(t){for(var e=0,n=p.length,r=t[1],i=0;i<n;++i)for(var o,a=1,u=p[i],s=u.length,l=u[0];a<s;++a)o=u[a],l[1]<=r?o[1]>r&&J(l,o,t)>0&&++e:o[1]<=r&&J(l,o,t)<0&&--e,l=o;return 0!==e}function l(o,u,s,l){var c=0,f=0;if(null==o||(c=i(o,s))!==(f=i(u,s))||a(o,u)<0^s>0)do{l.point(0===c||3===c?t:n,c>1?r:e)}while((c=(c+s+4)%4)!==f);else l.point(u[0],u[1])}function c(i,o){return t<=i&&i<=n&&e<=o&&o<=r}function f(t,e){c(t,e)&&u.point(t,e)}function h(t,e){var n=c(t=Math.max(-vu,Math.min(vu,t)),e=Math.max(-vu,Math.min(vu,e)));if(p&&g.push([t,e]),_)v=t,m=e,y=n,_=!1,n&&(u.lineStart(),u.point(t,e));else if(n&&w)u.point(t,e);else{var r={a:{x:x,y:b},b:{x:t,y:e}};S(r)?(w||(u.lineStart(),u.point(r.a.x,r.a.y)),u.point(r.b.x,r.b.y),n||u.lineEnd(),M=!1):n&&(u.lineStart(),u.point(t,e),M=!1)}x=t,b=e,w=n}var d,p,g,v,m,y,x,b,w,_,M,A=u,k=Re(),S=Ye(t,e,n,r),T={point:f,lineStart:function(){T.point=h,p&&p.push(g=[]),_=!0,w=!1,x=b=NaN},lineEnd:function(){d&&(h(v,m),y&&w&&k.rejoin(),d.push(k.buffer())),T.point=f,w&&u.lineEnd()},polygonStart:function(){u=k,d=[],p=[],M=!0},polygonEnd:function(){u=A,d=qo.merge(d);var e=s([t,r]),n=M&&e,i=d.length;(n||i)&&(u.polygonStart(),n&&(u.lineStart(),l(null,null,1,u),u.lineEnd()),i&&De(d,o,e,l,u),u.polygonEnd()),d=p=g=null}};return T}}function $e(t){var e=0,n=ma/3,r=nn(t),i=r(e,n);return i.parallels=function(t){return arguments.length?r(e=t[0]*ma/180,n=t[1]*ma/180):[e/ma*180,n/ma*180]},i}function qe(t,e){function n(t,e){var n=Math.sqrt(o-2*i*Math.sin(e))/i;return[n*Math.sin(t*=i),a-n*Math.cos(t)]}var r=Math.sin(t),i=(r+Math.sin(e))/2,o=1+r*(2*i-r),a=Math.sqrt(o)/i;return n.invert=function(t,e){var n=a-e;return[Math.atan2(t,n)/i,et((o-(t*t+n*n)*i*i)/(2*i))]},n}function Ue(){function t(t,e){yu+=i*t-r*e,r=t,i=e}var e,n,r,i;Mu.point=function(o,a){Mu.point=t,e=r=o,n=i=a},Mu.lineEnd=function(){t(e,n)}}function ze(){function t(t,e){a.push("M",t,",",e,o)}function e(t,e){a.push("M",t,",",e),u.point=n}function n(t,e){a.push("L",t,",",e)}function r(){u.point=t}function i(){a.push("Z")}var o=We(4.5),a=[],u={point:t,lineStart:function(){u.point=e},lineEnd:r,polygonStart:function(){u.lineEnd=i},polygonEnd:function(){u.lineEnd=r,u.point=t},pointRadius:function(t){return o=We(t),u},result:function(){if(a.length){var t=a.join("");return a=[],t}}};return u}function We(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function Be(t,e){ou+=t,au+=e,++uu}function Ve(){function t(t,r){var i=t-e,o=r-n,a=Math.sqrt(i*i+o*o);su+=a*(e+t)/2,lu+=a*(n+r)/2,cu+=a,Be(e=t,n=r)}var e,n;ku.point=function(r,i){ku.point=t,Be(e=r,n=i)}}function Ge(){ku.point=Be}function Xe(){function t(t,e){var n=t-r,o=e-i,a=Math.sqrt(n*n+o*o);su+=a*(r+t)/2,lu+=a*(i+e)/2,cu+=a,fu+=(a=i*t-r*e)*(r+t),hu+=a*(i+e),du+=3*a,Be(r=t,i=e)}var e,n,r,i;ku.point=function(o,a){ku.point=t,Be(e=r=o,n=i=a)},ku.lineEnd=function(){t(e,n)}}function Ze(t){function e(e,n){t.moveTo(e+a,n),t.arc(e,n,a,0,ya)}function n(e,n){t.moveTo(e,n),u.point=r}function r(e,n){t.lineTo(e,n)}function i(){u.point=e}function o(){t.closePath()}var a=4.5,u={point:e,lineStart:function(){u.point=n},lineEnd:i,polygonStart:function(){u.lineEnd=o},polygonEnd:function(){u.lineEnd=i,u.point=e},pointRadius:function(t){return a=t,u},result:w};return u}function Ke(t){function e(t){return(u?r:n)(t)}function n(e){return tn(e,function(n,r){n=t(n,r),e.point(n[0],n[1])})}function r(e){function n(n,r){n=t(n,r),e.point(n[0],n[1])}function r(){x=NaN,A.point=o,e.lineStart()}function o(n,r){var o=pe([n,r]),a=t(n,r);i(x,b,y,w,_,M,x=a[0],b=a[1],y=n,w=o[0],_=o[1],M=o[2],u,e),e.point(x,b)}function a(){A.point=n,e.lineEnd()}function s(){r(),A.point=l,A.lineEnd=c}function l(t,e){o(f=t,h=e),d=x,p=b,g=w,v=_,m=M,A.point=o}function c(){i(x,b,y,w,_,M,d,p,f,g,v,m,u,e),A.lineEnd=a,a()}var f,h,d,p,g,v,m,y,x,b,w,_,M,A={point:n,lineStart:r,lineEnd:a,polygonStart:function(){e.polygonStart(),A.lineStart=s},polygonEnd:function(){e.polygonEnd(),A.lineStart=r}};return A}function i(e,n,r,u,s,l,c,f,h,d,p,g,v,m){var y=c-e,x=f-n,b=y*y+x*x;if(b>4*o&&v--){var w=u+d,_=s+p,M=l+g,A=Math.sqrt(w*w+_*_+M*M),k=Math.asin(M/=A),S=Qo(Qo(M)-1)<ga||Qo(r-h)<ga?(r+h)/2:Math.atan2(_,w),T=t(S,k),C=T[0],D=T[1],E=C-e,N=D-n,L=x*E-y*N;(L*L/b>o||Qo((y*E+x*N)/b-.5)>.3||u*d+s*p+l*g<a)&&(i(e,n,r,u,s,l,C,D,S,w/=A,_/=A,M,v,m),m.point(C,D),i(C,D,S,w,_,M,c,f,h,d,p,g,v,m))}}var o=.5,a=Math.cos(30*wa),u=16;return e.precision=function(t){return arguments.length?(u=(o=t*t)>0&&16,e):Math.sqrt(o)},e}function Qe(t){var e=Ke(function(e,n){return t([e*_a,n*_a])});return function(t){return rn(e(t))}}function Je(t){this.stream=t}function tn(t,e){return{point:e,sphere:function(){t.sphere()},lineStart:function(){t.lineStart()},lineEnd:function(){t.lineEnd()},polygonStart:function(){t.polygonStart()},polygonEnd:function(){t.polygonEnd()}}}function en(t){return nn(function(){return t})()}function nn(t){function e(t){return t=u(t[0]*wa,t[1]*wa),[t[0]*h+s,l-t[1]*h]}function n(t){return(t=u.invert((t[0]-s)/h,(l-t[1])/h))&&[t[0]*_a,t[1]*_a]}function r(){u=Te(a=un(m,x,b),o);var t=o(g,v);return s=d-t[0]*h,l=p+t[1]*h,i()}function i(){return c&&(c.valid=!1,c=null),e}var o,a,u,s,l,c,f=Ke(function(t,e){return t=o(t,e),[t[0]*h+s,l-t[1]*h]}),h=150,d=480,p=250,g=0,v=0,m=0,x=0,b=0,w=gu,_=y,M=null,A=null;return e.stream=function(t){return c&&(c.valid=!1),c=rn(w(a,f(_(t)))),c.valid=!0,c},e.clipAngle=function(t){return arguments.length?(w=null==t?(M=t,gu):Ie((M=+t)*wa),i()):M},e.clipExtent=function(t){return arguments.length?(A=t,_=t?He(t[0][0],t[0][1],t[1][0],t[1][1]):y,i()):A},e.scale=function(t){return arguments.length?(h=+t,r()):h},e.translate=function(t){return arguments.length?(d=+t[0],p=+t[1],r()):[d,p]},e.center=function(t){return arguments.length?(g=t[0]%360*wa,v=t[1]%360*wa,r()):[g*_a,v*_a]},e.rotate=function(t){return arguments.length?(m=t[0]%360*wa,x=t[1]%360*wa,b=t.length>2?t[2]%360*wa:0,r()):[m*_a,x*_a,b*_a]},qo.rebind(e,f,"precision"),function(){return o=t.apply(this,arguments),e.invert=o.invert&&n,r()}}function rn(t){return tn(t,function(e,n){t.point(e*wa,n*wa)})}function on(t,e){return[t,e]}function an(t,e){return[t>ma?t-ya:t<-ma?t+ya:t,e]}function un(t,e,n){return t?e||n?Te(ln(t),cn(e,n)):ln(t):e||n?cn(e,n):an}function sn(t){return function(e,n){return e+=t,[e>ma?e-ya:e<-ma?e+ya:e,n]}}function ln(t){var e=sn(t);return e.invert=sn(-t),e}function cn(t,e){function n(t,e){var n=Math.cos(e),u=Math.cos(t)*n,s=Math.sin(t)*n,l=Math.sin(e),c=l*r+u*i;return[Math.atan2(s*o-c*a,u*r-l*i),et(c*o+s*a)]}var r=Math.cos(t),i=Math.sin(t),o=Math.cos(e),a=Math.sin(e);return n.invert=function(t,e){var n=Math.cos(e),u=Math.cos(t)*n,s=Math.sin(t)*n,l=Math.sin(e),c=l*o-s*a;return[Math.atan2(s*o+l*a,u*r+c*i),et(c*r-u*i)]},n}function fn(t,e){var n=Math.cos(t),r=Math.sin(t);return function(i,o,a,u){var s=a*e;null!=i?(i=hn(n,i),o=hn(n,o),(a>0?i<o:i>o)&&(i+=a*ya)):(i=t+a*ya,o=t-.5*s);for(var l,c=i;a>0?c>o:c<o;c-=s)u.point((l=be([n,-r*Math.cos(c),-r*Math.sin(c)]))[0],l[1])}}function hn(t,e){var n=pe(e);n[0]-=t,xe(n);var r=tt(-n[1]);return((-n[2]<0?-r:r)+2*Math.PI-ga)%(2*Math.PI)}function dn(t,e,n){var r=qo.range(t,e-ga,n).concat(e);return function(t){return r.map(function(e){return[t,e]})}}function pn(t,e,n){var r=qo.range(t,e-ga,n).concat(e);return function(t){return r.map(function(e){return[e,t]})}}function gn(t){return t.source}function vn(t){return t.target}function mn(t,e,n,r){var i=Math.cos(e),o=Math.sin(e),a=Math.cos(r),u=Math.sin(r),s=i*Math.cos(t),l=i*Math.sin(t),c=a*Math.cos(n),f=a*Math.sin(n),h=2*Math.asin(Math.sqrt(ot(r-e)+i*a*ot(n-t))),d=1/Math.sin(h),p=h?function(t){var e=Math.sin(t*=h)*d,n=Math.sin(h-t)*d,r=n*s+e*c,i=n*l+e*f,a=n*o+e*u;return[Math.atan2(i,r)*_a,Math.atan2(a,Math.sqrt(r*r+i*i))*_a]}:function(){return[t*_a,e*_a]};return p.distance=h,p}function yn(t,e){function n(e,n){var r=Math.cos(e),i=Math.cos(n),o=t(r*i);return[o*i*Math.sin(e),o*Math.sin(n)]}return n.invert=function(t,n){var r=Math.sqrt(t*t+n*n),i=e(r),o=Math.sin(i),a=Math.cos(i);return[Math.atan2(t*o,r*a),Math.asin(r&&n*o/r)]},n}function xn(t,e){function n(t,e){a>0?e<-ba+ga&&(e=-ba+ga):e>ba-ga&&(e=ba-ga);var n=a/Math.pow(i(e),o);return[n*Math.sin(o*t),a-n*Math.cos(o*t)]}var r=Math.cos(t),i=function(t){return Math.tan(ma/4+t/2)},o=t===e?Math.sin(t):Math.log(r/Math.cos(e))/Math.log(i(e)/i(t)),a=r*Math.pow(i(t),o)/o;return o?(n.invert=function(t,e){var n=a-e,r=Q(o)*Math.sqrt(t*t+n*n);return[Math.atan2(t,n)/o,2*Math.atan(Math.pow(a/r,1/o))-ba]},n):wn}function bn(t,e){function n(t,e){var n=o-e;return[n*Math.sin(i*t),o-n*Math.cos(i*t)]}var r=Math.cos(t),i=t===e?Math.sin(t):(r-Math.cos(e))/(e-t),o=r/i+t;return Qo(i)<ga?on:(n.invert=function(t,e){var n=o-e;return[Math.atan2(t,n)/i,o-Q(i)*Math.sqrt(t*t+n*n)]},n)}function wn(t,e){return[t,Math.log(Math.tan(ma/4+e/2))]}function _n(t){var e,n=en(t),r=n.scale,i=n.translate,o=n.clipExtent;return n.scale=function(){var t=r.apply(n,arguments);return t===n?e?n.clipExtent(null):n:t},n.translate=function(){var t=i.apply(n,arguments);return t===n?e?n.clipExtent(null):n:t},n.clipExtent=function(t){var a=o.apply(n,arguments);if(a===n){if(e=null==t){var u=ma*r(),s=i();o([[s[0]-u,s[1]-u],[s[0]+u,s[1]+u]])}}else e&&(a=null);return a},n.clipExtent(null)}function Mn(t,e){return[Math.log(Math.tan(ma/4+e/2)),-t]}function An(t){return t[0]}function kn(t){return t[1]}function Sn(t){for(var e=t.length,n=[0,1],r=2,i=2;i<e;i++){for(;r>1&&J(t[n[r-2]],t[n[r-1]],t[i])<=0;)--r;n[r++]=i}return n.slice(0,r)}function Tn(t,e){return t[0]-e[0]||t[1]-e[1]}function Cn(t,e,n){return(n[0]-e[0])*(t[1]-e[1])<(n[1]-e[1])*(t[0]-e[0])}function Dn(t,e,n,r){var i=t[0],o=n[0],a=e[0]-i,u=r[0]-o,s=t[1],l=n[1],c=e[1]-s,f=r[1]-l,h=(u*(s-l)-f*(i-o))/(f*a-u*c);return[i+h*a,s+h*c]}function En(t){var e=t[0],n=t[t.length-1];return!(e[0]-n[0]||e[1]-n[1])}function Nn(){Qn(this),this.edge=this.site=this.circle=null}function Ln(t){var e=Yu.pop()||new Nn;return e.site=t,e}function On(t){Un(t),Pu.remove(t),Yu.push(t),Qn(t)}function Rn(t){var e=t.circle,n=e.x,r=e.cy,i={x:n,y:r},o=t.P,a=t.N,u=[t];On(t);for(var s=o;s.circle&&Qo(n-s.circle.x)<ga&&Qo(r-s.circle.cy)<ga;)o=s.P,u.unshift(s),On(s),s=o;u.unshift(s),Un(s);for(var l=a;l.circle&&Qo(n-l.circle.x)<ga&&Qo(r-l.circle.cy)<ga;)a=l.N,u.push(l),On(l),l=a;u.push(l),Un(l);var c,f=u.length;for(c=1;c<f;++c)l=u[c],s=u[c-1],Xn(l.edge,s.site,l.site,i);s=u[0],(l=u[f-1]).edge=Vn(s.site,l.site,null,i),qn(s),qn(l)}function jn(t){for(var e,n,r,i,o=t.x,a=t.y,u=Pu._;u;)if((r=Pn(u,a)-o)>ga)u=u.L;else{if(!((i=o-Fn(u,a))>ga)){r>-ga?(e=u.P,n=u):i>-ga?(e=u,n=u.N):e=n=u;break}if(!u.R){e=u;break}u=u.R}var s=Ln(t);if(Pu.insert(e,s),e||n){if(e===n)return Un(e),n=Ln(e.site),Pu.insert(s,n),s.edge=n.edge=Vn(e.site,s.site),qn(e),void qn(n);if(n){Un(e),Un(n);var l=e.site,c=l.x,f=l.y,h=t.x-c,d=t.y-f,p=n.site,g=p.x-c,v=p.y-f,m=2*(h*v-d*g),y=h*h+d*d,x=g*g+v*v,b={x:(v*y-d*x)/m+c,y:(h*x-g*y)/m+f};Xn(n.edge,l,p,b),s.edge=Vn(l,t,null,b),n.edge=Vn(t,p,null,b),qn(e),qn(n)}else s.edge=Vn(e.site,s.site)}}function Pn(t,e){var n=t.site,r=n.x,i=n.y,o=i-e;if(!o)return r;var a=t.P;if(!a)return-1/0;var u=(n=a.site).x,s=n.y,l=s-e;if(!l)return u;var c=u-r,f=1/o-1/l,h=c/l;return f?(-h+Math.sqrt(h*h-2*f*(c*c/(-2*l)-s+l/2+i-o/2)))/f+r:(r+u)/2}function Fn(t,e){var n=t.N;if(n)return Pn(n,e);var r=t.site;return r.y===e?r.x:1/0}function In(t){this.site=t,this.edges=[]}function Yn(t){for(var e,n,r,i,o,a,u,s,l,c,f=t[0][0],h=t[1][0],d=t[0][1],p=t[1][1],g=ju,v=g.length;v--;)if((o=g[v])&&o.prepare())for(s=(u=o.edges).length,a=0;a<s;)r=(c=u[a].end()).x,i=c.y,e=(l=u[++a%s].start()).x,n=l.y,(Qo(r-e)>ga||Qo(i-n)>ga)&&(u.splice(a,0,new Zn(Gn(o.site,c,Qo(r-f)<ga&&p-i>ga?{x:f,y:Qo(e-f)<ga?n:p}:Qo(i-p)<ga&&h-r>ga?{x:Qo(n-p)<ga?e:h,y:p}:Qo(r-h)<ga&&i-d>ga?{x:h,y:Qo(e-h)<ga?n:d}:Qo(i-d)<ga&&r-f>ga?{x:Qo(n-d)<ga?e:f,y:d}:null),o.site,null)),++s)}function Hn(t,e){return e.angle-t.angle}function $n(){Qn(this),this.x=this.y=this.arc=this.site=this.cy=null}function qn(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,o=n.site;if(r!==o){var a=i.x,u=i.y,s=r.x-a,l=r.y-u,c=o.x-a,f=2*(s*(v=o.y-u)-l*c);if(!(f>=-va)){var h=s*s+l*l,d=c*c+v*v,p=(v*h-l*d)/f,g=(s*d-c*h)/f,v=g+u,m=Hu.pop()||new $n;m.arc=t,m.site=i,m.x=p+a,m.y=v+Math.sqrt(p*p+g*g),m.cy=v,t.circle=m;for(var y=null,x=Iu._;x;)if(m.y<x.y||m.y===x.y&&m.x<=x.x){if(!x.L){y=x.P;break}x=x.L}else{if(!x.R){y=x;break}x=x.R}Iu.insert(y,m),y||(Fu=m)}}}}function Un(t){var e=t.circle;e&&(e.P||(Fu=e.N),Iu.remove(e),Hu.push(e),Qn(e),t.circle=null)}function zn(t){for(var e,n=Ru,r=Ye(t[0][0],t[0][1],t[1][0],t[1][1]),i=n.length;i--;)(!Wn(e=n[i],t)||!r(e)||Qo(e.a.x-e.b.x)<ga&&Qo(e.a.y-e.b.y)<ga)&&(e.a=e.b=null,n.splice(i,1))}function Wn(t,e){var n=t.b;if(n)return!0;var r,i,o=t.a,a=e[0][0],u=e[1][0],s=e[0][1],l=e[1][1],c=t.l,f=t.r,h=c.x,d=c.y,p=f.x,g=f.y,v=(h+p)/2,m=(d+g)/2;if(g===d){if(v<a||v>=u)return;if(h>p){if(o){if(o.y>=l)return}else o={x:v,y:s};n={x:v,y:l}}else{if(o){if(o.y<s)return}else o={x:v,y:l};n={x:v,y:s}}}else if(r=(h-p)/(g-d),i=m-r*v,r<-1||r>1)if(h>p){if(o){if(o.y>=l)return}else o={x:(s-i)/r,y:s};n={x:(l-i)/r,y:l}}else{if(o){if(o.y<s)return}else o={x:(l-i)/r,y:l};n={x:(s-i)/r,y:s}}else if(d<g){if(o){if(o.x>=u)return}else o={x:a,y:r*a+i};n={x:u,y:r*u+i}}else{if(o){if(o.x<a)return}else o={x:u,y:r*u+i};n={x:a,y:r*a+i}}return t.a=o,t.b=n,!0}function Bn(t,e){this.l=t,this.r=e,this.a=this.b=null}function Vn(t,e,n,r){var i=new Bn(t,e);return Ru.push(i),n&&Xn(i,t,e,n),r&&Xn(i,e,t,r),ju[t.i].edges.push(new Zn(i,t,e)),ju[e.i].edges.push(new Zn(i,e,t)),i}function Gn(t,e,n){var r=new Bn(t,null);return r.a=e,r.b=n,Ru.push(r),r}function Xn(t,e,n,r){t.a||t.b?t.l===n?t.b=r:t.a=r:(t.a=r,t.l=e,t.r=n)}function Zn(t,e,n){var r=t.a,i=t.b;this.edge=t,this.site=e,this.angle=n?Math.atan2(n.y-e.y,n.x-e.x):t.l===e?Math.atan2(i.x-r.x,r.y-i.y):Math.atan2(r.x-i.x,i.y-r.y)}function Kn(){this._=null}function Qn(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Jn(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function tr(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function er(t){for(;t.L;)t=t.L;return t}function nr(t,e){var n,r,i,o=t.sort(rr).pop();for(Ru=[],ju=new Array(t.length),Pu=new Kn,Iu=new Kn;;)if(i=Fu,o&&(!i||o.y<i.y||o.y===i.y&&o.x<i.x))o.x===n&&o.y===r||(ju[o.i]=new In(o),jn(o),n=o.x,r=o.y),o=t.pop();else{if(!i)break;Rn(i.arc)}e&&(zn(e),Yn(e));var a={cells:ju,edges:Ru};return Pu=Iu=Ru=ju=null,a}function rr(t,e){return e.y-t.y||e.x-t.x}function ir(t,e,n){return(t.x-n.x)*(e.y-t.y)-(t.x-e.x)*(n.y-t.y)}function or(t){return t.x}function ar(t){return t.y}function ur(t,e,n,r,i,o){if(!t(e,n,r,i,o)){var a=.5*(n+i),u=.5*(r+o),s=e.nodes;s[0]&&ur(t,s[0],n,r,a,u),s[1]&&ur(t,s[1],a,r,i,u),s[2]&&ur(t,s[2],n,u,a,o),s[3]&&ur(t,s[3],a,u,i,o)}}function sr(t,e,n,r,i,o,a){var u,s=1/0;return function t(l,c,f,h,d){if(!(c>o||f>a||h<r||d<i)){if(p=l.point){var p,g=e-l.x,v=n-l.y,m=g*g+v*v;if(m<s){var y=Math.sqrt(s=m);r=e-y,i=n-y,o=e+y,a=n+y,u=p}}for(var x=l.nodes,b=.5*(c+h),w=.5*(f+d),_=(n>=w)<<1|e>=b,M=_+4;_<M;++_)if(l=x[3&_])switch(3&_){case 0:t(l,c,f,b,w);break;case 1:t(l,b,f,h,w);break;case 2:t(l,c,w,b,d);break;case 3:t(l,b,w,h,d)}}}(t,r,i,o,a),u}function lr(t,e){t=qo.rgb(t),e=qo.rgb(e);var n=t.r,r=t.g,i=t.b,o=e.r-n,a=e.g-r,u=e.b-i;return function(t){return"#"+bt(Math.round(n+o*t))+bt(Math.round(r+a*t))+bt(Math.round(i+u*t))}}function cr(t,e){var n,r={},i={};for(n in t)n in e?r[n]=dr(t[n],e[n]):i[n]=t[n];for(n in e)n in t||(i[n]=e[n]);return function(t){for(n in r)i[n]=r[n](t);return i}}function fr(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function hr(t,e){var n,r,i,o=qu.lastIndex=Uu.lastIndex=0,a=-1,u=[],s=[];for(t+="",e+="";(n=qu.exec(t))&&(r=Uu.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:fr(n,r)})),o=Uu.lastIndex;return o<e.length&&(i=e.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?(e=s[0].x,function(t){return e(t)+""}):function(){return e}:(e=s.length,function(t){for(var n,r=0;r<e;++r)u[(n=s[r]).i]=n.x(t);return u.join("")})}function dr(t,e){for(var n,r=qo.interpolators.length;--r>=0&&!(n=qo.interpolators[r](t,e)););return n}function pr(t,e){var n,r=[],i=[],o=t.length,a=e.length,u=Math.min(t.length,e.length);for(n=0;n<u;++n)r.push(dr(t[n],e[n]));for(;n<o;++n)i[n]=t[n];for(;n<a;++n)i[n]=e[n];return function(t){for(n=0;n<u;++n)i[n]=r[n](t);return i}}function gr(t){return function(e){return e<=0?0:e>=1?1:t(e)}}function vr(t){return function(e){return 1-t(1-e)}}function mr(t){return function(e){return.5*(e<.5?t(2*e):2-t(2-2*e))}}function yr(t){return t*t}function xr(t){return t*t*t}function br(t){if(t<=0)return 0;if(t>=1)return 1;var e=t*t,n=e*t;return 4*(t<.5?n:3*(t-e)+n-.75)}function wr(t){return 1-Math.cos(t*ba)}function _r(t){return Math.pow(2,10*(t-1))}function Mr(t){return 1-Math.sqrt(1-t*t)}function Ar(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}function kr(t,e){return e-=t,function(n){return Math.round(t+e*n)}}function Sr(t){var e=[t.a,t.b],n=[t.c,t.d],r=Cr(e),i=Tr(e,n),o=Cr(Dr(n,e,-i))||0;e[0]*n[1]<n[0]*e[1]&&(e[0]*=-1,e[1]*=-1,r*=-1,i*=-1),this.rotate=(r?Math.atan2(e[1],e[0]):Math.atan2(-n[0],n[1]))*_a,this.translate=[t.e,t.f],this.scale=[r,o],this.skew=o?Math.atan2(i,o)*_a:0}function Tr(t,e){return t[0]*e[0]+t[1]*e[1]}function Cr(t){var e=Math.sqrt(Tr(t,t));return e&&(t[0]/=e,t[1]/=e),e}function Dr(t,e,n){return t[0]+=n*e[0],t[1]+=n*e[1],t}function Er(t){return t.length?t.pop()+",":""}function Nr(t,e,n,r){if(t[0]!==e[0]||t[1]!==e[1]){var i=n.push("translate(",null,",",null,")");r.push({i:i-4,x:fr(t[0],e[0])},{i:i-2,x:fr(t[1],e[1])})}else(e[0]||e[1])&&n.push("translate("+e+")")}function Lr(t,e,n,r){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),r.push({i:n.push(Er(n)+"rotate(",null,")")-2,x:fr(t,e)})):e&&n.push(Er(n)+"rotate("+e+")")}function Or(t,e,n,r){t!==e?r.push({i:n.push(Er(n)+"skewX(",null,")")-2,x:fr(t,e)}):e&&n.push(Er(n)+"skewX("+e+")")}function Rr(t,e,n,r){if(t[0]!==e[0]||t[1]!==e[1]){var i=n.push(Er(n)+"scale(",null,",",null,")");r.push({i:i-4,x:fr(t[0],e[0])},{i:i-2,x:fr(t[1],e[1])})}else 1===e[0]&&1===e[1]||n.push(Er(n)+"scale("+e+")")}function jr(t,e){var n=[],r=[];return t=qo.transform(t),e=qo.transform(e),Nr(t.translate,e.translate,n,r),Lr(t.rotate,e.rotate,n,r),Or(t.skew,e.skew,n,r),Rr(t.scale,e.scale,n,r),t=e=null,function(t){for(var e,i=-1,o=r.length;++i<o;)n[(e=r[i]).i]=e.x(t);return n.join("")}}function Pr(t,e){return e=(e-=t=+t)||1/e,function(n){return(n-t)/e}}function Fr(t,e){return e=(e-=t=+t)||1/e,function(n){return Math.max(0,Math.min(1,(n-t)/e))}}function Ir(t){for(var e=t.source,n=t.target,r=Hr(e,n),i=[e];e!==r;)e=e.parent,i.push(e);for(var o=i.length;n!==r;)i.splice(o,0,n),n=n.parent;return i}function Yr(t){for(var e=[],n=t.parent;null!=n;)e.push(t),t=n,n=n.parent;return e.push(t),e}function Hr(t,e){if(t===e)return t;for(var n=Yr(t),r=Yr(e),i=n.pop(),o=r.pop(),a=null;i===o;)a=i,i=n.pop(),o=r.pop();return a}function $r(t){t.fixed|=2}function qr(t){t.fixed&=-7}function Ur(t){t.fixed|=4,t.px=t.x,t.py=t.y}function zr(t){t.fixed&=-5}function Wr(t,e,n){var r=0,i=0;if(t.charge=0,!t.leaf)for(var o,a=t.nodes,u=a.length,s=-1;++s<u;)null!=(o=a[s])&&(Wr(o,e,n),t.charge+=o.charge,r+=o.charge*o.cx,i+=o.charge*o.cy);if(t.point){t.leaf||(t.point.x+=Math.random()-.5,t.point.y+=Math.random()-.5);var l=e*n[t.point.index];t.charge+=t.pointCharge=l,r+=l*t.point.x,i+=l*t.point.y}t.cx=r/t.charge,t.cy=i/t.charge}function Br(t,e){return qo.rebind(t,e,"sort","children","value"),t.nodes=t,t.links=Qr,t}function Vr(t,e){for(var n=[t];null!=(t=n.pop());)if(e(t),(i=t.children)&&(r=i.length))for(var r,i;--r>=0;)n.push(i[r])}function Gr(t,e){for(var n=[t],r=[];null!=(t=n.pop());)if(r.push(t),(o=t.children)&&(i=o.length))for(var i,o,a=-1;++a<i;)n.push(o[a]);for(;null!=(t=r.pop());)e(t)}function Xr(t){return t.children}function Zr(t){return t.value}function Kr(t,e){return e.value-t.value}function Qr(t){return qo.merge(t.map(function(t){return(t.children||[]).map(function(e){return{source:t,target:e}})}))}function Jr(t){return t.x}function ti(t){return t.y}function ei(t,e,n){t.y0=e,t.y=n}function ni(t){return qo.range(t.length)}function ri(t){for(var e=-1,n=t[0].length,r=[];++e<n;)r[e]=0;return r}function ii(t){for(var e,n=1,r=0,i=t[0][1],o=t.length;n<o;++n)(e=t[n][1])>i&&(r=n,i=e);return r}function oi(t){return t.reduce(ai,0)}function ai(t,e){return t+e[1]}function ui(t,e){return si(t,Math.ceil(Math.log(e.length)/Math.LN2+1))}function si(t,e){for(var n=-1,r=+t[0],i=(t[1]-r)/e,o=[];++n<=e;)o[n]=i*n+r;return o}function li(t){return[qo.min(t),qo.max(t)]}function ci(t,e){return t.value-e.value}function fi(t,e){var n=t._pack_next;t._pack_next=e,e._pack_prev=t,e._pack_next=n,n._pack_prev=e}function hi(t,e){t._pack_next=e,e._pack_prev=t}function di(t,e){var n=e.x-t.x,r=e.y-t.y,i=t.r+e.r;return.999*i*i>n*n+r*r}function pi(t){function e(t){c=Math.min(t.x-t.r,c),f=Math.max(t.x+t.r,f),h=Math.min(t.y-t.r,h),d=Math.max(t.y+t.r,d)}if((n=t.children)&&(l=n.length)){var n,r,i,o,a,u,s,l,c=1/0,f=-1/0,h=1/0,d=-1/0;if(n.forEach(gi),r=n[0],r.x=-r.r,r.y=0,e(r),l>1&&(i=n[1],i.x=i.r,i.y=0,e(i),l>2))for(yi(r,i,o=n[2]),e(o),fi(r,o),r._pack_prev=o,fi(o,i),i=r._pack_next,a=3;a<l;a++){yi(r,i,o=n[a]);var p=0,g=1,v=1;for(u=i._pack_next;u!==i;u=u._pack_next,g++)if(di(u,o)){p=1;break}if(1==p)for(s=r._pack_prev;s!==u._pack_prev&&!di(s,o);s=s._pack_prev,v++);p?(g<v||g==v&&i.r<r.r?hi(r,i=u):hi(r=s,i),a--):(fi(r,o),i=o,e(o))}var m=(c+f)/2,y=(h+d)/2,x=0;for(a=0;a<l;a++)(o=n[a]).x-=m,o.y-=y,x=Math.max(x,o.r+Math.sqrt(o.x*o.x+o.y*o.y));t.r=x,n.forEach(vi)}}function gi(t){t._pack_next=t._pack_prev=t}function vi(t){delete t._pack_next,delete t._pack_prev}function mi(t,e,n,r){var i=t.children;if(t.x=e+=r*t.x,t.y=n+=r*t.y,t.r*=r,i)for(var o=-1,a=i.length;++o<a;)mi(i[o],e,n,r)}function yi(t,e,n){var r=t.r+n.r,i=e.x-t.x,o=e.y-t.y;if(r&&(i||o)){var a=e.r+n.r,u=i*i+o*o,s=.5+((r*=r)-(a*=a))/(2*u),l=Math.sqrt(Math.max(0,2*a*(r+u)-(r-=u)*r-a*a))/(2*u);n.x=t.x+s*i+l*o,n.y=t.y+s*o-l*i}else n.x=t.x+r,n.y=t.y}function xi(t,e){return t.parent==e.parent?1:2}function bi(t){var e=t.children;return e.length?e[0]:t.t}function wi(t){var e,n=t.children;return(e=n.length)?n[e-1]:t.t}function _i(t,e,n){var r=n/(e.i-t.i);e.c-=r,e.s+=n,t.c+=r,e.z+=n,e.m+=n}function Mi(t){for(var e,n=0,r=0,i=t.children,o=i.length;--o>=0;)(e=i[o]).z+=n,e.m+=n,n+=e.s+(r+=e.c)}function Ai(t,e,n){return t.a.parent===e.parent?t.a:n}function ki(t){return 1+qo.max(t,function(t){return t.y})}function Si(t){return t.reduce(function(t,e){return t+e.x},0)/t.length}function Ti(t){var e=t.children;return e&&e.length?Ti(e[0]):t}function Ci(t){var e,n=t.children;return n&&(e=n.length)?Ci(n[e-1]):t}function Di(t){return{x:t.x,y:t.y,dx:t.dx,dy:t.dy}}function Ei(t,e){var n=t.x+e[3],r=t.y+e[0],i=t.dx-e[1]-e[3],o=t.dy-e[0]-e[2];return i<0&&(n+=i/2,i=0),o<0&&(r+=o/2,o=0),{x:n,y:r,dx:i,dy:o}}function Ni(t){var e=t[0],n=t[t.length-1];return e<n?[e,n]:[n,e]}function Li(t){return t.rangeExtent?t.rangeExtent():Ni(t.range())}function Oi(t,e,n,r){var i=n(t[0],t[1]),o=r(e[0],e[1]);return function(t){return o(i(t))}}function Ri(t,e){var n,r=0,i=t.length-1,o=t[r],a=t[i];return a<o&&(n=r,r=i,i=n,n=o,o=a,a=n),t[r]=e.floor(o),t[i]=e.ceil(a),t}function ji(t){return t?{floor:function(e){return Math.floor(e/t)*t},ceil:function(e){return Math.ceil(e/t)*t}}:ts}function Pi(t,e,n,r){var i=[],o=[],a=0,u=Math.min(t.length,e.length)-1;for(t[u]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<=u;)i.push(n(t[a-1],t[a])),o.push(r(e[a-1],e[a]));return function(e){var n=qo.bisect(t,e,1,u)-1;return o[n](i[n](e))}}function Fi(t,e,n,r){function i(){var i=Math.min(t.length,e.length)>2?Pi:Oi,s=r?Fr:Pr;return a=i(t,e,s,n),u=i(e,t,s,dr),o}function o(t){return a(t)}var a,u;return o.invert=function(t){return u(t)},o.domain=function(e){return arguments.length?(t=e.map(Number),i()):t},o.range=function(t){return arguments.length?(e=t,i()):e},o.rangeRound=function(t){return o.range(t).interpolate(kr)},o.clamp=function(t){return arguments.length?(r=t,i()):r},o.interpolate=function(t){return arguments.length?(n=t,i()):n},o.ticks=function(e){return $i(t,e)},o.tickFormat=function(e,n){return qi(t,e,n)},o.nice=function(e){return Yi(t,e),i()},o.copy=function(){return Fi(t,e,n,r)},i()}function Ii(t,e){return qo.rebind(t,e,"range","rangeRound","interpolate","clamp")}function Yi(t,e){return Ri(t,ji(Hi(t,e)[2])),Ri(t,ji(Hi(t,e)[2])),t}function Hi(t,e){null==e&&(e=10);var n=Ni(t),r=n[1]-n[0],i=Math.pow(10,Math.floor(Math.log(r/e)/Math.LN10)),o=e/r*i;return o<=.15?i*=10:o<=.35?i*=5:o<=.75&&(i*=2),n[0]=Math.ceil(n[0]/i)*i,n[1]=Math.floor(n[1]/i)*i+.5*i,n[2]=i,n}function $i(t,e){return qo.range.apply(qo,Hi(t,e))}function qi(t,e,n){var r=Hi(t,e);if(n){var i=qa.exec(n);if(i.shift(),"s"===i[8]){var o=qo.formatPrefix(Math.max(Qo(r[0]),Qo(r[1])));return i[7]||(i[7]="."+Ui(o.scale(r[2]))),i[8]="f",n=qo.format(i.join("")),function(t){return n(o.scale(t))+o.symbol}}i[7]||(i[7]="."+zi(i[8],r)),n=i.join("")}else n=",."+Ui(r[2])+"f";return qo.format(n)}function Ui(t){return-Math.floor(Math.log(t)/Math.LN10+.01)}function zi(t,e){var n=Ui(e[2]);return t in es?Math.abs(n-Ui(Math.max(Qo(e[0]),Qo(e[1]))))+ +("e"!==t):n-2*("%"===t)}function Wi(t,e,n,r){function i(t){return(n?Math.log(t<0?0:t):-Math.log(t>0?0:-t))/Math.log(e)}function o(t){return n?Math.pow(e,t):-Math.pow(e,-t)}function a(e){return t(i(e))}return a.invert=function(e){return o(t.invert(e))},a.domain=function(e){return arguments.length?(n=e[0]>=0,t.domain((r=e.map(Number)).map(i)),a):r},a.base=function(n){return arguments.length?(e=+n,t.domain(r.map(i)),a):e},a.nice=function(){var e=Ri(r.map(i),n?Math:rs);return t.domain(e),r=e.map(o),a},a.ticks=function(){var t=Ni(r),a=[],u=t[0],s=t[1],l=Math.floor(i(u)),c=Math.ceil(i(s)),f=e%1?2:e;if(isFinite(c-l)){if(n){for(;l<c;l++)for(h=1;h<f;h++)a.push(o(l)*h);a.push(o(l))}else for(a.push(o(l));l++<c;)for(var h=f-1;h>0;h--)a.push(o(l)*h);for(l=0;a[l]<u;l++);for(c=a.length;a[c-1]>s;c--);a=a.slice(l,c)}return a},a.tickFormat=function(t,n){if(!arguments.length)return ns;arguments.length<2?n=ns:"function"!=typeof n&&(n=qo.format(n));var r=Math.max(1,e*t/a.ticks().length);return function(t){var a=t/o(Math.round(i(t)));return a*e<e-.5&&(a*=e),a<=r?n(t):""}},a.copy=function(){return Wi(t.copy(),e,n,r)},Ii(a,t)}function Bi(t,e,n){function r(e){return t(i(e))}var i=Vi(e),o=Vi(1/e);return r.invert=function(e){return o(t.invert(e))},r.domain=function(e){return arguments.length?(t.domain((n=e.map(Number)).map(i)),r):n},r.ticks=function(t){return $i(n,t)},r.tickFormat=function(t,e){return qi(n,t,e)},r.nice=function(t){return r.domain(Yi(n,t))},r.exponent=function(a){return arguments.length?(i=Vi(e=a),o=Vi(1/e),t.domain(n.map(i)),r):e},r.copy=function(){return Bi(t.copy(),e,n)},Ii(r,t)}function Vi(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function Gi(t,e){function n(n){return o[((i.get(n)||("range"===e.t?i.set(n,t.push(n)):NaN))-1)%o.length]}function r(e,n){return qo.range(t.length).map(function(t){return e+n*t})}var i,o,a;return n.domain=function(r){if(!arguments.length)return t;t=[],i=new l;for(var o,a=-1,u=r.length;++a<u;)i.has(o=r[a])||i.set(o,t.push(o));return n[e.t].apply(n,e.a)},n.range=function(t){return arguments.length?(o=t,a=0,e={t:"range",a:arguments},n):o},n.rangePoints=function(i,u){arguments.length<2&&(u=0);var s=i[0],l=i[1],c=t.length<2?(s=(s+l)/2,0):(l-s)/(t.length-1+u);return o=r(s+c*u/2,c),a=0,e={t:"rangePoints",a:arguments},n},n.rangeRoundPoints=function(i,u){arguments.length<2&&(u=0);var s=i[0],l=i[1],c=t.length<2?(s=l=Math.round((s+l)/2),0):(l-s)/(t.length-1+u)|0;return o=r(s+Math.round(c*u/2+(l-s-(t.length-1+u)*c)/2),c),a=0,e={t:"rangeRoundPoints",a:arguments},n},n.rangeBands=function(i,u,s){arguments.length<2&&(u=0),arguments.length<3&&(s=u);var l=i[1]<i[0],c=i[l-0],f=(i[1-l]-c)/(t.length-u+2*s);return o=r(c+f*s,f),l&&o.reverse(),a=f*(1-u),e={t:"rangeBands",a:arguments},n},n.rangeRoundBands=function(i,u,s){arguments.length<2&&(u=0),arguments.length<3&&(s=u);var l=i[1]<i[0],c=i[l-0],f=i[1-l],h=Math.floor((f-c)/(t.length-u+2*s));return o=r(c+Math.round((f-c-(t.length-u)*h)/2),h),l&&o.reverse(),a=Math.round(h*(1-u)),e={t:"rangeRoundBands",a:arguments},n},n.rangeBand=function(){return a},n.rangeExtent=function(){return Ni(e.a[0])},n.copy=function(){return Gi(t,e)},n.domain(t)}function Xi(t,e){function o(){var n=0,r=e.length;for(u=[];++n<r;)u[n-1]=qo.quantile(t,n/r);return a}function a(t){if(!isNaN(t=+t))return e[qo.bisect(u,t)]}var u;return a.domain=function(e){return arguments.length?(t=e.map(r).filter(i).sort(n),o()):t},a.range=function(t){return arguments.length?(e=t,o()):e},a.quantiles=function(){return u},a.invertExtent=function(n){return(n=e.indexOf(n))<0?[NaN,NaN]:[n>0?u[n-1]:t[0],n<u.length?u[n]:t[t.length-1]]},a.copy=function(){return Xi(t,e)},o()}function Zi(t,e,n){function r(e){return n[Math.max(0,Math.min(a,Math.floor(o*(e-t))))]}function i(){return o=n.length/(e-t),a=n.length-1,r}var o,a;return r.domain=function(n){return arguments.length?(t=+n[0],e=+n[n.length-1],i()):[t,e]},r.range=function(t){return arguments.length?(n=t,i()):n},r.invertExtent=function(e){return e=n.indexOf(e),e=e<0?NaN:e/o+t,[e,e+1/o]},r.copy=function(){return Zi(t,e,n)},i()}function Ki(t,e){function n(n){if(n<=n)return e[qo.bisect(t,n)]}return n.domain=function(e){return arguments.length?(t=e,n):t},n.range=function(t){return arguments.length?(e=t,n):e},n.invertExtent=function(n){return n=e.indexOf(n),[t[n-1],t[n]]},n.copy=function(){return Ki(t,e)},n}function Qi(t){function e(t){return+t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=n.map(e),e):t},e.ticks=function(e){return $i(t,e)},e.tickFormat=function(e,n){return qi(t,e,n)},e.copy=function(){return Qi(t)},e}function Ji(){return 0}function to(t){return t.innerRadius}function eo(t){return t.outerRadius}function no(t){return t.startAngle}function ro(t){return t.endAngle}function io(t){return t&&t.padAngle}function oo(t,e,n,r){return(t-n)*e-(e-r)*t>0?0:1}function ao(t,e,n,r,i){var o=t[0]-e[0],a=t[1]-e[1],u=(i?r:-r)/Math.sqrt(o*o+a*a),s=u*a,l=-u*o,c=t[0]+s,f=t[1]+l,h=e[0]+s,d=e[1]+l,p=(c+h)/2,g=(f+d)/2,v=h-c,m=d-f,y=v*v+m*m,x=n-r,b=c*d-h*f,w=(m<0?-1:1)*Math.sqrt(Math.max(0,x*x*y-b*b)),_=(b*m-v*w)/y,M=(-b*v-m*w)/y,A=(b*m+v*w)/y,k=(-b*v+m*w)/y,S=_-p,T=M-g,C=A-p,D=k-g;return S*S+T*T>C*C+D*D&&(_=A,M=k),[[_-s,M-l],[_*n/x,M*n/x]]}function uo(t){function e(e){function a(){l.push("M",o(t(c),u))}for(var s,l=[],c=[],f=-1,h=e.length,d=St(n),p=St(r);++f<h;)i.call(this,s=e[f],f)?c.push([+d.call(this,s,f),+p.call(this,s,f)]):c.length&&(a(),c=[]);return c.length&&a(),l.length?l.join(""):null}var n=An,r=kn,i=Ce,o=so,a=o.key,u=.7;return e.x=function(t){return arguments.length?(n=t,e):n},e.y=function(t){return arguments.length?(r=t,e):r},e.defined=function(t){return arguments.length?(i=t,e):i},e.interpolate=function(t){return arguments.length?(a="function"==typeof t?o=t:(o=ls.get(t)||so).key,e):a},e.tension=function(t){return arguments.length?(u=t,e):u},e}function so(t){return t.length>1?t.join("L"):t+"Z"}function lo(t){return t.join("L")+"Z"}function co(t){for(var e=0,n=t.length,r=t[0],i=[r[0],",",r[1]];++e<n;)i.push("V",(r=t[e])[1],"H",r[0]);return i.join("")}function fo(t){for(var e=0,n=t.length,r=t[0],i=[r[0],",",r[1]];++e<n;)i.push("H",(r=t[e])[0],"V",r[1]);return i.join("")}function ho(t,e){if(e.length<1||t.length!=e.length&&t.length!=e.length+2)return so(t);var n=t.length!=e.length,r="",i=t[0],o=t[1],a=e[0],u=a,s=1;if(n&&(r+="Q"+(o[0]-2*a[0]/3)+","+(o[1]-2*a[1]/3)+","+o[0]+","+o[1],i=t[1],s=2),e.length>1){u=e[1],o=t[s],s++,r+="C"+(i[0]+a[0])+","+(i[1]+a[1])+","+(o[0]-u[0])+","+(o[1]-u[1])+","+o[0]+","+o[1];for(var l=2;l<e.length;l++,s++)o=t[s],u=e[l],r+="S"+(o[0]-u[0])+","+(o[1]-u[1])+","+o[0]+","+o[1]}if(n){var c=t[s];r+="Q"+(o[0]+2*u[0]/3)+","+(o[1]+2*u[1]/3)+","+c[0]+","+c[1]}return r}function po(t,e){for(var n,r=[],i=(1-e)/2,o=t[0],a=t[1],u=1,s=t.length;++u<s;)n=o,o=a,a=t[u],r.push([i*(a[0]-n[0]),i*(a[1]-n[1])]);return r}function go(t){if(t.length<3)return so(t);var e=1,n=t.length,r=t[0],i=r[0],o=r[1],a=[i,i,i,(r=t[1])[0]],u=[o,o,o,r[1]],s=[i,",",o,"L",vo(hs,a),",",vo(hs,u)];for(t.push(t[n-1]);++e<=n;)r=t[e],a.shift(),a.push(r[0]),u.shift(),u.push(r[1]),mo(s,a,u);return t.pop(),s.push("L",r),s.join("")}function vo(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function mo(t,e,n){t.push("C",vo(cs,e),",",vo(cs,n),",",vo(fs,e),",",vo(fs,n),",",vo(hs,e),",",vo(hs,n))}function yo(t,e){return(e[1]-t[1])/(e[0]-t[0])}function xo(t){for(var e=0,n=t.length-1,r=[],i=t[0],o=t[1],a=r[0]=yo(i,o);++e<n;)r[e]=(a+(a=yo(i=o,o=t[e+1])))/2;return r[e]=a,r}function bo(t){for(var e,n,r,i,o=[],a=xo(t),u=-1,s=t.length-1;++u<s;)e=yo(t[u],t[u+1]),Qo(e)<ga?a[u]=a[u+1]=0:(i=(n=a[u]/e)*n+(r=a[u+1]/e)*r)>9&&(i=3*e/Math.sqrt(i),a[u]=i*n,a[u+1]=i*r);for(u=-1;++u<=s;)i=(t[Math.min(s,u+1)][0]-t[Math.max(0,u-1)][0])/(6*(1+a[u]*a[u])),o.push([i||0,a[u]*i||0]);return o}function wo(t){for(var e,n,r,i=-1,o=t.length;++i<o;)n=(e=t[i])[0],r=e[1]-ba,e[0]=n*Math.cos(r),e[1]=n*Math.sin(r);return t}function _o(t){function e(e){function s(){g.push("M",u(t(m),f),c,l(t(v.reverse()),f),"Z")}for(var h,d,p,g=[],v=[],m=[],y=-1,x=e.length,b=St(n),w=St(i),_=n===r?function(){return d}:St(r),M=i===o?function(){return p}:St(o);++y<x;)a.call(this,h=e[y],y)?(v.push([d=+b.call(this,h,y),p=+w.call(this,h,y)]),m.push([+_.call(this,h,y),+M.call(this,h,y)])):v.length&&(s(),v=[],m=[]);return v.length&&s(),g.length?g.join(""):null}var n=An,r=An,i=0,o=kn,a=Ce,u=so,s=u.key,l=u,c="L",f=.7;return e.x=function(t){return arguments.length?(n=r=t,e):r},e.x0=function(t){return arguments.length?(n=t,e):n},e.x1=function(t){return arguments.length?(r=t,e):r},e.y=function(t){return arguments.length?(i=o=t,e):o},e.y0=function(t){return arguments.length?(i=t,e):i},e.y1=function(t){return arguments.length?(o=t,e):o},e.defined=function(t){return arguments.length?(a=t,e):a},e.interpolate=function(t){return arguments.length?(s="function"==typeof t?u=t:(u=ls.get(t)||so).key,l=u.reverse||u,c=u.closed?"M":"L",e):s},e.tension=function(t){return arguments.length?(f=t,e):f},e}function Mo(t){return t.radius}function Ao(t){return[t.x,t.y]}function ko(t){return function(){var e=t.apply(this,arguments),n=e[0],r=e[1]-ba;return[n*Math.cos(r),n*Math.sin(r)]}}function So(){return 64}function To(){return"circle"}function Co(t){var e=Math.sqrt(t/ma);return"M0,"+e+"A"+e+","+e+" 0 1,1 0,"+-e+"A"+e+","+e+" 0 1,1 0,"+e+"Z"}function Do(t){return function(){var e,n,r;(e=this[t])&&(r=e[n=e.active])&&(r.timer.c=null,r.timer.t=NaN,--e.count?delete e[n]:delete this[t],e.active+=.5,r.event&&r.event.interrupt.call(this,this.__data__,r.index))}}function Eo(t,e,n){return ra(t,xs),t.namespace=e,t.id=n,t}function No(t,e,n,r){var i=t.id,o=t.namespace;return U(t,"function"==typeof n?function(t,a,u){t[o][i].tween.set(e,r(n.call(t,t.__data__,a,u)))}:(n=r(n),function(t){t[o][i].tween.set(e,n)}))}function Lo(t){return null==t&&(t=""),function(){this.textContent=t}}function Oo(t){return null==t?"__transition__":"__transition_"+t+"__"}function Ro(t,e,n,r,i){function o(n){var i=d.active,o=d[i];o&&(o.timer.c=null,o.timer.t=NaN,--d.count,delete d[i],o.event&&o.event.interrupt.call(t,t.__data__,o.index));for(var l in d)if(+l<r){var g=d[l];g.timer.c=null,g.timer.t=NaN,--d.count,delete d[l]}s.c=a,Nt(function(){return s.c&&a(n||1)&&(s.c=null,s.t=NaN),1},0,u),d.active=r,p.event&&p.event.start.call(t,t.__data__,e),h=[],p.tween.forEach(function(n,r){(r=r.call(t,t.__data__,e))&&h.push(r)}),f=p.ease,c=p.duration}function a(i){for(var o=i/c,a=f(o),u=h.length;u>0;)h[--u].call(t,a);if(o>=1)return p.event&&p.event.end.call(t,t.__data__,e),--d.count?delete d[r]:delete t[n],1}var u,s,c,f,h,d=t[n]||(t[n]={active:0,count:0}),p=d[r];p||(u=i.time,s=Nt(function(t){var e=p.delay;if(s.t=e+u,e<=t)return o(t-e);s.c=o},0,u),p=d[r]={tween:new l,time:u,timer:s,delay:i.delay,duration:i.duration,ease:i.ease,index:e},i=null,++d.count)}function jo(t,e,n){t.attr("transform",function(t){var r=e(t);return"translate("+(isFinite(r)?r:n(t))+",0)"})}function Po(t,e,n){t.attr("transform",function(t){var r=e(t);return"translate(0,"+(isFinite(r)?r:n(t))+")"})}function Fo(t){return t.toISOString()}function Io(t,e,n){function r(e){return t(e)}function i(t,n){var r=(t[1]-t[0])/n,i=qo.bisect(Cs,r);return i==Cs.length?[e.year,Hi(t.map(function(t){return t/31536e6}),n)[2]]:i?e[r/Cs[i-1]<Cs[i]/r?i-1:i]:[Ns,Hi(t,n)[2]]}return r.invert=function(e){return Yo(t.invert(e))},r.domain=function(e){return arguments.length?(t.domain(e),r):t.domain().map(Yo)},r.nice=function(t,e){function n(n){return!isNaN(n)&&!t.range(n,Yo(+n+1),e).length}var o=r.domain(),a=Ni(o),u=null==t?i(a,10):"number"==typeof t&&i(a,t);return u&&(t=u[0],e=u[1]),r.domain(Ri(o,e>1?{floor:function(e){for(;n(e=t.floor(e));)e=Yo(e-1);return e},ceil:function(e){for(;n(e=t.ceil(e));)e=Yo(+e+1);return e}}:t))},r.ticks=function(t,e){var n=Ni(r.domain()),o=null==t?i(n,10):"number"==typeof t?i(n,t):!t.range&&[{range:t},e];return o&&(t=o[0],e=o[1]),t.range(n[0],Yo(+n[1]+1),e<1?1:e)},r.tickFormat=function(){return n},r.copy=function(){return Io(t.copy(),e,n)},Ii(r,t)}function Yo(t){return new Date(t)}function Ho(t){return JSON.parse(t.responseText)}function $o(t){var e=Wo.createRange();return e.selectNode(Wo.body),e.createContextualFragment(t.responseText)}var qo={version:"3.5.17"},Uo=[].slice,zo=function(t){return Uo.call(t)},Wo=this.document;if(Wo)try{zo(Wo.documentElement.childNodes)[0].nodeType}catch(t){zo=function(t){for(var e=t.length,n=new Array(e);e--;)n[e]=t[e];return n}}if(Date.now||(Date.now=function(){return+new Date}),Wo)try{Wo.createElement("DIV").style.setProperty("opacity",0,"")}catch(t){var Bo=this.Element.prototype,Vo=Bo.setAttribute,Go=Bo.setAttributeNS,Xo=this.CSSStyleDeclaration.prototype,Zo=Xo.setProperty;Bo.setAttribute=function(t,e){Vo.call(this,t,e+"")},Bo.setAttributeNS=function(t,e,n){Go.call(this,t,e,n+"")},Xo.setProperty=function(t,e,n){Zo.call(this,t,e+"",n)}}qo.ascending=n,qo.descending=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},qo.min=function(t,e){var n,r,i=-1,o=t.length;if(1===arguments.length){for(;++i<o;)if(null!=(r=t[i])&&r>=r){n=r;break}for(;++i<o;)null!=(r=t[i])&&n>r&&(n=r)}else{for(;++i<o;)if(null!=(r=e.call(t,t[i],i))&&r>=r){n=r;break}for(;++i<o;)null!=(r=e.call(t,t[i],i))&&n>r&&(n=r)}return n},qo.max=function(t,e){var n,r,i=-1,o=t.length;if(1===arguments.length){for(;++i<o;)if(null!=(r=t[i])&&r>=r){n=r;break}for(;++i<o;)null!=(r=t[i])&&r>n&&(n=r)}else{for(;++i<o;)if(null!=(r=e.call(t,t[i],i))&&r>=r){n=r;break}for(;++i<o;)null!=(r=e.call(t,t[i],i))&&r>n&&(n=r)}return n},qo.extent=function(t,e){var n,r,i,o=-1,a=t.length;if(1===arguments.length){for(;++o<a;)if(null!=(r=t[o])&&r>=r){n=i=r;break}for(;++o<a;)null!=(r=t[o])&&(n>r&&(n=r),i<r&&(i=r))}else{for(;++o<a;)if(null!=(r=e.call(t,t[o],o))&&r>=r){n=i=r;break}for(;++o<a;)null!=(r=e.call(t,t[o],o))&&(n>r&&(n=r),i<r&&(i=r))}return[n,i]},qo.sum=function(t,e){var n,r=0,o=t.length,a=-1;if(1===arguments.length)for(;++a<o;)i(n=+t[a])&&(r+=n);else for(;++a<o;)i(n=+e.call(t,t[a],a))&&(r+=n);return r},qo.mean=function(t,e){var n,o=0,a=t.length,u=-1,s=a;if(1===arguments.length)for(;++u<a;)i(n=r(t[u]))?o+=n:--s;else for(;++u<a;)i(n=r(e.call(t,t[u],u)))?o+=n:--s;if(s)return o/s},qo.quantile=function(t,e){var n=(t.length-1)*e+1,r=Math.floor(n),i=+t[r-1],o=n-r;return o?i+o*(t[r]-i):i},qo.median=function(t,e){var o,a=[],u=t.length,s=-1;if(1===arguments.length)for(;++s<u;)i(o=r(t[s]))&&a.push(o);else for(;++s<u;)i(o=r(e.call(t,t[s],s)))&&a.push(o);if(a.length)return qo.quantile(a.sort(n),.5)},qo.variance=function(t,e){var n,o,a=t.length,u=0,s=0,l=-1,c=0;if(1===arguments.length)for(;++l<a;)i(n=r(t[l]))&&(s+=(o=n-u)*(n-(u+=o/++c)));else for(;++l<a;)i(n=r(e.call(t,t[l],l)))&&(s+=(o=n-u)*(n-(u+=o/++c)));if(c>1)return s/(c-1)},qo.deviation=function(){var t=qo.variance.apply(this,arguments);return t?Math.sqrt(t):t};var Ko=o(n);qo.bisectLeft=Ko.left,qo.bisect=qo.bisectRight=Ko.right,qo.bisector=function(t){return o(1===t.length?function(e,r){return n(t(e),r)}:t)},qo.shuffle=function(t,e,n){(o=arguments.length)<3&&(n=t.length,o<2&&(e=0));for(var r,i,o=n-e;o;)i=Math.random()*o--|0,r=t[o+e],t[o+e]=t[i+e],t[i+e]=r;return t},qo.permute=function(t,e){for(var n=e.length,r=new Array(n);n--;)r[n]=t[e[n]];return r},qo.pairs=function(t){for(var e=0,n=t.length-1,r=t[0],i=new Array(n<0?0:n);e<n;)i[e]=[r,r=t[++e]];return i},qo.transpose=function(t){if(!(i=t.length))return[];for(var e=-1,n=qo.min(t,a),r=new Array(n);++e<n;)for(var i,o=-1,u=r[e]=new Array(i);++o<i;)u[o]=t[o][e];return r},qo.zip=function(){return qo.transpose(arguments)},qo.keys=function(t){var e=[];for(var n in t)e.push(n);return e},qo.values=function(t){var e=[];for(var n in t)e.push(t[n]);return e},qo.entries=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e},qo.merge=function(t){for(var e,n,r,i=t.length,o=-1,a=0;++o<i;)a+=t[o].length;for(n=new Array(a);--i>=0;)for(e=(r=t[i]).length;--e>=0;)n[--a]=r[e];return n};var Qo=Math.abs;qo.range=function(t,e,n){if(arguments.length<3&&(n=1,arguments.length<2&&(e=t,t=0)),(e-t)/n==1/0)throw new Error("infinite range");var r,i=[],o=u(Qo(n)),a=-1;if(t*=o,e*=o,(n*=o)<0)for(;(r=t+n*++a)>e;)i.push(r/o);else for(;(r=t+n*++a)<e;)i.push(r/o);return i},qo.map=function(t,e){var n=new l;if(t instanceof l)t.forEach(function(t,e){n.set(t,e)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(1===arguments.length)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e.call(t,r=t[i],i),r)}else for(var a in t)n.set(a,t[a]);return n};var Jo="__proto__",ta="\0";s(l,{has:h,get:function(t){return this._[c(t)]},set:function(t,e){return this._[c(t)]=e},remove:d,keys:p,values:function(){var t=[];for(var e in this._)t.push(this._[e]);return t},entries:function(){var t=[];for(var e in this._)t.push({key:f(e),value:this._[e]});return t},size:g,empty:v,forEach:function(t){for(var e in this._)t.call(this,f(e),this._[e])}}),qo.nest=function(){function t(e,a,u){if(u>=o.length)return r?r.call(i,a):n?a.sort(n):a;for(var s,c,f,h,d=-1,p=a.length,g=o[u++],v=new l;++d<p;)(h=v.get(s=g(c=a[d])))?h.push(c):v.set(s,[c]);return e?(c=e(),f=function(n,r){c.set(n,t(e,r,u))}):(c={},f=function(n,r){c[n]=t(e,r,u)}),v.forEach(f),c}function e(t,n){if(n>=o.length)return t;var r=[],i=a[n++];return t.forEach(function(t,i){r.push({key:t,values:e(i,n)})}),i?r.sort(function(t,e){return i(t.key,e.key)}):r}var n,r,i={},o=[],a=[];return i.map=function(e,n){return t(n,e,0)},i.entries=function(n){return e(t(qo.map,n,0),0)},i.key=function(t){return o.push(t),i},i.sortKeys=function(t){return a[o.length-1]=t,i},i.sortValues=function(t){return n=t,i},i.rollup=function(t){return r=t,i},i},qo.set=function(t){var e=new m;if(t)for(var n=0,r=t.length;n<r;++n)e.add(t[n]);return e},s(m,{has:h,add:function(t){return this._[c(t+="")]=!0,t},remove:d,values:p,size:g,empty:v,forEach:function(t){for(var e in this._)t.call(this,f(e))}}),qo.behavior={},qo.rebind=function(t,e){for(var n,r=1,i=arguments.length;++r<i;)t[n=arguments[r]]=x(t,e,e[n]);return t};var ea=["webkit","ms","moz","Moz","o","O"];qo.dispatch=function(){for(var t=new _,e=-1,n=arguments.length;++e<n;)t[arguments[e]]=M(t);return t},_.prototype.on=function(t,e){var n=t.indexOf("."),r="";if(n>=0&&(r=t.slice(n+1),t=t.slice(0,n)),t)return arguments.length<2?this[t].on(r):this[t].on(r,e);if(2===arguments.length){if(null==e)for(t in this)this.hasOwnProperty(t)&&this[t].on(r,null);return this}},qo.event=null,qo.requote=function(t){return t.replace(na,"\\$&")};var na=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,ra={}.__proto__?function(t,e){t.__proto__=e}:function(t,e){for(var n in e)t[n]=e[n]},ia=function(t,e){return e.querySelector(t)},oa=function(t,e){return e.querySelectorAll(t)},aa=function(t,e){var n=t.matches||t[b(t,"matchesSelector")];return(aa=function(t,e){return n.call(t,e)})(t,e)};"function"==typeof Sizzle&&(ia=function(t,e){return Sizzle(t,e)[0]||null},oa=Sizzle,aa=Sizzle.matchesSelector),qo.selection=function(){return qo.select(Wo.documentElement)};var ua=qo.selection.prototype=[];ua.select=function(t){var e,n,r,i,o=[];t=C(t);for(var a=-1,u=this.length;++a<u;){o.push(e=[]),e.parentNode=(r=this[a]).parentNode;for(var s=-1,l=r.length;++s<l;)(i=r[s])?(e.push(n=t.call(i,i.__data__,s,a)),n&&"__data__"in i&&(n.__data__=i.__data__)):e.push(null)}return T(o)},ua.selectAll=function(t){var e,n,r=[];t=D(t);for(var i=-1,o=this.length;++i<o;)for(var a=this[i],u=-1,s=a.length;++u<s;)(n=a[u])&&(r.push(e=zo(t.call(n,n.__data__,u,i))),e.parentNode=n);return T(r)};var sa="http://www.w3.org/1999/xhtml",la={svg:"http://www.w3.org/2000/svg",xhtml:sa,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};qo.ns={prefix:la,qualify:function(t){var e=t.indexOf(":"),n=t;return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),la.hasOwnProperty(n)?{space:la[n],local:t}:t}},ua.attr=function(t,e){if(arguments.length<2){if("string"==typeof t){var n=this.node();return(t=qo.ns.qualify(t)).local?n.getAttributeNS(t.space,t.local):n.getAttribute(t)}for(e in t)this.each(E(e,t[e]));return this}return this.each(E(t,e))},ua.classed=function(t,e){if(arguments.length<2){if("string"==typeof t){var n=this.node(),r=(t=O(t)).length,i=-1;if(e=n.classList){for(;++i<r;)if(!e.contains(t[i]))return!1}else for(e=n.getAttribute("class");++i<r;)if(!L(t[i]).test(e))return!1;return!0}for(e in t)this.each(R(e,t[e]));return this}return this.each(R(t,e))},ua.style=function(t,n,r){var i=arguments.length;if(i<3){if("string"!=typeof t){i<2&&(n="");for(r in t)this.each(P(r,t[r],n));return this}if(i<2){var o=this.node();return e(o).getComputedStyle(o,null).getPropertyValue(t)}r=""}return this.each(P(t,n,r))},ua.property=function(t,e){if(arguments.length<2){if("string"==typeof t)return this.node()[t];for(e in t)this.each(F(e,t[e]));return this}return this.each(F(t,e))},ua.text=function(t){return arguments.length?this.each("function"==typeof t?function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}:null==t?function(){this.textContent=""}:function(){this.textContent=t}):this.node().textContent},ua.html=function(t){return arguments.length?this.each("function"==typeof t?function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}:null==t?function(){this.innerHTML=""}:function(){this.innerHTML=t}):this.node().innerHTML},ua.append=function(t){return t=I(t),this.select(function(){return this.appendChild(t.apply(this,arguments))})},ua.insert=function(t,e){return t=I(t),e=C(e),this.select(function(){return this.insertBefore(t.apply(this,arguments),e.apply(this,arguments)||null)})},ua.remove=function(){return this.each(Y)},ua.data=function(t,e){function n(t,n){var r,i,o,a=t.length,f=n.length,h=Math.min(a,f),d=new Array(f),p=new Array(f),g=new Array(a);if(e){var v,m=new l,y=new Array(a);for(r=-1;++r<a;)(i=t[r])&&(m.has(v=e.call(i,i.__data__,r))?g[r]=i:m.set(v,i),y[r]=v);for(r=-1;++r<f;)(i=m.get(v=e.call(n,o=n[r],r)))?!0!==i&&(d[r]=i,i.__data__=o):p[r]=H(o),m.set(v,!0);for(r=-1;++r<a;)r in y&&!0!==m.get(y[r])&&(g[r]=t[r])}else{for(r=-1;++r<h;)i=t[r],o=n[r],i?(i.__data__=o,d[r]=i):p[r]=H(o);for(;r<f;++r)p[r]=H(n[r]);for(;r<a;++r)g[r]=t[r]}p.update=d,p.parentNode=d.parentNode=g.parentNode=t.parentNode,u.push(p),s.push(d),c.push(g)}var r,i,o=-1,a=this.length;if(!arguments.length){for(t=new Array(a=(r=this[0]).length);++o<a;)(i=r[o])&&(t[o]=i.__data__);return t}var u=z([]),s=T([]),c=T([]);if("function"==typeof t)for(;++o<a;)n(r=this[o],t.call(r,r.parentNode.__data__,o));else for(;++o<a;)n(r=this[o],t);return s.enter=function(){return u},s.exit=function(){return c},s},ua.datum=function(t){return arguments.length?this.property("__data__",t):this.property("__data__")},ua.filter=function(t){var e,n,r,i=[];"function"!=typeof t&&(t=$(t));for(var o=0,a=this.length;o<a;o++){i.push(e=[]),e.parentNode=(n=this[o]).parentNode;for(var u=0,s=n.length;u<s;u++)(r=n[u])&&t.call(r,r.__data__,u,o)&&e.push(r)}return T(i)},ua.order=function(){for(var t=-1,e=this.length;++t<e;)for(var n,r=this[t],i=r.length-1,o=r[i];--i>=0;)(n=r[i])&&(o&&o!==n.nextSibling&&o.parentNode.insertBefore(n,o),o=n);return this},ua.sort=function(t){t=q.apply(this,arguments);for(var e=-1,n=this.length;++e<n;)this[e].sort(t);return this.order()},ua.each=function(t){return U(this,function(e,n,r){t.call(e,e.__data__,n,r)})},ua.call=function(t){var e=zo(arguments);return t.apply(e[0]=this,e),this},ua.empty=function(){return!this.node()},ua.node=function(){for(var t=0,e=this.length;t<e;t++)for(var n=this[t],r=0,i=n.length;r<i;r++){var o=n[r];if(o)return o}return null},ua.size=function(){var t=0;return U(this,function(){++t}),t};var ca=[];qo.selection.enter=z,qo.selection.enter.prototype=ca,ca.append=ua.append,ca.empty=ua.empty,ca.node=ua.node,ca.call=ua.call,ca.size=ua.size,ca.select=function(t){for(var e,n,r,i,o,a=[],u=-1,s=this.length;++u<s;){r=(i=this[u]).update,a.push(e=[]),e.parentNode=i.parentNode;for(var l=-1,c=i.length;++l<c;)(o=i[l])?(e.push(r[l]=n=t.call(i.parentNode,o.__data__,l,u)),n.__data__=o.__data__):e.push(null)}return T(a)},ca.insert=function(t,e){return arguments.length<2&&(e=W(this)),ua.insert.call(this,t,e)},qo.select=function(e){var n;return"string"==typeof e?(n=[ia(e,Wo)]).parentNode=Wo.documentElement:(n=[e]).parentNode=t(e),T([n])},qo.selectAll=function(t){var e;return"string"==typeof t?(e=zo(oa(t,Wo))).parentNode=Wo.documentElement:(e=zo(t)).parentNode=null,T([e])},ua.on=function(t,e,n){var r=arguments.length;if(r<3){if("string"!=typeof t){r<2&&(e=!1);for(n in t)this.each(B(n,t[n],e));return this}if(r<2)return(r=this.node()["__on"+t])&&r._;n=!1}return this.each(B(t,e,n))};var fa=qo.map({mouseenter:"mouseover",mouseleave:"mouseout"});Wo&&fa.forEach(function(t){"on"+t in Wo&&fa.remove(t)});var ha,da=0;qo.mouse=function(t){return Z(t,k())};var pa=this.navigator&&/WebKit/.test(this.navigator.userAgent)?-1:0;qo.touch=function(t,e,n){if(arguments.length<3&&(n=e,e=k().changedTouches),e)for(var r,i=0,o=e.length;i<o;++i)if((r=e[i]).identifier===n)return Z(t,r)},qo.behavior.drag=function(){function t(){this.on("mousedown.drag",o).on("touchstart.drag",a)}function n(t,e,n,o,a){return function(){var u,s=this,l=qo.event.target.correspondingElement||qo.event.target,c=s.parentNode,f=r.of(s,arguments),h=0,d=t(),p=".drag"+(null==d?"":"-"+d),g=qo.select(n(l)).on(o+p,function(){var t,n,r=e(c,d);r&&(t=r[0]-m[0],n=r[1]-m[1],h|=t|n,m=r,f({type:"drag",x:r[0]+u[0],y:r[1]+u[1],dx:t,dy:n}))}).on(a+p,function(){e(c,d)&&(g.on(o+p,null).on(a+p,null),v(h),f({type:"dragend"}))}),v=X(l),m=e(c,d);i?(u=i.apply(s,arguments),u=[u.x-m[0],u.y-m[1]]):u=[0,0],f({type:"dragstart"})}}var r=S(t,"drag","dragstart","dragend"),i=null,o=n(w,qo.mouse,e,"mousemove","mouseup"),a=n(K,qo.touch,y,"touchmove","touchend");return t.origin=function(e){return arguments.length?(i=e,t):i},qo.rebind(t,r,"on")},qo.touches=function(t,e){return arguments.length<2&&(e=k().touches),e?zo(e).map(function(e){var n=Z(t,e);return n.identifier=e.identifier,n}):[]};var ga=1e-6,va=ga*ga,ma=Math.PI,ya=2*ma,xa=ya-ga,ba=ma/2,wa=ma/180,_a=180/ma,Ma=Math.SQRT2;qo.interpolateZoom=function(t,e){var n,r,i=t[0],o=t[1],a=t[2],u=e[0],s=e[1],l=e[2],c=u-i,f=s-o,h=c*c+f*f;if(h<va)r=Math.log(l/a)/Ma,n=function(t){return[i+t*c,o+t*f,a*Math.exp(Ma*t*r)]};else{var d=Math.sqrt(h),p=(l*l-a*a+4*h)/(2*a*2*d),g=(l*l-a*a-4*h)/(2*l*2*d),v=Math.log(Math.sqrt(p*p+1)-p),m=Math.log(Math.sqrt(g*g+1)-g);r=(m-v)/Ma,n=function(t){var e=t*r,n=rt(v),u=a/(2*d)*(n*it(Ma*e+v)-nt(v));return[i+u*c,o+u*f,a*n/rt(Ma*e+v)]}}return n.duration=1e3*r,n},qo.behavior.zoom=function(){function t(t){t.on(N,f).on(ka+".zoom",d).on("dblclick.zoom",p).on(R,h)}function n(t){return[(t[0]-k.x)/k.k,(t[1]-k.y)/k.k]}function r(t){return[t[0]*k.k+k.x,t[1]*k.k+k.y]}function i(t){k.k=Math.max(C[0],Math.min(C[1],t))}function o(t,e){e=r(e),k.x+=t[0]-e[0],k.y+=t[1]-e[1]}function a(e,n,r,a){e.__chart__={x:k.x,y:k.y,k:k.k},i(Math.pow(2,a)),o(v=n,r),e=qo.select(e),D>0&&(e=e.transition().duration(D)),e.call(t.event)}function u(){w&&w.domain(b.range().map(function(t){return(t-k.x)/k.k}).map(b.invert)),M&&M.domain(_.range().map(function(t){return(t-k.y)/k.k}).map(_.invert))}function s(t){E++||t({type:"zoomstart"})}function l(t){u(),t({type:"zoom",scale:k.k,translate:[k.x,k.y]})}function c(t){--E||(t({type:"zoomend"}),v=null)}function f(){var t=this,r=j.of(t,arguments),i=0,a=qo.select(e(t)).on(L,function(){i=1,o(qo.mouse(t),u),l(r)}).on(O,function(){a.on(L,null).on(O,null),f(i),c(r)}),u=n(qo.mouse(t)),f=X(t);ys.call(t),s(r)}function h(){function t(){var t=qo.touches(p);return d=k.k,t.forEach(function(t){t.identifier in v&&(v[t.identifier]=n(t))}),t}function e(){var e=qo.event.target;qo.select(e).on(b,r).on(w,u),_.push(e);for(var n=qo.event.changedTouches,i=0,o=n.length;i<o;++i)v[n[i].identifier]=null;var s=t(),l=Date.now();if(1===s.length){if(l-x<500){c=s[0];a(p,c,v[c.identifier],Math.floor(Math.log(k.k)/Math.LN2)+1),A()}x=l}else if(s.length>1){var c=s[0],f=s[1],h=c[0]-f[0],d=c[1]-f[1];m=h*h+d*d}}function r(){var t,e,n,r,a=qo.touches(p);ys.call(p);for(var u=0,s=a.length;u<s;++u,r=null)if(n=a[u],r=v[n.identifier]){if(e)break;t=n,e=r}if(r){var c=(c=n[0]-t[0])*c+(c=n[1]-t[1])*c,f=m&&Math.sqrt(c/m);t=[(t[0]+n[0])/2,(t[1]+n[1])/2],e=[(e[0]+r[0])/2,(e[1]+r[1])/2],i(f*d)}x=null,o(t,e),l(g)}function u(){if(qo.event.touches.length){for(var e=qo.event.changedTouches,n=0,r=e.length;n<r;++n)delete v[e[n].identifier];for(var i in v)return void t()}qo.selectAll(_).on(y,null),M.on(N,f).on(R,h),S(),c(g)}var d,p=this,g=j.of(p,arguments),v={},m=0,y=".zoom-"+qo.event.changedTouches[0].identifier,b="touchmove"+y,w="touchend"+y,_=[],M=qo.select(p),S=X(p);e(),s(g),M.on(N,null).on(R,e)}function d(){var t=j.of(this,arguments);y?clearTimeout(y):(ys.call(this),g=n(v=m||qo.mouse(this)),s(t)),y=setTimeout(function(){y=null,c(t)},50),A(),i(Math.pow(2,.002*Aa())*k.k),o(v,g),l(t)}function p(){var t=qo.mouse(this),e=Math.log(k.k)/Math.LN2;a(this,t,n(t),qo.event.shiftKey?Math.ceil(e)-1:Math.floor(e)+1)}var g,v,m,y,x,b,w,_,M,k={x:0,y:0,k:1},T=[960,500],C=Sa,D=250,E=0,N="mousedown.zoom",L="mousemove.zoom",O="mouseup.zoom",R="touchstart.zoom",j=S(t,"zoomstart","zoom","zoomend");return ka||(ka="onwheel"in Wo?(Aa=function(){return-qo.event.deltaY*(qo.event.deltaMode?120:1)},"wheel"):"onmousewheel"in Wo?(Aa=function(){return qo.event.wheelDelta},"mousewheel"):(Aa=function(){return-qo.event.detail},"MozMousePixelScroll")),t.event=function(t){t.each(function(){var t=j.of(this,arguments),e=k;vs?qo.select(this).transition().each("start.zoom",function(){k=this.__chart__||{x:0,y:0,k:1},s(t)}).tween("zoom:zoom",function(){var n=T[0],r=T[1],i=v?v[0]:n/2,o=v?v[1]:r/2,a=qo.interpolateZoom([(i-k.x)/k.k,(o-k.y)/k.k,n/k.k],[(i-e.x)/e.k,(o-e.y)/e.k,n/e.k]);return function(e){var r=a(e),u=n/r[2];this.__chart__=k={x:i-r[0]*u,y:o-r[1]*u,k:u},l(t)}}).each("interrupt.zoom",function(){c(t)}).each("end.zoom",function(){c(t)}):(this.__chart__=k,s(t),l(t),c(t))})},t.translate=function(e){return arguments.length?(k={x:+e[0],y:+e[1],k:k.k},u(),t):[k.x,k.y]},t.scale=function(e){return arguments.length?(k={x:k.x,y:k.y,k:null},i(+e),u(),t):k.k},t.scaleExtent=function(e){return arguments.length?(C=null==e?Sa:[+e[0],+e[1]],t):C},t.center=function(e){return arguments.length?(m=e&&[+e[0],+e[1]],t):m},t.size=function(e){return arguments.length?(T=e&&[+e[0],+e[1]],t):T},t.duration=function(e){return arguments.length?(D=+e,t):D},t.x=function(e){return arguments.length?(w=e,b=e.copy(),k={x:0,y:0,k:1},t):w},t.y=function(e){return arguments.length?(M=e,_=e.copy(),k={x:0,y:0,k:1},t):M},qo.rebind(t,j,"on")};var Aa,ka,Sa=[0,1/0];qo.color=at,at.prototype.toString=function(){return this.rgb()+""},qo.hsl=ut;var Ta=ut.prototype=new at;Ta.brighter=function(t){return t=Math.pow(.7,arguments.length?t:1),new ut(this.h,this.s,this.l/t)},Ta.darker=function(t){return t=Math.pow(.7,arguments.length?t:1),new ut(this.h,this.s,t*this.l)},Ta.rgb=function(){return st(this.h,this.s,this.l)},qo.hcl=lt;var Ca=lt.prototype=new at;Ca.brighter=function(t){return new lt(this.h,this.c,Math.min(100,this.l+Da*(arguments.length?t:1)))},Ca.darker=function(t){return new lt(this.h,this.c,Math.max(0,this.l-Da*(arguments.length?t:1)))},Ca.rgb=function(){return ct(this.h,this.c,this.l).rgb()},qo.lab=ft;var Da=18,Ea=.95047,Na=1,La=1.08883,Oa=ft.prototype=new at;Oa.brighter=function(t){return new ft(Math.min(100,this.l+Da*(arguments.length?t:1)),this.a,this.b)},Oa.darker=function(t){return new ft(Math.max(0,this.l-Da*(arguments.length?t:1)),this.a,this.b)},Oa.rgb=function(){return ht(this.l,this.a,this.b)},qo.rgb=mt;var Ra=mt.prototype=new at;Ra.brighter=function(t){t=Math.pow(.7,arguments.length?t:1);var e=this.r,n=this.g,r=this.b,i=30;return e||n||r?(e&&e<i&&(e=i),n&&n<i&&(n=i),r&&r<i&&(r=i),new mt(Math.min(255,e/t),Math.min(255,n/t),Math.min(255,r/t))):new mt(i,i,i)},Ra.darker=function(t){return t=Math.pow(.7,arguments.length?t:1),new mt(t*this.r,t*this.g,t*this.b)},Ra.hsl=function(){return _t(this.r,this.g,this.b)},Ra.toString=function(){return"#"+bt(this.r)+bt(this.g)+bt(this.b)};var ja=qo.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});ja.forEach(function(t,e){ja.set(t,yt(e))}),qo.functor=St,qo.xhr=Tt(y),qo.dsv=function(t,e){function n(t,n,o){arguments.length<3&&(o=n,n=null);var a=Ct(t,e,null==n?r:i(n),o);return a.row=function(t){return arguments.length?a.response(null==(n=t)?r:i(t)):n},a}function r(t){return n.parse(t.responseText)}function i(t){return function(e){return n.parse(e.responseText,t)}}function o(e){return e.map(a).join(t)}function a(t){return u.test(t)?'"'+t.replace(/\"/g,'""')+'"':t}var u=new RegExp('["'+t+"\n]"),s=t.charCodeAt(0);return n.parse=function(t,e){var r;return n.parseRows(t,function(t,n){if(r)return r(t,n-1);var i=new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}");r=e?function(t,n){return e(i(t),n)}:i})},n.parseRows=function(t,e){function n(){if(c>=l)return a;if(i)return i=!1,o;var e=c;if(34===t.charCodeAt(e)){for(var n=e;n++<l;)if(34===t.charCodeAt(n)){if(34!==t.charCodeAt(n+1))break;++n}return c=n+2,13===(r=t.charCodeAt(n+1))?(i=!0,10===t.charCodeAt(n+2)&&++c):10===r&&(i=!0),t.slice(e+1,n).replace(/""/g,'"')}for(;c<l;){var r=t.charCodeAt(c++),u=1;if(10===r)i=!0;else if(13===r)i=!0,10===t.charCodeAt(c)&&(++c,++u);else if(r!==s)continue;return t.slice(e,c-u)}return t.slice(e)}for(var r,i,o={},a={},u=[],l=t.length,c=0,f=0;(r=n())!==a;){for(var h=[];r!==o&&r!==a;)h.push(r),r=n();e&&null==(h=e(h,f++))||u.push(h)}return u},n.format=function(e){if(Array.isArray(e[0]))return n.formatRows(e);var r=new m,i=[];return e.forEach(function(t){for(var e in t)r.has(e)||i.push(r.add(e))}),[i.map(a).join(t)].concat(e.map(function(e){return i.map(function(t){return a(e[t])}).join(t)})).join("\n")},n.formatRows=function(t){return t.map(o).join("\n")},n},qo.csv=qo.dsv(",","text/csv"),qo.tsv=qo.dsv("\t","text/tab-separated-values");var Pa,Fa,Ia,Ya,Ha=this[b(this,"requestAnimationFrame")]||function(t){setTimeout(t,17)};qo.timer=function(){Nt.apply(this,arguments)},qo.timer.flush=function(){Ot(),Rt()},qo.round=function(t,e){return e?Math.round(t*(e=Math.pow(10,e)))/e:Math.round(t)};var $a=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"].map(function(t,e){var n=Math.pow(10,3*Qo(8-e));return{scale:e>8?function(t){return t/n}:function(t){return t*n},symbol:t}});qo.formatPrefix=function(t,e){var n=0;return(t=+t)&&(t<0&&(t*=-1),e&&(t=qo.round(t,jt(t,e))),n=1+Math.floor(1e-12+Math.log(t)/Math.LN10),n=Math.max(-24,Math.min(24,3*Math.floor((n-1)/3)))),$a[8+n/3]};var qa=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,Ua=qo.map({b:function(t){return t.toString(2)},c:function(t){return String.fromCharCode(t)},o:function(t){return t.toString(8)},x:function(t){return t.toString(16)},X:function(t){return t.toString(16).toUpperCase()},g:function(t,e){return t.toPrecision(e)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},r:function(t,e){return(t=qo.round(t,jt(t,e))).toFixed(Math.max(0,Math.min(20,jt(t*(1+1e-15),e))))}}),za=qo.time={},Wa=Date;It.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){Ba.setUTCDate.apply(this._,arguments)},setDay:function(){Ba.setUTCDay.apply(this._,arguments)},setFullYear:function(){Ba.setUTCFullYear.apply(this._,arguments)},setHours:function(){Ba.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){Ba.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){Ba.setUTCMinutes.apply(this._,arguments)},setMonth:function(){Ba.setUTCMonth.apply(this._,arguments)},setSeconds:function(){Ba.setUTCSeconds.apply(this._,arguments)},setTime:function(){Ba.setTime.apply(this._,arguments)}};var Ba=Date.prototype;za.year=Yt(function(t){return(t=za.day(t)).setMonth(0,1),t},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t){return t.getFullYear()}),za.years=za.year.range,za.years.utc=za.year.utc.range,za.day=Yt(function(t){var e=new Wa(2e3,0);return e.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),e},function(t,e){t.setDate(t.getDate()+e)},function(t){return t.getDate()-1}),za.days=za.day.range,za.days.utc=za.day.utc.range,za.dayOfYear=function(t){var e=za.year(t);return Math.floor((t-e-6e4*(t.getTimezoneOffset()-e.getTimezoneOffset()))/864e5)},["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].forEach(function(t,e){e=7-e;var n=za[t]=Yt(function(t){return(t=za.day(t)).setDate(t.getDate()-(t.getDay()+e)%7),t},function(t,e){t.setDate(t.getDate()+7*Math.floor(e))},function(t){var n=za.year(t).getDay();return Math.floor((za.dayOfYear(t)+(n+e)%7)/7)-(n!==e)});za[t+"s"]=n.range,za[t+"s"].utc=n.utc.range,za[t+"OfYear"]=function(t){var n=za.year(t).getDay();return Math.floor((za.dayOfYear(t)+(n+e)%7)/7)}}),za.week=za.sunday,za.weeks=za.sunday.range,za.weeks.utc=za.sunday.utc.range,za.weekOfYear=za.sundayOfYear;var Va={"-":"",_:" ",0:"0"},Ga=/^\s*\d+/,Xa=/^%/;qo.locale=function(t){return{numberFormat:Pt(t),timeFormat:$t(t)}};var Za=qo.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});qo.format=Za.numberFormat,qo.geo={},se.prototype={s:0,t:0,add:function(t){le(t,this.t,Ka),le(Ka.s,this.s,this),this.s?this.t+=Ka.t:this.s=Ka.t},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var Ka=new se;qo.geo.stream=function(t,e){t&&Qa.hasOwnProperty(t.type)?Qa[t.type](t,e):ce(t,e)};var Qa={Feature:function(t,e){ce(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,i=n.length;++r<i;)ce(n[r].geometry,e)}},Ja={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)t=n[r],e.point(t[0],t[1],t[2])},LineString:function(t,e){fe(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)fe(n[r],e,0)},Polygon:function(t,e){he(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)he(n[r],e)},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,i=n.length;++r<i;)ce(n[r],e)}};qo.geo.area=function(t){return tu=0,qo.geo.stream(t,nu),tu};var tu,eu=new se,nu={sphere:function(){tu+=4*ma},point:w,lineStart:w,lineEnd:w,polygonStart:function(){eu.reset(),nu.lineStart=de},polygonEnd:function(){var t=2*eu;tu+=t<0?4*ma+t:t,nu.lineStart=nu.lineEnd=nu.point=w}};qo.geo.bounds=function(){function t(t,e){x.push(b=[c=t,h=t]),e<f&&(f=e),e>d&&(d=e)}function e(e,n){var r=pe([e*wa,n*wa]);if(m){var i=ve(m,r),o=ve([i[1],-i[0],0],i);xe(o),o=be(o);var a=e-p,s=a>0?1:-1,l=o[0]*_a*s,g=Qo(a)>180;if(g^(s*p<l&&l<s*e))(v=o[1]*_a)>d&&(d=v);else if(l=(l+360)%360-180,g^(s*p<l&&l<s*e)){var v=-o[1]*_a;v<f&&(f=v)}else n<f&&(f=n),n>d&&(d=n);g?e<p?u(c,e)>u(c,h)&&(h=e):u(e,h)>u(c,h)&&(c=e):h>=c?(e<c&&(c=e),e>h&&(h=e)):e>p?u(c,e)>u(c,h)&&(h=e):u(e,h)>u(c,h)&&(c=e)}else t(e,n);m=r,p=e}function n(){w.point=e}function r(){b[0]=c,b[1]=h,w.point=t,m=null}function i(t,n){if(m){var r=t-p;y+=Qo(r)>180?r+(r>0?360:-360):r}else g=t,v=n;nu.point(t,n),e(t,n)}function o(){nu.lineStart()}function a(){i(g,v),nu.lineEnd(),Qo(y)>ga&&(c=-(h=180)),b[0]=c,b[1]=h,m=null}function u(t,e){return(e-=t)<0?e+360:e}function s(t,e){return t[0]-e[0]}function l(t,e){return e[0]<=e[1]?e[0]<=t&&t<=e[1]:t<e[0]||e[1]<t}var c,f,h,d,p,g,v,m,y,x,b,w={point:t,lineStart:n,lineEnd:r,polygonStart:function(){w.point=i,w.lineStart=o,w.lineEnd=a,y=0,nu.polygonStart()},polygonEnd:function(){nu.polygonEnd(),w.point=t,w.lineStart=n,w.lineEnd=r,eu<0?(c=-(h=180),f=-(d=90)):y>ga?d=90:y<-ga&&(f=-90),b[0]=c,b[1]=h}};return function(t){d=h=-(c=f=1/0),x=[],qo.geo.stream(t,w);var e=x.length;if(e){x.sort(s);for(var n=1,r=[p=x[0]];n<e;++n)l((o=x[n])[0],p)||l(o[1],p)?(u(p[0],o[1])>u(p[0],p[1])&&(p[1]=o[1]),u(o[0],p[1])>u(p[0],p[1])&&(p[0]=o[0])):r.push(p=o);for(var i,o,a=-1/0,n=0,p=r[e=r.length-1];n<=e;p=o,++n)o=r[n],(i=u(p[1],o[0]))>a&&(a=i,c=o[0],h=p[1])}return x=b=null,c===1/0||f===1/0?[[NaN,NaN],[NaN,NaN]]:[[c,f],[h,d]]}}(),qo.geo.centroid=function(t){ru=iu=ou=au=uu=su=lu=cu=fu=hu=du=0,qo.geo.stream(t,pu);var e=fu,n=hu,r=du,i=e*e+n*n+r*r;return i<va&&(e=su,n=lu,r=cu,iu<ga&&(e=ou,n=au,r=uu),(i=e*e+n*n+r*r)<va)?[NaN,NaN]:[Math.atan2(n,e)*_a,et(r/Math.sqrt(i))*_a]};var ru,iu,ou,au,uu,su,lu,cu,fu,hu,du,pu={sphere:w,point:_e,lineStart:Ae,lineEnd:ke,polygonStart:function(){pu.lineStart=Se},polygonEnd:function(){pu.lineStart=Ae}},gu=Le(Ce,function(t){var e,n=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(o,a){var u=o>0?ma:-ma,s=Qo(o-n);Qo(s-ma)<ga?(t.point(n,r=(r+a)/2>0?ba:-ba),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(o,r),e=0):i!==u&&s>=ma&&(Qo(n-i)<ga&&(n-=i*ga),Qo(o-u)<ga&&(o-=u*ga),r=Pe(n,r,o,a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),e=0),t.point(n=o,r=a),i=u},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}},function(t,e,n,r){var i;if(null==t)i=n*ba,r.point(-ma,i),r.point(0,i),r.point(ma,i),r.point(ma,0),r.point(ma,-i),r.point(0,-i),r.point(-ma,-i),r.point(-ma,0),r.point(-ma,i);else if(Qo(t[0]-e[0])>ga){var o=t[0]<e[0]?ma:-ma;i=n*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(e[0],e[1])},[-ma,-ma/2]),vu=1e9;qo.geo.clipExtent=function(){var t,e,n,r,i,o,a={stream:function(t){return i&&(i.valid=!1),i=o(t),i.valid=!0,i},extent:function(u){return arguments.length?(o=He(t=+u[0][0],e=+u[0][1],n=+u[1][0],r=+u[1][1]),i&&(i.valid=!1,i=null),a):[[t,e],[n,r]]}};return a.extent([[0,0],[960,500]])},(qo.geo.conicEqualArea=function(){return $e(qe)}).raw=qe,qo.geo.albers=function(){return qo.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},qo.geo.albersUsa=function(){function t(t){var o=t[0],a=t[1];return e=null,n(o,a),e||(r(o,a),e)||i(o,a),e}var e,n,r,i,o=qo.geo.albers(),a=qo.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),u=qo.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),s={point:function(t,n){e=[t,n]}};return t.invert=function(t){var e=o.scale(),n=o.translate(),r=(t[0]-n[0])/e,i=(t[1]-n[1])/e;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?a:i>=.166&&i<.234&&r>=-.214&&r<-.115?u:o).invert(t)},t.stream=function(t){var e=o.stream(t),n=a.stream(t),r=u.stream(t);return{point:function(t,i){e.point(t,i),n.point(t,i),r.point(t,i)},sphere:function(){e.sphere(),n.sphere(),r.sphere()},lineStart:function(){e.lineStart(),n.lineStart(),r.lineStart()},lineEnd:function(){e.lineEnd(),n.lineEnd(),r.lineEnd()},polygonStart:function(){e.polygonStart(),n.polygonStart(),r.polygonStart()},polygonEnd:function(){e.polygonEnd(),n.polygonEnd(),r.polygonEnd()}}},t.precision=function(e){return arguments.length?(o.precision(e),a.precision(e),u.precision(e),t):o.precision()},t.scale=function(e){return arguments.length?(o.scale(e),a.scale(.35*e),u.scale(e),t.translate(o.translate())):o.scale()},t.translate=function(e){if(!arguments.length)return o.translate();var l=o.scale(),c=+e[0],f=+e[1];return n=o.translate(e).clipExtent([[c-.455*l,f-.238*l],[c+.455*l,f+.238*l]]).stream(s).point,r=a.translate([c-.307*l,f+.201*l]).clipExtent([[c-.425*l+ga,f+.12*l+ga],[c-.214*l-ga,f+.234*l-ga]]).stream(s).point,i=u.translate([c-.205*l,f+.212*l]).clipExtent([[c-.214*l+ga,f+.166*l+ga],[c-.115*l-ga,f+.234*l-ga]]).stream(s).point,t},t.scale(1070)};var mu,yu,xu,bu,wu,_u,Mu={point:w,lineStart:w,lineEnd:w,polygonStart:function(){yu=0,Mu.lineStart=Ue},polygonEnd:function(){Mu.lineStart=Mu.lineEnd=Mu.point=w,mu+=Qo(yu/2)}},Au={point:function(t,e){t<xu&&(xu=t),t>wu&&(wu=t),e<bu&&(bu=e),e>_u&&(_u=e)},lineStart:w,lineEnd:w,polygonStart:w,polygonEnd:w},ku={point:Be,lineStart:Ve,lineEnd:Ge,polygonStart:function(){ku.lineStart=Xe},polygonEnd:function(){ku.point=Be,ku.lineStart=Ve,ku.lineEnd=Ge}};qo.geo.path=function(){function t(t){return t&&("function"==typeof u&&o.pointRadius(+u.apply(this,arguments)),a&&a.valid||(a=i(o)),qo.geo.stream(t,a)),o.result()}function e(){return a=null,t}var n,r,i,o,a,u=4.5;return t.area=function(t){return mu=0,qo.geo.stream(t,i(Mu)),mu},t.centroid=function(t){return ou=au=uu=su=lu=cu=fu=hu=du=0,qo.geo.stream(t,i(ku)),du?[fu/du,hu/du]:cu?[su/cu,lu/cu]:uu?[ou/uu,au/uu]:[NaN,NaN]},t.bounds=function(t){return wu=_u=-(xu=bu=1/0),qo.geo.stream(t,i(Au)),[[xu,bu],[wu,_u]]},t.projection=function(t){return arguments.length?(i=(n=t)?t.stream||Qe(t):y,e()):n},t.context=function(t){return arguments.length?(o=null==(r=t)?new ze:new Ze(t),"function"!=typeof u&&o.pointRadius(u),e()):r},t.pointRadius=function(e){return arguments.length?(u="function"==typeof e?e:(o.pointRadius(+e),+e),t):u},t.projection(qo.geo.albersUsa()).context(null)},qo.geo.transform=function(t){return{stream:function(e){var n=new Je(e);for(var r in t)n[r]=t[r];return n}}},Je.prototype={point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},qo.geo.projection=en,qo.geo.projectionMutator=nn,(qo.geo.equirectangular=function(){return en(on)}).raw=on.invert=on,qo.geo.rotation=function(t){function e(e){return e=t(e[0]*wa,e[1]*wa),e[0]*=_a,e[1]*=_a,e}return t=un(t[0]%360*wa,t[1]*wa,t.length>2?t[2]*wa:0),e.invert=function(e){return e=t.invert(e[0]*wa,e[1]*wa),e[0]*=_a,e[1]*=_a,e},e},an.invert=on,qo.geo.circle=function(){function t(){var t="function"==typeof r?r.apply(this,arguments):r,e=un(-t[0]*wa,-t[1]*wa,0).invert,i=[];return n(null,null,1,{point:function(t,n){i.push(t=e(t,n)),t[0]*=_a,t[1]*=_a}}),{type:"Polygon",coordinates:[i]}}var e,n,r=[0,0],i=6;return t.origin=function(e){return arguments.length?(r=e,t):r},t.angle=function(r){return arguments.length?(n=fn((e=+r)*wa,i*wa),t):e},t.precision=function(r){return arguments.length?(n=fn(e*wa,(i=+r)*wa),t):i},t.angle(90)},qo.geo.distance=function(t,e){var n,r=(e[0]-t[0])*wa,i=t[1]*wa,o=e[1]*wa,a=Math.sin(r),u=Math.cos(r),s=Math.sin(i),l=Math.cos(i),c=Math.sin(o),f=Math.cos(o);return Math.atan2(Math.sqrt((n=f*a)*n+(n=l*c-s*f*u)*n),s*c+l*f*u)},qo.geo.graticule=function(){function t(){return{type:"MultiLineString",coordinates:e()}}function e(){return qo.range(Math.ceil(o/v)*v,i,v).map(h).concat(qo.range(Math.ceil(l/m)*m,s,m).map(d)).concat(qo.range(Math.ceil(r/p)*p,n,p).filter(function(t){return Qo(t%v)>ga}).map(c)).concat(qo.range(Math.ceil(u/g)*g,a,g).filter(function(t){return Qo(t%m)>ga}).map(f))}var n,r,i,o,a,u,s,l,c,f,h,d,p=10,g=p,v=90,m=360,y=2.5;return t.lines=function(){return e().map(function(t){return{type:"LineString",coordinates:t}})},t.outline=function(){return{type:"Polygon",coordinates:[h(o).concat(d(s).slice(1),h(i).reverse().slice(1),d(l).reverse().slice(1))]}},t.extent=function(e){return arguments.length?t.majorExtent(e).minorExtent(e):t.minorExtent()},t.majorExtent=function(e){return arguments.length?(o=+e[0][0],i=+e[1][0],l=+e[0][1],s=+e[1][1],o>i&&(e=o,o=i,i=e),l>s&&(e=l,l=s,s=e),t.precision(y)):[[o,l],[i,s]]},t.minorExtent=function(e){return arguments.length?(r=+e[0][0],n=+e[1][0],u=+e[0][1],a=+e[1][1],r>n&&(e=r,r=n,n=e),u>a&&(e=u,u=a,a=e),t.precision(y)):[[r,u],[n,a]]},t.step=function(e){return arguments.length?t.majorStep(e).minorStep(e):t.minorStep()},t.majorStep=function(e){return arguments.length?(v=+e[0],m=+e[1],t):[v,m]},t.minorStep=function(e){return arguments.length?(p=+e[0],g=+e[1],t):[p,g]},t.precision=function(e){return arguments.length?(y=+e,c=dn(u,a,90),f=pn(r,n,y),h=dn(l,s,90),d=pn(o,i,y),t):y},t.majorExtent([[-180,-90+ga],[180,90-ga]]).minorExtent([[-180,-80-ga],[180,80+ga]])},qo.geo.greatArc=function(){function t(){return{type:"LineString",coordinates:[e||r.apply(this,arguments),n||i.apply(this,arguments)]}}var e,n,r=gn,i=vn;return t.distance=function(){return qo.geo.distance(e||r.apply(this,arguments),n||i.apply(this,arguments))},t.source=function(n){return arguments.length?(r=n,e="function"==typeof n?null:n,t):r},t.target=function(e){return arguments.length?(i=e,n="function"==typeof e?null:e,t):i},t.precision=function(){return arguments.length?t:0},t},qo.geo.interpolate=function(t,e){return mn(t[0]*wa,t[1]*wa,e[0]*wa,e[1]*wa)},qo.geo.length=function(t){return Su=0,qo.geo.stream(t,Tu),Su};var Su,Tu={sphere:w,point:w,lineStart:function(){function t(t,i){var o=Math.sin(i*=wa),a=Math.cos(i),u=Qo((t*=wa)-e),s=Math.cos(u);Su+=Math.atan2(Math.sqrt((u=a*Math.sin(u))*u+(u=r*o-n*a*s)*u),n*o+r*a*s),e=t,n=o,r=a}var e,n,r;Tu.point=function(i,o){e=i*wa,n=Math.sin(o*=wa),r=Math.cos(o),Tu.point=t},Tu.lineEnd=function(){Tu.point=Tu.lineEnd=w}},lineEnd:w,polygonStart:w,polygonEnd:w},Cu=yn(function(t){return Math.sqrt(2/(1+t))},function(t){return 2*Math.asin(t/2)});(qo.geo.azimuthalEqualArea=function(){return en(Cu)}).raw=Cu;var Du=yn(function(t){var e=Math.acos(t);return e&&e/Math.sin(e)},y);(qo.geo.azimuthalEquidistant=function(){return en(Du)}).raw=Du,(qo.geo.conicConformal=function(){return $e(xn)}).raw=xn,(qo.geo.conicEquidistant=function(){return $e(bn)}).raw=bn;var Eu=yn(function(t){return 1/t},Math.atan);(qo.geo.gnomonic=function(){return en(Eu)}).raw=Eu,wn.invert=function(t,e){return[t,2*Math.atan(Math.exp(e))-ba]},(qo.geo.mercator=function(){return _n(wn)}).raw=wn;var Nu=yn(function(){return 1},Math.asin);(qo.geo.orthographic=function(){return en(Nu)}).raw=Nu;var Lu=yn(function(t){return 1/(1+t)},function(t){return 2*Math.atan(t)});(qo.geo.stereographic=function(){return en(Lu)}).raw=Lu,Mn.invert=function(t,e){return[-e,2*Math.atan(Math.exp(t))-ba]},(qo.geo.transverseMercator=function(){var t=_n(Mn),e=t.center,n=t.rotate;return t.center=function(t){return t?e([-t[1],t[0]]):(t=e(),[t[1],-t[0]])},t.rotate=function(t){return t?n([t[0],t[1],t.length>2?t[2]+90:90]):(t=n(),[t[0],t[1],t[2]-90])},n([0,0,90])}).raw=Mn,qo.geom={},qo.geom.hull=function(t){function e(t){if(t.length<3)return[];var e,i=St(n),o=St(r),a=t.length,u=[],s=[];for(e=0;e<a;e++)u.push([+i.call(this,t[e],e),+o.call(this,t[e],e),e]);for(u.sort(Tn),e=0;e<a;e++)s.push([u[e][0],-u[e][1]]);var l=Sn(u),c=Sn(s),f=c[0]===l[0],h=c[c.length-1]===l[l.length-1],d=[];for(e=l.length-1;e>=0;--e)d.push(t[u[l[e]][2]]);for(e=+f;e<c.length-h;++e)d.push(t[u[c[e]][2]]);return d}var n=An,r=kn;return arguments.length?e(t):(e.x=function(t){return arguments.length?(n=t,e):n},e.y=function(t){return arguments.length?(r=t,e):r},e)},qo.geom.polygon=function(t){return ra(t,Ou),t};var Ou=qo.geom.polygon.prototype=[];Ou.area=function(){for(var t,e=-1,n=this.length,r=this[n-1],i=0;++e<n;)t=r,r=this[e],i+=t[1]*r[0]-t[0]*r[1];return.5*i},Ou.centroid=function(t){var e,n,r=-1,i=this.length,o=0,a=0,u=this[i-1];for(arguments.length||(t=-1/(6*this.area()));++r<i;)e=u,u=this[r],n=e[0]*u[1]-u[0]*e[1],o+=(e[0]+u[0])*n,a+=(e[1]+u[1])*n;return[o*t,a*t]},Ou.clip=function(t){for(var e,n,r,i,o,a,u=En(t),s=-1,l=this.length-En(this),c=this[l-1];++s<l;){for(e=t.slice(),t.length=0,i=this[s],o=e[(r=e.length-u)-1],n=-1;++n<r;)Cn(a=e[n],c,i)?(Cn(o,c,i)||t.push(Dn(o,a,c,i)),t.push(a)):Cn(o,c,i)&&t.push(Dn(o,a,c,i)),o=a;u&&t.push(t[0]),c=i}return t};var Ru,ju,Pu,Fu,Iu,Yu=[],Hu=[];In.prototype.prepare=function(){for(var t,e=this.edges,n=e.length;n--;)(t=e[n].edge).b&&t.a||e.splice(n,1);return e.sort(Hn),e.length},Zn.prototype={start:function(){return this.edge.l===this.site?this.edge.a:this.edge.b},end:function(){return this.edge.l===this.site?this.edge.b:this.edge.a}},Kn.prototype={insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=er(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(Jn(this,n),n=(t=n).U),n.C=!1,r.C=!0,tr(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(tr(this,n),n=(t=n).U),n.C=!1,r.C=!0,Jn(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,o=t.L,a=t.R;if(n=o?a?er(a):o:a,i?i.L===t?i.L=n:i.R=n:this._=n,o&&a?(r=n.C,n.C=t.C,n.L=o,o.U=n,n!==a?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=a,a.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,Jn(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,tr(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,Jn(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,tr(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,Jn(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,tr(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}},qo.geom.voronoi=function(t){function e(t){var e=new Array(t.length),r=u[0][0],i=u[0][1],o=u[1][0],a=u[1][1];return nr(n(t),u).cells.forEach(function(n,u){var s=n.edges,l=n.site;(e[u]=s.length?s.map(function(t){var e=t.start();return[e.x,e.y]}):l.x>=r&&l.x<=o&&l.y>=i&&l.y<=a?[[r,a],[o,a],[o,i],[r,i]]:[]).point=t[u]}),e}function n(t){return t.map(function(t,e){return{x:Math.round(o(t,e)/ga)*ga,y:Math.round(a(t,e)/ga)*ga,i:e}})}var r=An,i=kn,o=r,a=i,u=$u;return t?e(t):(e.links=function(t){return nr(n(t)).edges.filter(function(t){return t.l&&t.r}).map(function(e){return{source:t[e.l.i],target:t[e.r.i]}})},e.triangles=function(t){var e=[];return nr(n(t)).cells.forEach(function(n,r){for(var i,o=n.site,a=n.edges.sort(Hn),u=-1,s=a.length,l=a[s-1].edge,c=l.l===o?l.r:l.l;++u<s;)l,i=c,c=(l=a[u].edge).l===o?l.r:l.l,r<i.i&&r<c.i&&ir(o,i,c)<0&&e.push([t[r],t[i.i],t[c.i]])}),e},e.x=function(t){return arguments.length?(o=St(r=t),e):r},e.y=function(t){return arguments.length?(a=St(i=t),e):i},e.clipExtent=function(t){return arguments.length?(u=null==t?$u:t,e):u===$u?null:u},e.size=function(t){return arguments.length?e.clipExtent(t&&[[0,0],t]):u===$u?null:u&&u[1]},e)};var $u=[[-1e6,-1e6],[1e6,1e6]];qo.geom.delaunay=function(t){return qo.geom.voronoi().triangles(t)},qo.geom.quadtree=function(t,e,n,r,i){function o(t){function o(t,e,n,r,i,o,a,u){if(!isNaN(n)&&!isNaN(r))if(t.leaf){var s=t.x,c=t.y;if(null!=s)if(Qo(s-n)+Qo(c-r)<.01)l(t,e,n,r,i,o,a,u);else{var f=t.point;t.x=t.y=t.point=null,l(t,f,s,c,i,o,a,u),l(t,e,n,r,i,o,a,u)}else t.x=n,t.y=r,t.point=e}else l(t,e,n,r,i,o,a,u)}function l(t,e,n,r,i,a,u,s){var l=.5*(i+u),c=.5*(a+s),f=n>=l,h=r>=c,d=h<<1|f;t.leaf=!1,t=t.nodes[d]||(t.nodes[d]={leaf:!0,nodes:[],point:null,x:null,y:null}),f?i=l:u=l,h?a=c:s=c,o(t,e,n,r,i,a,u,s)}var c,f,h,d,p,g,v,m,y,x=St(u),b=St(s);if(null!=e)g=e,v=n,m=r,y=i;else if(m=y=-(g=v=1/0),f=[],h=[],p=t.length,a)for(d=0;d<p;++d)(c=t[d]).x<g&&(g=c.x),c.y<v&&(v=c.y),c.x>m&&(m=c.x),c.y>y&&(y=c.y),f.push(c.x),h.push(c.y);else for(d=0;d<p;++d){var w=+x(c=t[d],d),_=+b(c,d);w<g&&(g=w),_<v&&(v=_),w>m&&(m=w),_>y&&(y=_),f.push(w),h.push(_)}var M=m-g,A=y-v;M>A?y=v+M:m=g+A;var k={leaf:!0,nodes:[],point:null,x:null,y:null};if(k.add=function(t){o(k,t,+x(t,++d),+b(t,d),g,v,m,y)},k.visit=function(t){ur(t,k,g,v,m,y)},k.find=function(t){return sr(k,t[0],t[1],g,v,m,y)},d=-1,null==e){for(;++d<p;)o(k,t[d],f[d],h[d],g,v,m,y);--d}else t.forEach(k.add);return f=h=t=c=null,k}var a,u=An,s=kn;return(a=arguments.length)?(u=or,s=ar,3===a&&(i=n,r=e,n=e=0),o(t)):(o.x=function(t){return arguments.length?(u=t,o):u},o.y=function(t){return arguments.length?(s=t,o):s},o.extent=function(t){return arguments.length?(null==t?e=n=r=i=null:(e=+t[0][0],n=+t[0][1],r=+t[1][0],i=+t[1][1]),o):null==e?null:[[e,n],[r,i]]},o.size=function(t){return arguments.length?(null==t?e=n=r=i=null:(e=n=0,r=+t[0],i=+t[1]),o):null==e?null:[r-e,i-n]},o)},qo.interpolateRgb=lr,qo.interpolateObject=cr,qo.interpolateNumber=fr,qo.interpolateString=hr;var qu=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Uu=new RegExp(qu.source,"g");qo.interpolate=dr,qo.interpolators=[function(t,e){var n=typeof e;return("string"===n?ja.has(e.toLowerCase())||/^(#|rgb\(|hsl\()/i.test(e)?lr:hr:e instanceof at?lr:Array.isArray(e)?pr:"object"===n&&isNaN(e)?cr:fr)(t,e)}],qo.interpolateArray=pr;var zu=function(){return y},Wu=qo.map({linear:zu,poly:function(t){return function(e){return Math.pow(e,t)}},quad:function(){return yr},cubic:function(){return xr},sin:function(){return wr},exp:function(){return _r},circle:function(){return Mr},elastic:function(t,e){var n;return arguments.length<2&&(e=.45),arguments.length?n=e/ya*Math.asin(1/t):(t=1,n=e/4),function(r){return 1+t*Math.pow(2,-10*r)*Math.sin((r-n)*ya/e)}},back:function(t){return t||(t=1.70158),function(e){return e*e*((t+1)*e-t)}},bounce:function(){return Ar}}),Bu=qo.map({in:y,out:vr,"in-out":mr,"out-in":function(t){return mr(vr(t))}});qo.ease=function(t){var e=t.indexOf("-"),n=e>=0?t.slice(0,e):t,r=e>=0?t.slice(e+1):"in";return n=Wu.get(n)||zu,r=Bu.get(r)||y,gr(r(n.apply(null,Uo.call(arguments,1))))},qo.interpolateHcl=function(t,e){t=qo.hcl(t),e=qo.hcl(e);var n=t.h,r=t.c,i=t.l,o=e.h-n,a=e.c-r,u=e.l-i;return isNaN(a)&&(a=0,r=isNaN(r)?e.c:r),isNaN(o)?(o=0,n=isNaN(n)?e.h:n):o>180?o-=360:o<-180&&(o+=360),function(t){return ct(n+o*t,r+a*t,i+u*t)+""}},qo.interpolateHsl=function(t,e){t=qo.hsl(t),e=qo.hsl(e);var n=t.h,r=t.s,i=t.l,o=e.h-n,a=e.s-r,u=e.l-i;return isNaN(a)&&(a=0,r=isNaN(r)?e.s:r),isNaN(o)?(o=0,n=isNaN(n)?e.h:n):o>180?o-=360:o<-180&&(o+=360),function(t){return st(n+o*t,r+a*t,i+u*t)+""}},qo.interpolateLab=function(t,e){t=qo.lab(t),e=qo.lab(e);var n=t.l,r=t.a,i=t.b,o=e.l-n,a=e.a-r,u=e.b-i;return function(t){return ht(n+o*t,r+a*t,i+u*t)+""}},qo.interpolateRound=kr,qo.transform=function(t){var e=Wo.createElementNS(qo.ns.prefix.svg,"g");return(qo.transform=function(t){if(null!=t){e.setAttribute("transform",t);var n=e.transform.baseVal.consolidate()}return new Sr(n?n.matrix:Vu)})(t)},Sr.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var Vu={a:1,b:0,c:0,d:1,e:0,f:0};qo.interpolateTransform=jr,qo.layout={},qo.layout.bundle=function(){return function(t){for(var e=[],n=-1,r=t.length;++n<r;)e.push(Ir(t[n]));return e}},qo.layout.chord=function(){function t(){var t,l,f,h,d,p={},g=[],v=qo.range(o),m=[];for(n=[],r=[],t=0,h=-1;++h<o;){for(l=0,d=-1;++d<o;)l+=i[h][d];g.push(l),m.push(qo.range(o)),t+=l}for(a&&v.sort(function(t,e){return a(g[t],g[e])}),u&&m.forEach(function(t,e){t.sort(function(t,n){return u(i[e][t],i[e][n])})}),t=(ya-c*o)/t,l=0,h=-1;++h<o;){for(f=l,d=-1;++d<o;){var y=v[h],x=m[y][d],b=i[y][x],w=l,_=l+=b*t;p[y+"-"+x]={index:y,subindex:x,startAngle:w,endAngle:_,value:b}}r[y]={index:y,startAngle:f,endAngle:l,value:g[y]},l+=c}for(h=-1;++h<o;)for(d=h-1;++d<o;){var M=p[h+"-"+d],A=p[d+"-"+h];(M.value||A.value)&&n.push(M.value<A.value?{source:A,target:M}:{source:M,target:A})}s&&e()}function e(){n.sort(function(t,e){return s((t.source.value+t.target.value)/2,(e.source.value+e.target.value)/2)})}var n,r,i,o,a,u,s,l={},c=0;return l.matrix=function(t){return arguments.length?(o=(i=t)&&i.length,n=r=null,l):i},l.padding=function(t){return arguments.length?(c=t,n=r=null,l):c},l.sortGroups=function(t){return arguments.length?(a=t,n=r=null,l):a},l.sortSubgroups=function(t){return arguments.length?(u=t,n=null,l):u},l.sortChords=function(t){return arguments.length?(s=t,n&&e(),l):s},l.chords=function(){return n||t(),n},l.groups=function(){return r||t(),r},l},qo.layout.force=function(){function t(t){return function(e,n,r,i){if(e.point!==t){var o=e.cx-t.x,a=e.cy-t.y,u=i-n,s=o*o+a*a;if(u*u/m<s){if(s<g){l=e.charge/s;t.px-=o*l,t.py-=a*l}return!0}if(e.point&&s&&s<g){var l=e.pointCharge/s;t.px-=o*l,t.py-=a*l}}return!e.charge}}function e(t){t.px=qo.event.x,t.py=qo.event.y,s.resume()}var n,r,i,o,a,u,s={},l=qo.dispatch("start","tick","end"),c=[1,1],f=.9,h=Gu,d=Xu,p=-30,g=Zu,v=.1,m=.64,x=[],b=[];return s.tick=function(){if((i*=.99)<.005)return n=null,l.end({type:"end",alpha:i=0}),!0;var e,r,s,h,d,g,m,y,w,_=x.length,M=b.length;for(r=0;r<M;++r)h=(s=b[r]).source,(g=(y=(d=s.target).x-h.x)*y+(w=d.y-h.y)*w)&&(y*=g=i*a[r]*((g=Math.sqrt(g))-o[r])/g,w*=g,d.x-=y*(m=h.weight+d.weight?h.weight/(h.weight+d.weight):.5),d.y-=w*m,h.x+=y*(m=1-m),h.y+=w*m);if((m=i*v)&&(y=c[0]/2,w=c[1]/2,r=-1,m))for(;++r<_;)(s=x[r]).x+=(y-s.x)*m,s.y+=(w-s.y)*m;if(p)for(Wr(e=qo.geom.quadtree(x),i,u),r=-1;++r<_;)(s=x[r]).fixed||e.visit(t(s));for(r=-1;++r<_;)(s=x[r]).fixed?(s.x=s.px,s.y=s.py):(s.x-=(s.px-(s.px=s.x))*f,s.y-=(s.py-(s.py=s.y))*f);l.tick({type:"tick",alpha:i})},s.nodes=function(t){return arguments.length?(x=t,s):x},s.links=function(t){return arguments.length?(b=t,s):b},s.size=function(t){return arguments.length?(c=t,s):c},s.linkDistance=function(t){return arguments.length?(h="function"==typeof t?t:+t,s):h},s.distance=s.linkDistance,s.linkStrength=function(t){return arguments.length?(d="function"==typeof t?t:+t,s):d},s.friction=function(t){return arguments.length?(f=+t,s):f},s.charge=function(t){return arguments.length?(p="function"==typeof t?t:+t,s):p},s.chargeDistance=function(t){return arguments.length?(g=t*t,s):Math.sqrt(g)},s.gravity=function(t){return arguments.length?(v=+t,s):v},s.theta=function(t){return arguments.length?(m=t*t,s):Math.sqrt(m)},s.alpha=function(t){return arguments.length?(t=+t,i?t>0?i=t:(n.c=null,n.t=NaN,n=null,l.end({type:"end",alpha:i=0})):t>0&&(l.start({type:"start",alpha:i=t}),n=Nt(s.tick)),s):i},s.start=function(){function t(t,r){if(!n){for(n=new Array(i),s=0;s<i;++s)n[s]=[];for(s=0;s<l;++s){var o=b[s];n[o.source.index].push(o.target),n[o.target.index].push(o.source)}}for(var a,u=n[e],s=-1,c=u.length;++s<c;)if(!isNaN(a=u[s][t]))return a;return Math.random()*r}var e,n,r,i=x.length,l=b.length,f=c[0],g=c[1];for(e=0;e<i;++e)(r=x[e]).index=e,r.weight=0;for(e=0;e<l;++e)"number"==typeof(r=b[e]).source&&(r.source=x[r.source]),"number"==typeof r.target&&(r.target=x[r.target]),++r.source.weight,++r.target.weight;for(e=0;e<i;++e)r=x[e],isNaN(r.x)&&(r.x=t("x",f)),isNaN(r.y)&&(r.y=t("y",g)),isNaN(r.px)&&(r.px=r.x),isNaN(r.py)&&(r.py=r.y);if(o=[],"function"==typeof h)for(e=0;e<l;++e)o[e]=+h.call(this,b[e],e);else for(e=0;e<l;++e)o[e]=h;if(a=[],"function"==typeof d)for(e=0;e<l;++e)a[e]=+d.call(this,b[e],e);else for(e=0;e<l;++e)a[e]=d;if(u=[],"function"==typeof p)for(e=0;e<i;++e)u[e]=+p.call(this,x[e],e);else for(e=0;e<i;++e)u[e]=p;return s.resume()},s.resume=function(){return s.alpha(.1)},s.stop=function(){return s.alpha(0)},s.drag=function(){if(r||(r=qo.behavior.drag().origin(y).on("dragstart.force",$r).on("drag.force",e).on("dragend.force",qr)),!arguments.length)return r;this.on("mouseover.force",Ur).on("mouseout.force",zr).call(r)},qo.rebind(s,l,"on")};var Gu=20,Xu=1,Zu=1/0;qo.layout.hierarchy=function(){function t(i){var o,a=[i],u=[];for(i.depth=0;null!=(o=a.pop());)if(u.push(o),(l=n.call(t,o,o.depth))&&(s=l.length)){for(var s,l,c;--s>=0;)a.push(c=l[s]),c.parent=o,c.depth=o.depth+1;r&&(o.value=0),o.children=l}else r&&(o.value=+r.call(t,o,o.depth)||0),delete o.children;return Gr(i,function(t){var n,i;e&&(n=t.children)&&n.sort(e),r&&(i=t.parent)&&(i.value+=t.value)}),u}var e=Kr,n=Xr,r=Zr;return t.sort=function(n){return arguments.length?(e=n,t):e},t.children=function(e){return arguments.length?(n=e,t):n},t.value=function(e){return arguments.length?(r=e,t):r},t.revalue=function(e){return r&&(Vr(e,function(t){t.children&&(t.value=0)}),Gr(e,function(e){var n;e.children||(e.value=+r.call(t,e,e.depth)||0),(n=e.parent)&&(n.value+=e.value)})),e},t},qo.layout.partition=function(){function t(e,n,r,i){var o=e.children;if(e.x=n,e.y=e.depth*i,e.dx=r,e.dy=i,o&&(a=o.length)){var a,u,s,l=-1;for(r=e.value?r/e.value:0;++l<a;)t(u=o[l],n,s=u.value*r,i),n+=s}}function e(t){var n=t.children,r=0;if(n&&(i=n.length))for(var i,o=-1;++o<i;)r=Math.max(r,e(n[o]));return 1+r}function n(n,o){var a=r.call(this,n,o);return t(a[0],0,i[0],i[1]/e(a[0])),a}var r=qo.layout.hierarchy(),i=[1,1];return n.size=function(t){return arguments.length?(i=t,n):i},Br(n,r)},qo.layout.pie=function(){function t(a){var u,s=a.length,l=a.map(function(n,r){return+e.call(t,n,r)}),c=+("function"==typeof r?r.apply(this,arguments):r),f=("function"==typeof i?i.apply(this,arguments):i)-c,h=Math.min(Math.abs(f)/s,+("function"==typeof o?o.apply(this,arguments):o)),d=h*(f<0?-1:1),p=qo.sum(l),g=p?(f-s*d)/p:0,v=qo.range(s),m=[];return null!=n&&v.sort(n===Ku?function(t,e){return l[e]-l[t]}:function(t,e){return n(a[t],a[e])}),v.forEach(function(t){m[t]={data:a[t],value:u=l[t],startAngle:c,endAngle:c+=u*g+d,padAngle:h}}),m}var e=Number,n=Ku,r=0,i=ya,o=0;return t.value=function(n){return arguments.length?(e=n,t):e},t.sort=function(e){return arguments.length?(n=e,t):n},t.startAngle=function(e){return arguments.length?(r=e,t):r},t.endAngle=function(e){return arguments.length?(i=e,t):i},t.padAngle=function(e){return arguments.length?(o=e,t):o},t};var Ku={};qo.layout.stack=function(){function t(u,s){if(!(h=u.length))return u;var l=u.map(function(n,r){return e.call(t,n,r)}),c=l.map(function(e){return e.map(function(e,n){return[o.call(t,e,n),a.call(t,e,n)]})}),f=n.call(t,c,s);l=qo.permute(l,f),c=qo.permute(c,f);var h,d,p,g,v=r.call(t,c,s),m=l[0].length;for(p=0;p<m;++p)for(i.call(t,l[0][p],g=v[p],c[0][p][1]),d=1;d<h;++d)i.call(t,l[d][p],g+=c[d-1][p][1],c[d][p][1]);return u}var e=y,n=ni,r=ri,i=ei,o=Jr,a=ti;return t.values=function(n){return arguments.length?(e=n,t):e},t.order=function(e){return arguments.length?(n="function"==typeof e?e:Qu.get(e)||ni,t):n},t.offset=function(e){return arguments.length?(r="function"==typeof e?e:Ju.get(e)||ri,t):r},t.x=function(e){return arguments.length?(o=e,t):o},t.y=function(e){return arguments.length?(a=e,t):a},t.out=function(e){return arguments.length?(i=e,t):i},t};var Qu=qo.map({"inside-out":function(t){var e,n,r=t.length,i=t.map(ii),o=t.map(oi),a=qo.range(r).sort(function(t,e){return i[t]-i[e]}),u=0,s=0,l=[],c=[];for(e=0;e<r;++e)n=a[e],u<s?(u+=o[n],l.push(n)):(s+=o[n],c.push(n));return c.reverse().concat(l)},reverse:function(t){return qo.range(t.length).reverse()},default:ni}),Ju=qo.map({silhouette:function(t){var e,n,r,i=t.length,o=t[0].length,a=[],u=0,s=[];for(n=0;n<o;++n){for(e=0,r=0;e<i;e++)r+=t[e][n][1];r>u&&(u=r),a.push(r)}for(n=0;n<o;++n)s[n]=(u-a[n])/2;return s},wiggle:function(t){var e,n,r,i,o,a,u,s,l,c=t.length,f=t[0],h=f.length,d=[];for(d[0]=s=l=0,n=1;n<h;++n){for(e=0,i=0;e<c;++e)i+=t[e][n][1];for(e=0,o=0,u=f[n][0]-f[n-1][0];e<c;++e){for(r=0,a=(t[e][n][1]-t[e][n-1][1])/(2*u);r<e;++r)a+=(t[r][n][1]-t[r][n-1][1])/u;o+=a*t[e][n][1]}d[n]=s-=i?o/i*u:0,s<l&&(l=s)}for(n=0;n<h;++n)d[n]-=l;return d},expand:function(t){var e,n,r,i=t.length,o=t[0].length,a=1/i,u=[];for(n=0;n<o;++n){for(e=0,r=0;e<i;e++)r+=t[e][n][1];if(r)for(e=0;e<i;e++)t[e][n][1]/=r;else for(e=0;e<i;e++)t[e][n][1]=a}for(n=0;n<o;++n)u[n]=0;return u},zero:ri});qo.layout.histogram=function(){function t(t,o){for(var a,u,s=[],l=t.map(n,this),c=r.call(this,l,o),f=i.call(this,c,l,o),o=-1,h=l.length,d=f.length-1,p=e?1:1/h;++o<d;)(a=s[o]=[]).dx=f[o+1]-(a.x=f[o]),a.y=0;if(d>0)for(o=-1;++o<h;)(u=l[o])>=c[0]&&u<=c[1]&&((a=s[qo.bisect(f,u,1,d)-1]).y+=p,a.push(t[o]));return s}var e=!0,n=Number,r=li,i=ui;return t.value=function(e){return arguments.length?(n=e,t):n},t.range=function(e){return arguments.length?(r=St(e),t):r},t.bins=function(e){return arguments.length?(i="number"==typeof e?function(t){return si(t,e)}:St(e),t):i},t.frequency=function(n){return arguments.length?(e=!!n,t):e},t},qo.layout.pack=function(){function t(t,o){var a=n.call(this,t,o),u=a[0],s=i[0],l=i[1],c=null==e?Math.sqrt:"function"==typeof e?e:function(){return e};if(u.x=u.y=0,Gr(u,function(t){t.r=+c(t.value)}),Gr(u,pi),r){var f=r*(e?1:Math.max(2*u.r/s,2*u.r/l))/2;Gr(u,function(t){t.r+=f}),Gr(u,pi),Gr(u,function(t){t.r-=f})}return mi(u,s/2,l/2,e?1:1/Math.max(2*u.r/s,2*u.r/l)),a}var e,n=qo.layout.hierarchy().sort(ci),r=0,i=[1,1];return t.size=function(e){return arguments.length?(i=e,t):i},t.radius=function(n){return arguments.length?(e=null==n||"function"==typeof n?n:+n,t):e},t.padding=function(e){return arguments.length?(r=+e,t):r},Br(t,n)},qo.layout.tree=function(){function t(t,i){var c=a.call(this,t,i),f=c[0],h=e(f);if(Gr(h,n),h.parent.m=-h.z,Vr(h,r),l)Vr(f,o);else{var d=f,p=f,g=f;Vr(f,function(t){t.x<d.x&&(d=t),t.x>p.x&&(p=t),t.depth>g.depth&&(g=t)});var v=u(d,p)/2-d.x,m=s[0]/(p.x+u(p,d)/2+v),y=s[1]/(g.depth||1);Vr(f,function(t){t.x=(t.x+v)*m,t.y=t.depth*y})}return c}function e(t){for(var e,n={A:null,children:[t]},r=[n];null!=(e=r.pop());)for(var i,o=e.children,a=0,u=o.length;a<u;++a)r.push((o[a]=i={_:o[a],parent:e,children:(i=o[a].children)&&i.slice()||[],A:null,a:null,z:0,m:0,c:0,s:0,t:null,i:a}).a=i);return n.children[0]}function n(t){var e=t.children,n=t.parent.children,r=t.i?n[t.i-1]:null;if(e.length){Mi(t);var o=(e[0].z+e[e.length-1].z)/2;r?(t.z=r.z+u(t._,r._),t.m=t.z-o):t.z=o}else r&&(t.z=r.z+u(t._,r._));t.parent.A=i(t,r,t.parent.A||n[0])}function r(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function i(t,e,n){if(e){for(var r,i=t,o=t,a=e,s=i.parent.children[0],l=i.m,c=o.m,f=a.m,h=s.m;a=wi(a),i=bi(i),a&&i;)s=bi(s),(o=wi(o)).a=t,(r=a.z+f-i.z-l+u(a._,i._))>0&&(_i(Ai(a,t,n),t,r),l+=r,c+=r),f+=a.m,l+=i.m,h+=s.m,c+=o.m;a&&!wi(o)&&(o.t=a,o.m+=f-c),i&&!bi(s)&&(s.t=i,s.m+=l-h,n=t)}return n}function o(t){t.x*=s[0],t.y=t.depth*s[1]}var a=qo.layout.hierarchy().sort(null).value(null),u=xi,s=[1,1],l=null;return t.separation=function(e){return arguments.length?(u=e,t):u},t.size=function(e){return arguments.length?(l=null==(s=e)?o:null,t):l?null:s},t.nodeSize=function(e){return arguments.length?(l=null==(s=e)?null:o,t):l?s:null},Br(t,a)},qo.layout.cluster=function(){function t(t,o){var a,u=e.call(this,t,o),s=u[0],l=0;Gr(s,function(t){var e=t.children;e&&e.length?(t.x=Si(e),t.y=ki(e)):(t.x=a?l+=n(t,a):0,t.y=0,a=t)});var c=Ti(s),f=Ci(s),h=c.x-n(c,f)/2,d=f.x+n(f,c)/2;return Gr(s,i?function(t){t.x=(t.x-s.x)*r[0],t.y=(s.y-t.y)*r[1]}:function(t){t.x=(t.x-h)/(d-h)*r[0],t.y=(1-(s.y?t.y/s.y:1))*r[1]}),u}var e=qo.layout.hierarchy().sort(null).value(null),n=xi,r=[1,1],i=!1;return t.separation=function(e){return arguments.length?(n=e,t):n},t.size=function(e){return arguments.length?(i=null==(r=e),t):i?null:r},t.nodeSize=function(e){return arguments.length?(i=null!=(r=e),t):i?r:null},Br(t,e)},qo.layout.treemap=function(){function t(t,e){for(var n,r,i=-1,o=t.length;++i<o;)r=(n=t[i]).value*(e<0?0:e),n.area=isNaN(r)||r<=0?0:r}function e(n){var o=n.children;if(o&&o.length){var a,u,s,l=f(n),c=[],h=o.slice(),p=1/0,g="slice"===d?l.dx:"dice"===d?l.dy:"slice-dice"===d?1&n.depth?l.dy:l.dx:Math.min(l.dx,l.dy);for(t(h,l.dx*l.dy/n.value),c.area=0;(s=h.length)>0;)c.push(a=h[s-1]),c.area+=a.area,"squarify"!==d||(u=r(c,g))<=p?(h.pop(),p=u):(c.area-=c.pop().area,i(c,g,l,!1),g=Math.min(l.dx,l.dy),c.length=c.area=0,p=1/0);c.length&&(i(c,g,l,!0),c.length=c.area=0),o.forEach(e)}}function n(e){var r=e.children;if(r&&r.length){var o,a=f(e),u=r.slice(),s=[];for(t(u,a.dx*a.dy/e.value),s.area=0;o=u.pop();)s.push(o),s.area+=o.area,null!=o.z&&(i(s,o.z?a.dx:a.dy,a,!u.length),s.length=s.area=0);r.forEach(n)}}function r(t,e){for(var n,r=t.area,i=0,o=1/0,a=-1,u=t.length;++a<u;)(n=t[a].area)&&(n<o&&(o=n),n>i&&(i=n));return r*=r,e*=e,r?Math.max(e*i*p/r,r/(e*o*p)):1/0}function i(t,e,n,r){var i,o=-1,a=t.length,u=n.x,l=n.y,c=e?s(t.area/e):0;if(e==n.dx){for((r||c>n.dy)&&(c=n.dy);++o<a;)(i=t[o]).x=u,i.y=l,i.dy=c,u+=i.dx=Math.min(n.x+n.dx-u,c?s(i.area/c):0);i.z=!0,i.dx+=n.x+n.dx-u,n.y+=c,n.dy-=c}else{for((r||c>n.dx)&&(c=n.dx);++o<a;)(i=t[o]).x=u,i.y=l,i.dx=c,l+=i.dy=Math.min(n.y+n.dy-l,c?s(i.area/c):0);i.z=!1,i.dy+=n.y+n.dy-l,n.x+=c,n.dx-=c}}function o(r){var i=a||u(r),o=i[0];return o.x=o.y=0,o.value?(o.dx=l[0],o.dy=l[1]):o.dx=o.dy=0,a&&u.revalue(o),t([o],o.dx*o.dy/o.value),(a?n:e)(o),h&&(a=i),i}var a,u=qo.layout.hierarchy(),s=Math.round,l=[1,1],c=null,f=Di,h=!1,d="squarify",p=.5*(1+Math.sqrt(5));return o.size=function(t){return arguments.length?(l=t,o):l},o.padding=function(t){function e(e){return Ei(e,t)}if(!arguments.length)return c;var n;return f=null==(c=t)?Di:"function"==(n=typeof t)?function(e){var n=t.call(o,e,e.depth);return null==n?Di(e):Ei(e,"number"==typeof n?[n,n,n,n]:n)}:"number"===n?(t=[t,t,t,t],e):e,o},o.round=function(t){return arguments.length?(s=t?Math.round:Number,o):s!=Number},o.sticky=function(t){return arguments.length?(h=t,a=null,o):h},o.ratio=function(t){return arguments.length?(p=t,o):p},o.mode=function(t){return arguments.length?(d=t+"",o):d},Br(o,u)},qo.random={normal:function(t,e){var n=arguments.length;return n<2&&(e=1),n<1&&(t=0),function(){var n,r,i;do{i=(n=2*Math.random()-1)*n+(r=2*Math.random()-1)*r}while(!i||i>1);return t+e*n*Math.sqrt(-2*Math.log(i)/i)}},logNormal:function(){var t=qo.random.normal.apply(qo,arguments);return function(){return Math.exp(t())}},bates:function(t){var e=qo.random.irwinHall(t);return function(){return e()/t}},irwinHall:function(t){return function(){for(var e=0,n=0;n<t;n++)e+=Math.random();return e}}},qo.scale={};var ts={floor:y,ceil:y};qo.scale.linear=function(){return Fi([0,1],[0,1],dr,!1)};var es={s:1,g:1,p:1,r:1,e:1};qo.scale.log=function(){return Wi(qo.scale.linear().domain([0,1]),10,!0,[1,10])};var ns=qo.format(".0e"),rs={floor:function(t){return-Math.ceil(-t)},ceil:function(t){return-Math.floor(-t)}};qo.scale.pow=function(){return Bi(qo.scale.linear(),1,[0,1])},qo.scale.sqrt=function(){return qo.scale.pow().exponent(.5)},qo.scale.ordinal=function(){return Gi([],{t:"range",a:[[]]})},qo.scale.category10=function(){return qo.scale.ordinal().range(is)},qo.scale.category20=function(){return qo.scale.ordinal().range(os)},qo.scale.category20b=function(){return qo.scale.ordinal().range(as)},qo.scale.category20c=function(){return qo.scale.ordinal().range(us)};var is=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(xt),os=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(xt),as=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(xt),us=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(xt);qo.scale.quantile=function(){return Xi([],[])},qo.scale.quantize=function(){return Zi(0,1,[0,1])},qo.scale.threshold=function(){return Ki([.5],[0,1])},qo.scale.identity=function(){return Qi([0,1])},qo.svg={},qo.svg.arc=function(){function t(){var t=Math.max(0,+n.apply(this,arguments)),l=Math.max(0,+r.apply(this,arguments)),c=a.apply(this,arguments)-ba,f=u.apply(this,arguments)-ba,h=Math.abs(f-c),d=c>f?0:1;if(l<t&&(p=l,l=t,t=p),h>=xa)return e(l,d)+(t?e(t,1-d):"")+"Z";var p,g,v,m,y,x,b,w,_,M,A,k,S=0,T=0,C=[];if((m=(+s.apply(this,arguments)||0)/2)&&(v=o===ss?Math.sqrt(t*t+l*l):+o.apply(this,arguments),d||(T*=-1),l&&(T=et(v/l*Math.sin(m))),t&&(S=et(v/t*Math.sin(m)))),l){y=l*Math.cos(c+T),x=l*Math.sin(c+T),b=l*Math.cos(f-T),w=l*Math.sin(f-T);var D=Math.abs(f-c-2*T)<=ma?0:1;if(T&&oo(y,x,b,w)===d^D){var E=(c+f)/2;y=l*Math.cos(E),x=l*Math.sin(E),b=w=null}}else y=x=0;if(t){_=t*Math.cos(f-S),M=t*Math.sin(f-S),A=t*Math.cos(c+S),k=t*Math.sin(c+S);var N=Math.abs(c-f+2*S)<=ma?0:1;if(S&&oo(_,M,A,k)===1-d^N){var L=(c+f)/2;_=t*Math.cos(L),M=t*Math.sin(L),A=k=null}}else _=M=0;if(h>ga&&(p=Math.min(Math.abs(l-t)/2,+i.apply(this,arguments)))>.001){g=t<l^d?0:1;var O=p,R=p;if(h<ma){var j=null==A?[_,M]:null==b?[y,x]:Dn([y,x],[A,k],[b,w],[_,M]),P=y-j[0],F=x-j[1],I=b-j[0],Y=w-j[1],H=1/Math.sin(Math.acos((P*I+F*Y)/(Math.sqrt(P*P+F*F)*Math.sqrt(I*I+Y*Y)))/2),$=Math.sqrt(j[0]*j[0]+j[1]*j[1]);R=Math.min(p,(t-$)/(H-1)),O=Math.min(p,(l-$)/(H+1))}if(null!=b){var q=ao(null==A?[_,M]:[A,k],[y,x],l,O,d),U=ao([b,w],[_,M],l,O,d);p===O?C.push("M",q[0],"A",O,",",O," 0 0,",g," ",q[1],"A",l,",",l," 0 ",1-d^oo(q[1][0],q[1][1],U[1][0],U[1][1]),",",d," ",U[1],"A",O,",",O," 0 0,",g," ",U[0]):C.push("M",q[0],"A",O,",",O," 0 1,",g," ",U[0])}else C.push("M",y,",",x);if(null!=A){var z=ao([y,x],[A,k],t,-R,d),W=ao([_,M],null==b?[y,x]:[b,w],t,-R,d);p===R?C.push("L",W[0],"A",R,",",R," 0 0,",g," ",W[1],"A",t,",",t," 0 ",d^oo(W[1][0],W[1][1],z[1][0],z[1][1]),",",1-d," ",z[1],"A",R,",",R," 0 0,",g," ",z[0]):C.push("L",W[0],"A",R,",",R," 0 0,",g," ",z[0])}else C.push("L",_,",",M)}else C.push("M",y,",",x),null!=b&&C.push("A",l,",",l," 0 ",D,",",d," ",b,",",w),C.push("L",_,",",M),null!=A&&C.push("A",t,",",t," 0 ",N,",",1-d," ",A,",",k);return C.push("Z"),C.join("")}function e(t,e){return"M0,"+t+"A"+t+","+t+" 0 1,"+e+" 0,"+-t+"A"+t+","+t+" 0 1,"+e+" 0,"+t}var n=to,r=eo,i=Ji,o=ss,a=no,u=ro,s=io;return t.innerRadius=function(e){return arguments.length?(n=St(e),t):n},t.outerRadius=function(e){return arguments.length?(r=St(e),t):r},t.cornerRadius=function(e){return arguments.length?(i=St(e),t):i},t.padRadius=function(e){return arguments.length?(o=e==ss?ss:St(e),t):o},t.startAngle=function(e){return arguments.length?(a=St(e),t):a},t.endAngle=function(e){return arguments.length?(u=St(e),t):u},t.padAngle=function(e){return arguments.length?(s=St(e),t):s},t.centroid=function(){var t=(+n.apply(this,arguments)+ +r.apply(this,arguments))/2,e=(+a.apply(this,arguments)+ +u.apply(this,arguments))/2-ba;return[Math.cos(e)*t,Math.sin(e)*t]},t};var ss="auto";qo.svg.line=function(){return uo(y)};var ls=qo.map({linear:so,"linear-closed":lo,step:function(t){for(var e=0,n=t.length,r=t[0],i=[r[0],",",r[1]];++e<n;)i.push("H",(r[0]+(r=t[e])[0])/2,"V",r[1]);return n>1&&i.push("H",r[0]),i.join("")},"step-before":co,"step-after":fo,basis:go,"basis-open":function(t){if(t.length<4)return so(t);for(var e,n=[],r=-1,i=t.length,o=[0],a=[0];++r<3;)e=t[r],o.push(e[0]),a.push(e[1]);for(n.push(vo(hs,o)+","+vo(hs,a)),--r;++r<i;)e=t[r],o.shift(),o.push(e[0]),a.shift(),a.push(e[1]),mo(n,o,a);return n.join("")},"basis-closed":function(t){for(var e,n,r=-1,i=t.length,o=i+4,a=[],u=[];++r<4;)n=t[r%i],a.push(n[0]),u.push(n[1]);for(e=[vo(hs,a),",",vo(hs,u)],--r;++r<o;)n=t[r%i],a.shift(),a.push(n[0]),u.shift(),u.push(n[1]),mo(e,a,u);return e.join("")},bundle:function(t,e){var n=t.length-1;if(n)for(var r,i,o=t[0][0],a=t[0][1],u=t[n][0]-o,s=t[n][1]-a,l=-1;++l<=n;)i=l/n,(r=t[l])[0]=e*r[0]+(1-e)*(o+i*u),r[1]=e*r[1]+(1-e)*(a+i*s);return go(t)},cardinal:function(t,e){return t.length<3?so(t):t[0]+ho(t,po(t,e))},"cardinal-open":function(t,e){return t.length<4?so(t):t[1]+ho(t.slice(1,-1),po(t,e))},"cardinal-closed":function(t,e){return t.length<3?lo(t):t[0]+ho((t.push(t[0]),t),po([t[t.length-2]].concat(t,[t[1]]),e))},monotone:function(t){return t.length<3?so(t):t[0]+ho(t,bo(t))}});ls.forEach(function(t,e){e.key=t,e.closed=/-closed$/.test(t)});var cs=[0,2/3,1/3,0],fs=[0,1/3,2/3,0],hs=[0,1/6,2/3,1/6];qo.svg.line.radial=function(){var t=uo(wo);return t.radius=t.x,delete t.x,t.angle=t.y,delete t.y,t},co.reverse=fo,fo.reverse=co,qo.svg.area=function(){return _o(y)},qo.svg.area.radial=function(){var t=_o(wo);return t.radius=t.x,delete t.x,t.innerRadius=t.x0,delete t.x0,t.outerRadius=t.x1,delete t.x1,t.angle=t.y,delete t.y,t.startAngle=t.y0,delete t.y0,t.endAngle=t.y1,delete t.y1,t},qo.svg.chord=function(){function t(t,u){var s=e(this,o,t,u),l=e(this,a,t,u);return"M"+s.p0+r(s.r,s.p1,s.a1-s.a0)+(n(s,l)?i(s.r,s.p1,s.r,s.p0):i(s.r,s.p1,l.r,l.p0)+r(l.r,l.p1,l.a1-l.a0)+i(l.r,l.p1,s.r,s.p0))+"Z"}function e(t,e,n,r){var i=e.call(t,n,r),o=u.call(t,i,r),a=s.call(t,i,r)-ba,c=l.call(t,i,r)-ba;return{r:o,a0:a,a1:c,p0:[o*Math.cos(a),o*Math.sin(a)],p1:[o*Math.cos(c),o*Math.sin(c)]}}function n(t,e){return t.a0==e.a0&&t.a1==e.a1}function r(t,e,n){return"A"+t+","+t+" 0 "+ +(n>ma)+",1 "+e}function i(t,e,n,r){return"Q 0,0 "+r}var o=gn,a=vn,u=Mo,s=no,l=ro;return t.radius=function(e){return arguments.length?(u=St(e),t):u},t.source=function(e){return arguments.length?(o=St(e),t):o},t.target=function(e){return arguments.length?(a=St(e),t):a},t.startAngle=function(e){return arguments.length?(s=St(e),t):s},t.endAngle=function(e){return arguments.length?(l=St(e),t):l},t},qo.svg.diagonal=function(){function t(t,i){var o=e.call(this,t,i),a=n.call(this,t,i),u=(o.y+a.y)/2,s=[o,{x:o.x,y:u},{x:a.x,y:u},a];return"M"+(s=s.map(r))[0]+"C"+s[1]+" "+s[2]+" "+s[3]}var e=gn,n=vn,r=Ao;return t.source=function(n){return arguments.length?(e=St(n),t):e},t.target=function(e){return arguments.length?(n=St(e),t):n},t.projection=function(e){return arguments.length?(r=e,t):r},t},qo.svg.diagonal.radial=function(){var t=qo.svg.diagonal(),e=Ao,n=t.projection;return t.projection=function(t){return arguments.length?n(ko(e=t)):e},t},qo.svg.symbol=function(){function t(t,r){return(ds.get(e.call(this,t,r))||Co)(n.call(this,t,r))}var e=To,n=So;return t.type=function(n){return arguments.length?(e=St(n),t):e},t.size=function(e){return arguments.length?(n=St(e),t):n},t};var ds=qo.map({circle:Co,cross:function(t){var e=Math.sqrt(t/5)/2;return"M"+-3*e+","+-e+"H"+-e+"V"+-3*e+"H"+e+"V"+-e+"H"+3*e+"V"+e+"H"+e+"V"+3*e+"H"+-e+"V"+e+"H"+-3*e+"Z"},diamond:function(t){var e=Math.sqrt(t/(2*gs)),n=e*gs;return"M0,"+-e+"L"+n+",0 0,"+e+" "+-n+",0Z"},square:function(t){var e=Math.sqrt(t)/2;return"M"+-e+","+-e+"L"+e+","+-e+" "+e+","+e+" "+-e+","+e+"Z"},"triangle-down":function(t){var e=Math.sqrt(t/ps),n=e*ps/2;return"M0,"+n+"L"+e+","+-n+" "+-e+","+-n+"Z"},"triangle-up":function(t){var e=Math.sqrt(t/ps),n=e*ps/2;return"M0,"+-n+"L"+e+","+n+" "+-e+","+n+"Z"}});qo.svg.symbolTypes=ds.keys();var ps=Math.sqrt(3),gs=Math.tan(30*wa);ua.transition=function(t){for(var e,n,r=vs||++bs,i=Oo(t),o=[],a=ms||{time:Date.now(),ease:br,delay:0,duration:250},u=-1,s=this.length;++u<s;){o.push(e=[]);for(var l=this[u],c=-1,f=l.length;++c<f;)(n=l[c])&&Ro(n,c,i,r,a),e.push(n)}return Eo(o,i,r)},ua.interrupt=function(t){return this.each(null==t?ys:Do(Oo(t)))};var vs,ms,ys=Do(Oo()),xs=[],bs=0;xs.call=ua.call,xs.empty=ua.empty,xs.node=ua.node,xs.size=ua.size,qo.transition=function(t,e){return t&&t.transition?vs?t.transition(e):t:qo.selection().transition(t)},qo.transition.prototype=xs,xs.select=function(t){var e,n,r,i=this.id,o=this.namespace,a=[];t=C(t);for(var u=-1,s=this.length;++u<s;){a.push(e=[]);for(var l=this[u],c=-1,f=l.length;++c<f;)(r=l[c])&&(n=t.call(r,r.__data__,c,u))?("__data__"in r&&(n.__data__=r.__data__),Ro(n,c,o,i,r[o][i]),e.push(n)):e.push(null)}return Eo(a,o,i)},xs.selectAll=function(t){var e,n,r,i,o,a=this.id,u=this.namespace,s=[];t=D(t);for(var l=-1,c=this.length;++l<c;)for(var f=this[l],h=-1,d=f.length;++h<d;)if(r=f[h]){o=r[u][a],n=t.call(r,r.__data__,h,l),s.push(e=[]);for(var p=-1,g=n.length;++p<g;)(i=n[p])&&Ro(i,p,u,a,o),e.push(i)}return Eo(s,u,a)},xs.filter=function(t){var e,n,r,i=[];"function"!=typeof t&&(t=$(t));for(var o=0,a=this.length;o<a;o++){i.push(e=[]);for(var u=0,s=(n=this[o]).length;u<s;u++)(r=n[u])&&t.call(r,r.__data__,u,o)&&e.push(r)}return Eo(i,this.namespace,this.id)},xs.tween=function(t,e){var n=this.id,r=this.namespace;return arguments.length<2?this.node()[r][n].tween.get(t):U(this,null==e?function(e){e[r][n].tween.remove(t)}:function(i){i[r][n].tween.set(t,e)})},xs.attr=function(t,e){function n(){this.removeAttribute(o)}function r(){this.removeAttributeNS(o.space,o.local)}if(arguments.length<2){for(e in t)this.attr(e,t[e]);return this}var i="transform"==t?jr:dr,o=qo.ns.qualify(t);return No(this,"attr."+t,e,o.local?function(t){return null==t?r:(t+="",function(){var e,n=this.getAttributeNS(o.space,o.local);return n!==t&&(e=i(n,t),function(t){this.setAttributeNS(o.space,o.local,e(t))})})}:function(t){return null==t?n:(t+="",function(){var e,n=this.getAttribute(o);return n!==t&&(e=i(n,t),function(t){this.setAttribute(o,e(t))})})})},xs.attrTween=function(t,e){var n=qo.ns.qualify(t);return this.tween("attr."+t,n.local?function(t,r){var i=e.call(this,t,r,this.getAttributeNS(n.space,n.local));return i&&function(t){this.setAttributeNS(n.space,n.local,i(t))}}:function(t,r){var i=e.call(this,t,r,this.getAttribute(n));return i&&function(t){this.setAttribute(n,i(t))}})},xs.style=function(t,n,r){function i(){this.style.removeProperty(t)}var o=arguments.length;if(o<3){if("string"!=typeof t){o<2&&(n="");for(r in t)this.style(r,t[r],n);return this}r=""}return No(this,"style."+t,n,function(n){return null==n?i:(n+="",function(){var i,o=e(this).getComputedStyle(this,null).getPropertyValue(t);return o!==n&&(i=dr(o,n),function(e){this.style.setProperty(t,i(e),r)})})})},xs.styleTween=function(t,n,r){return arguments.length<3&&(r=""),this.tween("style."+t,function(i,o){var a=n.call(this,i,o,e(this).getComputedStyle(this,null).getPropertyValue(t));return a&&function(e){this.style.setProperty(t,a(e),r)}})},xs.text=function(t){return No(this,"text",t,Lo)},xs.remove=function(){var t=this.namespace;return this.each("end.transition",function(){var e;this[t].count<2&&(e=this.parentNode)&&e.removeChild(this)})},xs.ease=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].ease:("function"!=typeof t&&(t=qo.ease.apply(qo,arguments)),U(this,function(r){r[n][e].ease=t}))},xs.delay=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].delay:U(this,"function"==typeof t?function(r,i,o){r[n][e].delay=+t.call(r,r.__data__,i,o)}:(t=+t,function(r){r[n][e].delay=t}))},xs.duration=function(t){var e=this.id,n=this.namespace;return arguments.length<1?this.node()[n][e].duration:U(this,"function"==typeof t?function(r,i,o){r[n][e].duration=Math.max(1,t.call(r,r.__data__,i,o))}:(t=Math.max(1,t),function(r){r[n][e].duration=t}))},xs.each=function(t,e){var n=this.id,r=this.namespace;if(arguments.length<2){var i=ms,o=vs;try{vs=n,U(this,function(e,i,o){ms=e[r][n],t.call(e,e.__data__,i,o)})}finally{ms=i,vs=o}}else U(this,function(i){var o=i[r][n];(o.event||(o.event=qo.dispatch("start","end","interrupt"))).on(t,e)});return this},xs.transition=function(){for(var t,e,n,r,i=this.id,o=++bs,a=this.namespace,u=[],s=0,l=this.length;s<l;s++){u.push(t=[]);for(var c=0,f=(e=this[s]).length;c<f;c++)(n=e[c])&&Ro(n,c,a,o,{time:(r=n[a][i]).time,ease:r.ease,delay:r.delay+r.duration,duration:r.duration}),t.push(n)}return Eo(u,a,o)},qo.svg.axis=function(){function t(t){t.each(function(){var t,l=qo.select(this),c=this.__chart__||n,f=this.__chart__=n.copy(),h=null==s?f.ticks?f.ticks.apply(f,u):f.domain():s,d=null==e?f.tickFormat?f.tickFormat.apply(f,u):y:e,p=l.selectAll(".tick").data(h,f),g=p.enter().insert("g",".domain").attr("class","tick").style("opacity",ga),v=qo.transition(p.exit()).style("opacity",ga).remove(),m=qo.transition(p.order()).style("opacity",1),x=Math.max(i,0)+a,b=Li(f),w=l.selectAll(".domain").data([0]),_=(w.enter().append("path").attr("class","domain"),qo.transition(w));g.append("line"),g.append("text");var M,A,k,S,T=g.select("line"),C=m.select("line"),D=p.select("text").text(d),E=g.select("text"),N=m.select("text"),L="top"===r||"left"===r?-1:1;if("bottom"===r||"top"===r?(t=jo,M="x",k="y",A="x2",S="y2",D.attr("dy",L<0?"0em":".71em").style("text-anchor","middle"),_.attr("d","M"+b[0]+","+L*o+"V0H"+b[1]+"V"+L*o)):(t=Po,M="y",k="x",A="y2",S="x2",D.attr("dy",".32em").style("text-anchor",L<0?"end":"start"),_.attr("d","M"+L*o+","+b[0]+"H0V"+b[1]+"H"+L*o)),T.attr(S,L*i),E.attr(k,L*x),C.attr(A,0).attr(S,L*i),N.attr(M,0).attr(k,L*x),f.rangeBand){var O=f,R=O.rangeBand()/2;c=f=function(t){return O(t)+R}}else c.rangeBand?c=f:v.call(t,f,c);g.call(t,c,f),m.call(t,f,f)})}var e,n=qo.scale.linear(),r=ws,i=6,o=6,a=3,u=[10],s=null;return t.scale=function(e){return arguments.length?(n=e,t):n},t.orient=function(e){return arguments.length?(r=e in _s?e+"":ws,t):r},t.ticks=function(){return arguments.length?(u=zo(arguments),t):u},t.tickValues=function(e){return arguments.length?(s=e,t):s},t.tickFormat=function(n){return arguments.length?(e=n,t):e},t.tickSize=function(e){var n=arguments.length;return n?(i=+e,o=+arguments[n-1],t):i},t.innerTickSize=function(e){return arguments.length?(i=+e,t):i},t.outerTickSize=function(e){return arguments.length?(o=+e,t):o},t.tickPadding=function(e){return arguments.length?(a=+e,t):a},t.tickSubdivide=function(){return arguments.length&&t},t};var ws="bottom",_s={top:1,right:1,bottom:1,left:1};qo.svg.brush=function(){function t(e){e.each(function(){var e=qo.select(this).style("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush",o).on("touchstart.brush",o),a=e.selectAll(".background").data([0]);a.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),e.selectAll(".extent").data([0]).enter().append("rect").attr("class","extent").style("cursor","move");var u=e.selectAll(".resize").data(g,y);u.exit().remove(),u.enter().append("g").attr("class",function(t){return"resize "+t}).style("cursor",function(t){return Ms[t]}).append("rect").attr("x",function(t){return/[ew]$/.test(t)?-3:null}).attr("y",function(t){return/^[ns]/.test(t)?-3:null}).attr("width",6).attr("height",6).style("visibility","hidden"),u.style("display",t.empty()?"none":null);var s,f=qo.transition(e),h=qo.transition(a);l&&(s=Li(l),h.attr("x",s[0]).attr("width",s[1]-s[0]),r(f)),c&&(s=Li(c),h.attr("y",s[0]).attr("height",s[1]-s[0]),i(f)),n(f)})}function n(t){t.selectAll(".resize").attr("transform",function(t){return"translate("+f[+/e$/.test(t)]+","+h[+/^s/.test(t)]+")"})}function r(t){t.select(".extent").attr("x",f[0]),t.selectAll(".extent,.n>rect,.s>rect").attr("width",f[1]-f[0])}function i(t){t.select(".extent").attr("y",h[0]),t.selectAll(".extent,.e>rect,.w>rect").attr("height",h[1]-h[0])}function o(){function o(){var t=qo.mouse(x),e=!1;y&&(t[0]+=y[0],t[1]+=y[1]),T||(qo.event.altKey?(m||(m=[(f[0]+f[1])/2,(h[0]+h[1])/2]),D[0]=f[+(t[0]<m[0])],D[1]=h[+(t[1]<m[1])]):m=null),k&&g(t,l,0)&&(r(_),e=!0),S&&g(t,c,1)&&(i(_),e=!0),e&&(n(_),w({type:"brush",mode:T?"move":"resize"}))}function g(t,e,n){var r,i,o=Li(e),s=o[0],l=o[1],c=D[n],g=n?h:f,v=g[1]-g[0];if(T&&(s-=c,l-=v+c),r=(n?p:d)?Math.max(s,Math.min(l,t[n])):t[n],T?i=(r+=c)+v:(m&&(c=Math.max(s,Math.min(l,2*m[n]-r))),c<r?(i=r,r=c):i=c),g[0]!=r||g[1]!=i)return n?u=null:a=null,g[0]=r,g[1]=i,!0}function v(){o(),_.style("pointer-events","all").selectAll(".resize").style("display",t.empty()?"none":null),qo.select("body").style("cursor",null),E.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),C(),w({type:"brushend"})}var m,y,x=this,b=qo.select(qo.event.target),w=s.of(x,arguments),_=qo.select(x),M=b.datum(),k=!/^(n|s)$/.test(M)&&l,S=!/^(e|w)$/.test(M)&&c,T=b.classed("extent"),C=X(x),D=qo.mouse(x),E=qo.select(e(x)).on("keydown.brush",function(){32==qo.event.keyCode&&(T||(m=null,D[0]-=f[1],D[1]-=h[1],T=2),A())}).on("keyup.brush",function(){32==qo.event.keyCode&&2==T&&(D[0]+=f[1],D[1]+=h[1],T=0,A())});if(qo.event.changedTouches?E.on("touchmove.brush",o).on("touchend.brush",v):E.on("mousemove.brush",o).on("mouseup.brush",v),_.interrupt().selectAll("*").interrupt(),T)D[0]=f[0]-D[0],D[1]=h[0]-D[1];else if(M){var N=+/w$/.test(M),L=+/^n/.test(M);y=[f[1-N]-D[0],h[1-L]-D[1]],D[0]=f[N],D[1]=h[L]}else qo.event.altKey&&(m=D.slice());_.style("pointer-events","none").selectAll(".resize").style("display",null),qo.select("body").style("cursor",b.style("cursor")),w({type:"brushstart"}),o()}var a,u,s=S(t,"brushstart","brush","brushend"),l=null,c=null,f=[0,0],h=[0,0],d=!0,p=!0,g=As[0];return t.event=function(t){t.each(function(){var t=s.of(this,arguments),e={x:f,y:h,i:a,j:u},n=this.__chart__||e;this.__chart__=e,vs?qo.select(this).transition().each("start.brush",function(){a=n.i,u=n.j,f=n.x,h=n.y,t({type:"brushstart"})}).tween("brush:brush",function(){var n=pr(f,e.x),r=pr(h,e.y);return a=u=null,function(i){f=e.x=n(i),h=e.y=r(i),t({type:"brush",mode:"resize"})}}).each("end.brush",function(){a=e.i,u=e.j,t({type:"brush",mode:"resize"}),t({type:"brushend"})}):(t({type:"brushstart"}),t({type:"brush",mode:"resize"}),t({type:"brushend"}))})},t.x=function(e){return arguments.length?(l=e,g=As[!l<<1|!c],t):l},t.y=function(e){return arguments.length?(c=e,g=As[!l<<1|!c],t):c},t.clamp=function(e){return arguments.length?(l&&c?(d=!!e[0],p=!!e[1]):l?d=!!e:c&&(p=!!e),t):l&&c?[d,p]:l?d:c?p:null},t.extent=function(e){var n,r,i,o,s;return arguments.length?(l&&(n=e[0],r=e[1],c&&(n=n[0],r=r[0]),a=[n,r],l.invert&&(n=l(n),r=l(r)),r<n&&(s=n,n=r,r=s),n==f[0]&&r==f[1]||(f=[n,r])),c&&(i=e[0],o=e[1],l&&(i=i[1],o=o[1]),u=[i,o],c.invert&&(i=c(i),o=c(o)),o<i&&(s=i,i=o,o=s),i==h[0]&&o==h[1]||(h=[i,o])),t):(l&&(a?(n=a[0],r=a[1]):(n=f[0],r=f[1],l.invert&&(n=l.invert(n),r=l.invert(r)),r<n&&(s=n,n=r,r=s))),c&&(u?(i=u[0],o=u[1]):(i=h[0],o=h[1],c.invert&&(i=c.invert(i),o=c.invert(o)),o<i&&(s=i,i=o,o=s))),l&&c?[[n,i],[r,o]]:l?[n,r]:c&&[i,o])},t.clear=function(){return t.empty()||(f=[0,0],h=[0,0],a=u=null),t},t.empty=function(){return!!l&&f[0]==f[1]||!!c&&h[0]==h[1]},qo.rebind(t,s,"on")};var Ms={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},As=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]],ks=za.format=Za.timeFormat,Ss=ks.utc,Ts=Ss("%Y-%m-%dT%H:%M:%S.%LZ");ks.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?Fo:Ts,Fo.parse=function(t){var e=new Date(t);return isNaN(e)?null:e},Fo.toString=Ts.toString,za.second=Yt(function(t){return new Wa(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(t.getTime()+1e3*Math.floor(e))},function(t){return t.getSeconds()}),za.seconds=za.second.range,za.seconds.utc=za.second.utc.range,za.minute=Yt(function(t){return new Wa(6e4*Math.floor(t/6e4))},function(t,e){t.setTime(t.getTime()+6e4*Math.floor(e))},function(t){return t.getMinutes()}),za.minutes=za.minute.range,za.minutes.utc=za.minute.utc.range,za.hour=Yt(function(t){var e=t.getTimezoneOffset()/60;return new Wa(36e5*(Math.floor(t/36e5-e)+e))},function(t,e){t.setTime(t.getTime()+36e5*Math.floor(e))},function(t){return t.getHours()}),za.hours=za.hour.range,za.hours.utc=za.hour.utc.range,za.month=Yt(function(t){return(t=za.day(t)).setDate(1),t},function(t,e){t.setMonth(t.getMonth()+e)},function(t){return t.getMonth()}),za.months=za.month.range,za.months.utc=za.month.utc.range;var Cs=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],Ds=[[za.second,1],[za.second,5],[za.second,15],[za.second,30],[za.minute,1],[za.minute,5],[za.minute,15],[za.minute,30],[za.hour,1],[za.hour,3],[za.hour,6],[za.hour,12],[za.day,1],[za.day,2],[za.week,1],[za.month,1],[za.month,3],[za.year,1]],Es=ks.multi([[".%L",function(t){return t.getMilliseconds()}],[":%S",function(t){return t.getSeconds()}],["%I:%M",function(t){return t.getMinutes()}],["%I %p",function(t){return t.getHours()}],["%a %d",function(t){return t.getDay()&&1!=t.getDate()}],["%b %d",function(t){return 1!=t.getDate()}],["%B",function(t){return t.getMonth()}],["%Y",Ce]]),Ns={range:function(t,e,n){return qo.range(Math.ceil(t/n)*n,+e,n).map(Yo)},floor:y,ceil:y};Ds.year=za.year,za.scale=function(){return Io(qo.scale.linear(),Ds,Es)};var Ls=Ds.map(function(t){return[t[0].utc,t[1]]}),Os=Ss.multi([[".%L",function(t){return t.getUTCMilliseconds()}],[":%S",function(t){return t.getUTCSeconds()}],["%I:%M",function(t){return t.getUTCMinutes()}],["%I %p",function(t){return t.getUTCHours()}],["%a %d",function(t){return t.getUTCDay()&&1!=t.getUTCDate()}],["%b %d",function(t){return 1!=t.getUTCDate()}],["%B",function(t){return t.getUTCMonth()}],["%Y",Ce]]);Ls.year=za.year.utc,za.scale.utc=function(){return Io(qo.scale.linear(),Ls,Os)},qo.text=Tt(function(t){return t.responseText}),qo.json=function(t,e){return Ct(t,"application/json",Ho,e)},qo.html=function(t,e){return Ct(t,"text/html",$o,e)},qo.xml=Tt(function(t){return t.responseXML}),"function"==typeof define&&define.amd?(this.d3=qo,define(qo)):"object"==typeof module&&module.exports?module.exports=qo:this.d3=qo}(),function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).crossfilter=t()}}(function(){return function t(e,n,r){function i(a,u){if(!n[a]){if(!e[a]){var s="function"==typeof require&&require;if(!u&&s)return s(a,!0);if(o)return o(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[a]={exports:{}};e[a][0].call(c.exports,function(t){var n=e[a][1][t];return i(n||t)},c,c.exports,t,e,n,r)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(t,e,n){e.exports=t("./src/crossfilter").crossfilter},{"./src/crossfilter":6}],2:[function(t,e,n){(function(t){function n(t,e){return null==t?void 0:t[e]}function r(t){var e=!1;if(null!=t&&"function"!=typeof t.toString)try{e=!!(t+"")}catch(t){}return e}function i(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function o(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function a(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function u(t,e){for(var n=t.length;n--;)if(x(t[n][0],e))return n;return-1}function s(t){return!(!w(t)||g(t))&&(b(t)||r(t)?X:F).test(m(t))}function l(t){if("string"==typeof t)return t;if(M(t))return et?et.call(t):"";var e=t+"";return"0"==e&&1/t==-T?"-0":e}function c(t){return rt(t)?t:nt(t)}function f(t,e){var n=t.__data__;return p(e)?n["string"==typeof e?"string":"hash"]:n.map}function h(t,e){var r=n(t,e);return s(r)?r:void 0}function d(t,e){if(rt(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!M(t))||(L.test(t)||!N.test(t)||null!=e&&t in Object(e))}function p(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}function g(t){return!!W&&W in t}function v(t){if("string"==typeof t||M(t))return t;var e=t+"";return"0"==e&&1/t==-T?"-0":e}function m(t){if(null!=t){try{return B.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function y(t,e){if("function"!=typeof t||e&&"function"!=typeof e)throw new TypeError(k);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return n.cache=o.set(i,a),a};return n.cache=new(y.Cache||a),n}function x(t,e){return t===e||t!==t&&e!==e}function b(t){var e=w(t)?G.call(t):"";return e==C||e==D}function w(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function _(t){return!!t&&"object"==typeof t}function M(t){return"symbol"==typeof t||_(t)&&G.call(t)==E}function A(t){return null==t?"":l(t)}var k="Expected a function",S="__lodash_hash_undefined__",T=1/0,C="[object Function]",D="[object GeneratorFunction]",E="[object Symbol]",N=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,L=/^\w*$/,O=/^\./,R=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,j=/[\\^$.*+?()[\]{}|]/g,P=/\\(\\)?/g,F=/^\[object .+?Constructor\]$/,I="object"==typeof t&&t&&t.Object===Object&&t,Y="object"==typeof self&&self&&self.Object===Object&&self,H=I||Y||Function("return this")(),$=Array.prototype,q=Function.prototype,U=Object.prototype,z=H["__core-js_shared__"],W=function(){var t=/[^.]+$/.exec(z&&z.keys&&z.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),B=q.toString,V=U.hasOwnProperty,G=U.toString,X=RegExp("^"+B.call(V).replace(j,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Z=H.Symbol,K=$.splice,Q=h(H,"Map"),J=h(Object,"create"),tt=Z?Z.prototype:void 0,et=tt?tt.toString:void 0;i.prototype.clear=function(){this.__data__=J?J(null):{}},i.prototype.delete=function(t){return this.has(t)&&delete this.__data__[t]},i.prototype.get=function(t){var e=this.__data__;if(J){var n=e[t];return n===S?void 0:n}return V.call(e,t)?e[t]:void 0},i.prototype.has=function(t){var e=this.__data__;return J?void 0!==e[t]:V.call(e,t)},i.prototype.set=function(t,e){return this.__data__[t]=J&&void 0===e?S:e,this},o.prototype.clear=function(){this.__data__=[]},o.prototype.delete=function(t){var e=this.__data__,n=u(e,t);return!(n<0||(n==e.length-1?e.pop():K.call(e,n,1),0))},o.prototype.get=function(t){var e=this.__data__,n=u(e,t);return n<0?void 0:e[n][1]},o.prototype.has=function(t){return u(this.__data__,t)>-1},o.prototype.set=function(t,e){var n=this.__data__,r=u(n,t);return r<0?n.push([t,e]):n[r][1]=e,this},a.prototype.clear=function(){this.__data__={hash:new i,map:new(Q||o),string:new i}},a.prototype.delete=function(t){return f(this,t).delete(t)},a.prototype.get=function(t){return f(this,t).get(t)},a.prototype.has=function(t){return f(this,t).has(t)},a.prototype.set=function(t,e){return f(this,t).set(t,e),this};var nt=y(function(t){t=A(t);var e=[];return O.test(t)&&e.push(""),t.replace(R,function(t,n,r,i){e.push(r?i.replace(P,"$1"):n||t)}),e});y.Cache=a;var rt=Array.isArray;e.exports=function(t,e,n){var r=-1,i=(e=d(e,t)?[e]:c(e)).length;for(i||(t=void 0,i=1);++r<i;){var o=null==t?void 0:t[v(e[r])];void 0===o&&(r=i,o=n),t=b(o)?o.call(t):o}return t}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],3:[function(t,e,n){e.exports={version:"1.4.3"}},{}],4:[function(t,e,n){function r(t){for(var e=new Array(t),n=-1;++n<t;)e[n]=0;return e}function i(t){this.length=t,this.subarrays=1,this.width=8,this.masks={0:0},this[0]=o(t)}if("undefined"!=typeof Uint8Array)var o=function(t){return new Uint8Array(t)},a=function(t){return new Uint16Array(t)},u=function(t){return new Uint32Array(t)},s=function(t,e){if(t.length>=e)return t;var n=new t.constructor(e);return n.set(t),n},l=function(t,e){var n;switch(e){case 16:n=a(t.length);break;case 32:n=u(t.length);break;default:throw new Error("invalid array width!")}return n.set(t),n};i.prototype.lengthen=function(t){var e,n;for(e=0,n=this.subarrays;e<n;++e)this[e]=s(this[e],t);this.length=t},i.prototype.add=function(){var t,e,n,r,i;for(r=0,i=this.subarrays;r<i;++r)if(t=this.masks[r],e=this.width-32*r,n=~t&-~t,!(e>=32)||n)return e<32&&n&1<<e&&(this[r]=l(this[r],e<<=1),this.width=32*r+e),this.masks[r]|=n,{offset:r,one:n};return this[this.subarrays]=o(this.length),this.masks[this.subarrays]=1,this.width+=8,{offset:this.subarrays++,one:1}},i.prototype.copy=function(t,e){var n,r;for(n=0,r=this.subarrays;n<r;++n)this[n][t]=this[n][e]},i.prototype.truncate=function(t){var e,n;for(e=0,n=this.subarrays;e<n;++e){for(var r=this.length-1;r>=t;r--)this[e][r]=0;this[e].length=t}this.length=t},i.prototype.zero=function(t){var e,n;for(e=0,n=this.subarrays;e<n;++e)if(this[e][t])return!1;return!0},i.prototype.zeroExcept=function(t,e,n){var r,i;for(r=0,i=this.subarrays;r<i;++r)if(r===e?this[r][t]&n:this[r][t])return!1;return!0},i.prototype.zeroExceptMask=function(t,e){var n,r;for(n=0,r=this.subarrays;n<r;++n)if(this[n][t]&e[n])return!1;return!0},i.prototype.only=function(t,e,n){var r,i;for(r=0,i=this.subarrays;r<i;++r)if(this[r][t]!=(r===e?n:0))return!1;return!0},i.prototype.onlyExcept=function(t,e,n,r,i){var o,a,u;for(a=0,u=this.subarrays;a<u;++a)if(o=this[a][t],a===e&&(o&=n),o!=(a===r?i:0))return!1;return!0},e.exports={array8:r,array16:r,array32:r,arrayLengthen:function(t,e){for(var n=t.length;n<e;)t[n++]=0;return t},arrayWiden:function(t,e){if(e>32)throw new Error("invalid array width!");return t},bitarray:i}},{}],5:[function(t,e,n){"use strict";function r(t){function e(e,n,r,i){for(;r<i;){var o=r+i>>>1;n<t(e[o])?i=o:r=o+1}return r}return e.right=e,e.left=function(e,n,r,i){for(;r<i;){var o=r+i>>>1;t(e[o])<n?r=o+1:i=o}return r},e}var i=t("./identity");e.exports=r(i),e.exports.by=r},{"./identity":10}],6:[function(t,e,n){"use strict";function r(t,e){return(e<257?a.array8:e<65537?a.array16:a.array32)(t)}function i(t){for(var e=r(t,t),n=-1;++n<t;)e[n]=n;return e}function o(t){return 8===t?256:16===t?65536:4294967296}var a=t("./array"),u=t("./filter"),s=t("./identity"),l=t("./null"),c=t("./zero"),f=t("./heapselect"),h=t("./heap"),d=t("./bisect"),p=t("./insertionsort"),g=t("./permute"),v=t("./quicksort"),m=t("./reduce"),y=t("./../package.json"),x=t("lodash.result"),b=-1;n.crossfilter=function(){function t(t){var r=w,i=t.length;return i&&(y=y.concat(t),n.lengthen(w+=i),M.forEach(function(e){e(t,r,i)}),e("dataAdded")),p}function e(t){for(var e=0;e<k.length;e++)k[e](t)}var n,p={add:t,remove:function(t){for(var i=r(w,w),o=[],a="function"==typeof t,u=0,s=0;u<w;++u)!function(e){return a?t(y[e],e):n.zero(e)}(u)?i[u]=s++:(o.push(u),i[u]=b);_.forEach(function(t){t(-1,-1,[],o,!0)}),A.forEach(function(t){t(i)});for(var l=0,c=0;l<w;++l)i[l]!==b&&(l!==c&&(n.copy(c,l),y[c]=y[l]),++c);y.length=w=c,n.truncate(c),e("dataRemoved")},dimension:function(t,p){function k(e,o,u){if(p){ot=0,C=0,Z=[];for(var s=0;s<e.length;s++)for(C=0,Z=t(e[s]);C<Z.length;C++)ot++;U=[],B=i(e.length),G=r(ot,1);for(var l=i(ot),c=0,f=0;f<e.length;f++)if((Z=t(e[f])).length)for(B[f]=Z.length,C=0;C<Z.length;C++)U.push(Z[C]),l[c]=f,c++;else B[f]=0,Q.push(f+o);var h=J(i(ot),0,ot);U=g(U,h),z=g(l,h)}else U=e.map(t),z=J(i(u),0,u),U=g(U,z);p&&(u=ot);var d=tt(U),v=d[0],m=d[1];if(X)for(var y=0;y<u;++y)X(U[y],y)||(n[Y][z[y]+o]|=F,p&&(G[y]=1));else{for(var x=0;x<v;++x)n[Y][z[x]+o]|=F,p&&(G[x]=1);for(var b=m;b<u;++b)n[Y][z[b]+o]|=F,p&&(G[b]=1)}if(!o)return $=U,q=z,W=B,V=G,rt=v,void(it=m);var _,M=$,A=q,k=V,S=0;if(s=0,p&&(_=o,o=M.length,u=ot),$=p?new Array(o+u):new Array(w),q=p?new Array(o+u):r(w,w),p&&(V=r(o+u,1)),p){var T=W.length;W=a.arrayLengthen(W,w);for(var C=0;C+T<w;C++)W[C+T]=B[C]}for(var D=0;s<o&&S<u;++D)M[s]<U[S]?($[D]=M[s],p&&(V[D]=k[s]),q[D]=A[s++]):($[D]=U[S],p&&(V[D]=G[S]),q[D]=z[S++]+(p?_:o));for(;s<o;++s,++D)$[D]=M[s],p&&(V[D]=k[s]),q[D]=A[s];for(;S<u;++S,++D)$[D]=U[S],p&&(V[D]=G[S]),q[D]=z[S]+(p?_:o);d=tt($),rt=d[0],it=d[1]}function S(t,e,n){et.forEach(function(t){t(U,z,e,n)}),U=z=null}function T(t){if(p){for(var e=0,n=0;e<Q.length;e++)t[Q[e]]!==b&&(Q[n]=t[Q[e]],n++);for(Q.length=n,e=0,n=0;e<w;e++)t[e]!==b&&(n!==e&&(W[n]=W[e]),n++);W.length=n}for(var r,i=$.length,o=0,a=0;o<i;++o)t[r=q[o]]!==b&&(o!==a&&($[a]=$[o]),q[a]=t[r],p&&(V[a]=V[o]),++a);for($.length=a,p&&(V.length=a);a<i;)q[a++]=0;var u=tt($);rt=u[0],it=u[1]}function C(t){var r=t[0],i=t[1];if(X)return X=null,O(function(t,e){return r<=e&&e<i},0===t[0]&&t[1]===$.length),rt=r,it=i,K;var o,a,u,s=[],l=[],c=[],f=[];if(r<rt)for(o=r,a=Math.min(rt,i);o<a;++o)s.push(q[o]),c.push(o);else if(r>rt)for(o=rt,a=Math.min(r,it);o<a;++o)l.push(q[o]),f.push(o);if(i>it)for(o=Math.max(r,it),a=i;o<a;++o)s.push(q[o]),c.push(o);else if(i<it)for(o=Math.max(rt,i),a=it;o<a;++o)l.push(q[o]),f.push(o);if(p){var h=[],d=[];for(o=0;o<s.length;o++)W[s[o]]++,V[c[o]]=0,1===W[s[o]]&&(n[Y][s[o]]^=F,h.push(s[o]));for(o=0;o<l.length;o++)W[l[o]]--,V[f[o]]=1,0===W[l[o]]&&(n[Y][l[o]]^=F,d.push(l[o]));if(s=h,l=d,0===t[0]&&t[1]===$.length)for(o=0;o<Q.length;o++)n[Y][u=Q[o]]&F&&(n[Y][u]^=F,s.push(u));else for(o=0;o<Q.length;o++)n[Y][u=Q[o]]&F||(n[Y][u]^=F,l.push(u))}else{for(o=0;o<s.length;o++)n[Y][s[o]]^=F;for(o=0;o<l.length;o++)n[Y][l[o]]^=F}return rt=r,it=i,_.forEach(function(t){t(F,Y,s,l)}),e("filtered"),K}function D(t){return C((tt=u.filterExact(d,t))($))}function E(t){return C((tt=u.filterRange(d,t))($))}function N(){return C((tt=u.filterAll)($))}function L(t){X=t,tt=u.filterAll,O(t,!1);var e=tt($);return rt=e[0],it=e[1],K}function O(t,r){var i,o,a,u=[],s=[],l=[],c=[],f=$.length;if(!p)for(i=0;i<f;++i)!(n[Y][o=q[i]]&F)^!!(a=t($[i],i))&&(a?u.push(o):s.push(o));if(p)for(i=0;i<f;++i)t($[i],i)?(u.push(q[i]),l.push(i)):(s.push(q[i]),c.push(i));if(p){var h=[],d=[];for(i=0;i<u.length;i++)1===V[l[i]]&&(W[u[i]]++,V[l[i]]=0,1===W[u[i]]&&(n[Y][u[i]]^=F,h.push(u[i])));for(i=0;i<s.length;i++)0===V[c[i]]&&(W[s[i]]--,V[c[i]]=1,0===W[s[i]]&&(n[Y][s[i]]^=F,d.push(s[i])));if(u=h,s=d,r)for(i=0;i<Q.length;i++)n[Y][o=Q[i]]&F&&(n[Y][o]^=F,u.push(o));else for(i=0;i<Q.length;i++)n[Y][o=Q[i]]&F||(n[Y][o]^=F,s.push(o))}else{for(i=0;i<u.length;i++)n[Y][u[i]]&F&&(n[Y][u[i]]&=I);for(i=0;i<s.length;i++)n[Y][s[i]]&F||(n[Y][s[i]]|=F)}_.forEach(function(t){t(F,Y,u,s)}),e("filtered")}function R(t){function e(e,i,s,c){function f(){p?z++:++z===U&&(S=a.arrayWiden(S,H<<=1),E=a.arrayWiden(E,H),U=o(H))}p&&(P=s,s=$.length-e.length,c=e.length);var h,m,x,b,M,A,k=D,S=p?[]:r(z,U),T=O,C=R,N=j,L=z,F=0,q=0;for(V&&(T=N=l),V&&(C=N=l),D=new Array(z),z=0,E=p?L?E:[]:L>1?a.arrayLengthen(E,w):r(w,U),L&&(x=(m=k[0]).key);q<c&&!((b=t(e[q]))>=b);)++q;for(;q<c;){for(m&&x<=b?(M=m,A=x,S[F]=z,(m=k[++F])&&(x=m.key)):(M={key:b,value:N()},A=b),D[z]=M;b<=A&&(h=i[q]+(p?P:s),p?E[h]?E[h].push(z):E[h]=[z]:E[h]=z,M.value=T(M.value,y[h],!0),n.zeroExcept(h,Y,I)||(M.value=C(M.value,y[h],!1)),!(++q>=c));)b=t(e[q]);f()}for(;F<L;)D[S[F]=z]=k[F++],f();if(p)for(var X=0;X<w;X++)E[X]||(E[X]=[]);if(z>F)if(p)for(F=0;F<P;++F)for(X=0;X<E[F].length;X++)E[F][X]=S[E[F][X]];else for(F=0;F<s;++F)E[F]=S[E[F]];h=_.indexOf(W),z>1||p?(W=u,B=g):(!z&&G&&(z=1,D=[{key:null,value:N()}]),1===z?(W=d,B=v):(W=l,B=l),E=null),_[h]=W}function i(t){if(z>1||p){var e,n,i,o=z,a=D,s=r(o,o);if(p){for(e=0,i=0;e<w;++e)if(t[e]!==b){for(E[i]=E[e],n=0;n<E[i].length;n++)s[E[i][n]]=1;++i}}else for(e=0,i=0;e<w;++e)t[e]!==b&&(s[E[i]=E[e]]=1,++i);for(D=[],z=0,e=0;e<o;++e)s[e]&&(s[e]=z++,D.push(a[e]));if(z>1||p)if(p)for(e=0;e<i;++e)for(n=0;n<E[e].length;++n)E[e][n]=s[E[e][n]];else for(e=0;e<i;++e)E[e]=s[E[e]];else E=null;_[_.indexOf(W)]=z>1||p?(B=g,W=u):1===z?(B=v,W=d):B=W=l}else if(1===z){if(G)return;for(var c=0;c<w;++c)if(t[c]!==b)return;D=[],z=0,_[_.indexOf(W)]=W=B=l}}function u(t,e,r,i,o){if(!(t===F&&e===Y||V)){var a,u,s,l,c;if(p){for(a=0,l=r.length;a<l;++a)if(n.zeroExcept(s=r[a],Y,I))for(u=0;u<E[s].length;u++)(c=D[E[s][u]]).value=O(c.value,y[s],!1,u);for(a=0,l=i.length;a<l;++a)if(n.onlyExcept(s=i[a],Y,I,e,t))for(u=0;u<E[s].length;u++)(c=D[E[s][u]]).value=R(c.value,y[s],o,u)}else{for(a=0,l=r.length;a<l;++a)n.zeroExcept(s=r[a],Y,I)&&((c=D[E[s]]).value=O(c.value,y[s],!1));for(a=0,l=i.length;a<l;++a)n.onlyExcept(s=i[a],Y,I,e,t)&&((c=D[E[s]]).value=R(c.value,y[s],o))}}}function d(t,e,r,i,o){if(!(t===F&&e===Y||V)){var a,u,s,l=D[0];for(a=0,s=r.length;a<s;++a)n.zeroExcept(u=r[a],Y,I)&&(l.value=O(l.value,y[u],!1));for(a=0,s=i.length;a<s;++a)n.onlyExcept(u=i[a],Y,I,e,t)&&(l.value=R(l.value,y[u],o))}}function g(){var t,e,r;for(t=0;t<z;++t)D[t].value=j();if(p){for(t=0;t<w;++t)for(e=0;e<E[t].length;e++)(r=D[E[t][e]]).value=O(r.value,y[t],!0,e);for(t=0;t<w;++t)if(!n.zeroExcept(t,Y,I))for(e=0;e<E[t].length;e++)(r=D[E[t][e]]).value=R(r.value,y[t],!1,e)}else{for(t=0;t<w;++t)(r=D[E[t]]).value=O(r.value,y[t],!0);for(t=0;t<w;++t)n.zeroExcept(t,Y,I)||((r=D[E[t]]).value=R(r.value,y[t],!1))}}function v(){var t,e=D[0];for(e.value=j(),t=0;t<w;++t)e.value=O(e.value,y[t],!0);for(t=0;t<w;++t)n.zeroExcept(t,Y,I)||(e.value=R(e.value,y[t],!1))}function x(){return V&&(B(),V=!1),D}function M(t,e,n){return O=t,R=e,j=n,V=!0,C}function k(){return M(m.reduceIncrement,m.reduceDecrement,c)}function S(t){function e(e){return t(e.value)}return N=f.by(e),L=h.by(e),C}function T(){var t=_.indexOf(W);return t>=0&&_.splice(t,1),(t=et.indexOf(e))>=0&&et.splice(t,1),(t=A.indexOf(i))>=0&&A.splice(t,1),C}var C={top:function(t){var e=N(x(),0,D.length,t);return L.sort(e,0,e.length)},all:x,reduce:M,reduceCount:k,reduceSum:function(t){return M(m.reduceAdd(t),m.reduceSubtract(t),c)},order:S,orderNatural:function(){return S(s)},size:function(){return z},dispose:T,remove:T};nt.push(C);var D,E,N,L,O,R,j,P,H=8,U=o(H),z=0,W=l,B=l,V=!0,G=t===l;return arguments.length<1&&(t=s),_.push(W),et.push(e),A.push(i),e($,q,0,w),k().orderNatural()}function j(){nt.forEach(function(t){t.dispose()});var t=M.indexOf(k);return t>=0&&M.splice(t,1),(t=M.indexOf(S))>=0&&M.splice(t,1),(t=A.indexOf(T))>=0&&A.splice(t,1),n.masks[Y]&=I,N()}if("string"==typeof t){var P=t;t=function(t){return x(t,P)}}var F,I,Y,H,$,q,U,z,W,B,V,G,X,Z,K={filter:function(t){return null==t?N():Array.isArray(t)?E(t):"function"==typeof t?L(t):D(t)},filterExact:D,filterRange:E,filterFunction:L,filterAll:N,top:function(t,e){var r,i=[],o=it,a=0;for(e&&e>0&&(a=e);--o>=rt&&t>0;)n.zero(r=q[o])&&(a>0?--a:(i.push(y[r]),--t));if(p)for(o=0;o<Q.length&&t>0;o++)n.zero(r=Q[o])&&(a>0?--a:(i.push(y[r]),--t));return i},bottom:function(t,e){var r,i,o=[],a=0;if(e&&e>0&&(a=e),p)for(r=0;r<Q.length&&t>0;r++)n.zero(i=Q[r])&&(a>0?--a:(o.push(y[i]),--t));for(r=rt;r<it&&t>0;)n.zero(i=q[r])&&(a>0?--a:(o.push(y[i]),--t)),r++;return o},group:R,groupAll:function(){var t=R(l),e=t.all;return delete t.all,delete t.top,delete t.order,delete t.orderNatural,delete t.size,t.value=function(){return e()[0].value},t},dispose:j,remove:j,accessor:t,id:function(){return H}},Q=[],J=v.by(function(t){return U[t]}),tt=u.filterAll,et=[],nt=[],rt=0,it=0,ot=0;M.unshift(k),M.push(S),A.push(T);var at=n.add();return Y=at.offset,F=at.one,I=~F,H=Y<<7|Math.log(F)/Math.log(2),k(y,0,w),S(y,0,w),K},groupAll:function(){function t(t,e){var r;if(!d)for(r=e;r<w;++r)u=s(u,y[r],!0),n.zero(r)||(u=l(u,y[r],!1))}function e(t,e,r,i,o){var a,c,f;if(!d){for(a=0,f=r.length;a<f;++a)n.zero(c=r[a])&&(u=s(u,y[c],o));for(a=0,f=i.length;a<f;++a)n.only(c=i[a],e,t)&&(u=l(u,y[c],o))}}function r(){var t;for(u=f(),t=0;t<w;++t)u=s(u,y[t],!0),n.zero(t)||(u=l(u,y[t],!1))}function i(t,e,n){return s=t,l=e,f=n,d=!0,h}function o(){return i(m.reduceIncrement,m.reduceDecrement,c)}function a(){var n=_.indexOf(e);return n>=0&&_.splice(n,1),(n=M.indexOf(t))>=0&&M.splice(n,1),h}var u,s,l,f,h={reduce:i,reduceCount:o,reduceSum:function(t){return i(m.reduceAdd(t),m.reduceSubtract(t),c)},value:function(){return d&&(r(),d=!1),u},dispose:a,remove:a},d=!0;return _.push(e),M.push(t),t(y,0,w),o()},size:function(){return w},all:function(){return y},allFiltered:function(){var t=[],e=0;for(e=0;e<w;e++)n.zero(e)&&t.push(y[e]);return t},onChange:function(t){if("function"==typeof t)return k.push(t),function(){k.splice(k.indexOf(t),1)};console.warn("onChange callback parameter must be a function!")},isElementFiltered:function(t,e){var r,i,o,a,u=Array(n.subarrays);for(r=0;r<n.subarrays;r++)u[r]=-1;if(e)for(i=0,a=e.length;i<a;i++)u[(o=e[i].id())>>7]&=~(1<<(63&o));return n.zeroExceptMask(t,u)}},y=[],w=0,_=[],M=[],A=[],k=[];return n=new a.bitarray(0),arguments.length?t(arguments[0]):p},n.crossfilter.heap=h,n.crossfilter.heapselect=f,n.crossfilter.bisect=d,n.crossfilter.insertionsort=p,n.crossfilter.permute=g,n.crossfilter.quicksort=v,n.crossfilter.version=y.version},{"./../package.json":3,"./array":4,"./bisect":5,"./filter":7,"./heap":8,"./heapselect":9,"./identity":10,"./insertionsort":11,"./null":12,"./permute":13,"./quicksort":14,"./reduce":15,"./zero":16,"lodash.result":2}],7:[function(t,e,n){"use strict";e.exports={filterExact:function(t,e){return function(n){var r=n.length;return[t.left(n,e,0,r),t.right(n,e,0,r)]}},filterRange:function(t,e){var n=e[0],r=e[1];return function(e){var i=e.length;return[t.left(e,n,0,i),t.left(e,r,0,i)]}},filterAll:function(t){return[0,t.length]}}},{}],8:[function(t,e,n){"use strict";function r(t){function e(t,e,r){for(var i=r-e,o=1+(i>>>1);--o>0;)n(t,o,i,e);return t}function n(e,n,r,i){for(var o,a=e[--i+n],u=t(a);(o=n<<1)<=r&&(o<r&&t(e[i+o])>t(e[i+o+1])&&o++,!(u<=t(e[i+o])));)e[i+n]=e[i+o],n=o;e[i+n]=a}return e.sort=function(t,e,r){for(var i,o=r-e;--o>0;)i=t[e],t[e]=t[e+o],t[e+o]=i,n(t,1,o,e);return t},e}var i=t("./identity");e.exports=r(i),e.exports.by=r},{"./identity":10}],9:[function(t,e,n){"use strict";function r(t){var e=o.by(t);return function(n,r,i,o){var a,u,s,l=new Array(o=Math.min(i-r,o));for(u=0;u<o;++u)l[u]=n[r++];if(e(l,0,o),r<i){a=t(l[0]);do{t(s=n[r])>a&&(l[0]=s,a=t(e(l,0,o)[0]))}while(++r<i)}return l}}var i=t("./identity"),o=t("./heap");e.exports=r(i),e.exports.by=r},{"./heap":8,"./identity":10}],10:[function(t,e,n){"use strict";e.exports=function(t){return t}},{}],11:[function(t,e,n){"use strict";function r(t){return function(e,n,r){for(var i=n+1;i<r;++i){for(var o=i,a=e[i],u=t(a);o>n&&t(e[o-1])>u;--o)e[o]=e[o-1];e[o]=a}return e}}var i=t("./identity");e.exports=r(i),e.exports.by=r},{"./identity":10}],12:[function(t,e,n){"use strict";e.exports=function(){return null}},{}],13:[function(t,e,n){"use strict";e.exports=function(t,e,n){for(var r=0,i=e.length,o=n?JSON.parse(JSON.stringify(t)):new Array(i);r<i;++r)o[r]=t[e[r]];return o}},{}],14:[function(t,e,n){function r(t){function e(t,e,i){return(i-e<a?r:n)(t,e,i)}function n(n,r,i){var o,a=(i-r)/6|0,u=r+a,s=i-1-a,l=r+i-1>>1,c=l-a,f=l+a,h=n[u],d=t(h),p=n[c],g=t(p),v=n[l],m=t(v),y=n[f],x=t(y),b=n[s],w=t(b);d>g&&(o=h,h=p,p=o,o=d,d=g,g=o),x>w&&(o=y,y=b,b=o,o=x,x=w,w=o),d>m&&(o=h,h=v,v=o,o=d,d=m,m=o),g>m&&(o=p,p=v,v=o,o=g,g=m,m=o),d>x&&(o=h,h=y,y=o,o=d,d=x,x=o),m>x&&(o=v,v=y,y=o,o=m,m=x,x=o),g>w&&(o=p,p=b,b=o,o=g,g=w,w=o),g>m&&(o=p,p=v,v=o,o=g,g=m,m=o),x>w&&(o=y,y=b,b=o,o=x,x=w,w=o);var _=p,M=g,A=y,k=x;n[u]=h,n[c]=n[r],n[l]=v,n[f]=n[i-1],n[s]=b;var S=r+1,T=i-2,C=M<=k&&M>=k;if(C)for(var D=S;D<=T;++D){var E=n[D],N=t(E);if(N<M)D!==S&&(n[D]=n[S],n[S]=E),++S;else if(N>M)for(;;){var L=t(n[T]);{if(!(L>M)){if(L<M){n[D]=n[S],n[S++]=n[T],n[T--]=E;break}n[D]=n[T],n[T--]=E;break}T--}}}else!function(){for(var e=S;e<=T;e++){var r=n[e],i=t(r);if(i<M)e!==S&&(n[e]=n[S],n[S]=r),++S;else if(i>k)for(;;){var o=t(n[T]);{if(!(o>k)){o<M?(n[e]=n[S],n[S++]=n[T],n[T--]=r):(n[e]=n[T],n[T--]=r);break}if(--T<e)break}}}}();return n[r]=n[S-1],n[S-1]=_,n[i-1]=n[T+1],n[T+1]=A,e(n,r,S-1),e(n,T+2,i),C?n:(S<u&&T>s&&function(){for(var e,r;(e=t(n[S]))<=M&&e>=M;)++S;for(;(r=t(n[T]))<=k&&r>=k;)--T;for(var i=S;i<=T;i++){var o=n[i],a=t(o);if(a<=M&&a>=M)i!==S&&(n[i]=n[S],n[S]=o),S++;else if(a<=k&&a>=k)for(;;){if(!((r=t(n[T]))<=k&&r>=k)){r<M?(n[i]=n[S],n[S++]=n[T],n[T--]=o):(n[i]=n[T],n[T--]=o);break}if(--T<i)break}}}(),e(n,S,T+1))}var r=o.by(t);return e}var i=t("./identity"),o=t("./insertionsort"),a=32;e.exports=r(i),e.exports.by=r},{"./identity":10,"./insertionsort":11}],15:[function(t,e,n){"use strict";e.exports={reduceIncrement:function(t){return t+1},reduceDecrement:function(t){return t-1},reduceAdd:function(t){return function(e,n){return e+ +t(n)}},reduceSubtract:function(t){return function(e,n){return e-t(n)}}}},{}],16:[function(t,e,n){"use strict";e.exports=function(){return 0}},{}]},{},[1])(1)}),function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;"undefined"!=typeof window?e=window:"undefined"!=typeof global?e=global:"undefined"!=typeof self&&(e=self),e.reductio=t()}}(function(){return function t(e,n,r){function i(a,u){if(!n[a]){if(!e[a]){var s="function"==typeof require&&require;if(!u&&s)return s(a,!0);if(o)return o(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[a]={exports:{}};e[a][0].call(c.exports,function(t){var n=e[a][1][t];return i(n||t)},c,c.exports,t,e,n,r)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(t,e,n){(function(n){function r(){function t(t){if(n={reduceAdd:function(t){return t},reduceRemove:function(t){return t},reduceInitial:function(){return{}}},i.build(e,n),e.groupAll)if(t.top)console.warn("'groupAll' is defined but attempting to run on a standard dimension.group(). Must run on dimension.groupAll().");else{var r,o,a,l,c,f=s.bisect.by(function(t){return t.key}).left;t.reduce(function(t,i,u){for(a=e.groupAll(i),l=a.length,o=0;o<l;o++)c=a[o],t[r=f(t,c,0,t.length)]&&t[r].key===c||t.splice(r,0,{key:c,value:n.reduceInitial()}),n.reduceAdd(t[r].value,i,u);return t},function(t,i,u){for(a=e.groupAll(i),l=a.length,o=0;o<l;o++)r=f(t,a[o],0,t.length),n.reduceRemove(t[r].value,i,u);return t},function(){return[]}),t.all||(t.all=function(){return this.value()})}else t.reduce(n.reduceAdd,n.reduceRemove,n.reduceInitial);return u(t,e,n),t}var e=a(),n={};return o.build(t,e),t}var i=t("./build.js"),o=t("./accessors.js"),a=t("./parameters.js"),u=t("./postprocess"),s="undefined"!=typeof window?window.crossfilter:void 0!==n?n.crossfilter:null;t("./postprocessors")(r),u=u(r),e.exports=r}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./accessors.js":2,"./build.js":6,"./parameters.js":19,"./postprocess":20,"./postprocessors":21}],2:[function(t,e,n){function r(t,e){function n(t){if("string"==typeof t){var e=t;return function(t){return t[e]}}return t}function o(t){if("string"==typeof t){var e=t;return function(t){return+t[e]}}return t}t.fromObject=function(n){return arguments.length?(_assign(e,n),t):e},t.toObject=function(){return e},t.count=function(n,r){return arguments.length?(r||(r="count"),e.count=r,t):e.count},t.sum=function(n){return arguments.length?(n=o(n),e.sum=n,t):e.sum},t.avg=function(n){return arguments.length?("function"==typeof(n=o(n))?(e.sum&&e.sum!==n&&console.warn("SUM aggregation is being overwritten by AVG aggregation"),e.sum=n,e.avg=!0,e.count="count"):e.avg=n,t):e.avg},t.exception=function(r){return arguments.length?(r=n(r),e.exceptionAccessor=r,t):e.exceptionAccessor},t.filter=function(n){return arguments.length?(e.filter=n,t):e.filter},t.valueList=function(r){return arguments.length?(r=n(r),e.valueList=r,t):e.valueList},t.median=function(n){return arguments.length?("function"==typeof(n=o(n))&&(e.valueList&&e.valueList!==n&&console.warn("VALUELIST accessor is being overwritten by median aggregation"),e.valueList=n),e.median=n,t):e.median},t.min=function(n){return arguments.length?("function"==typeof(n=o(n))&&(e.valueList&&e.valueList!==n&&console.warn("VALUELIST accessor is being overwritten by min aggregation"),e.valueList=n),e.min=n,t):e.min},t.max=function(n){return arguments.length?("function"==typeof(n=o(n))&&(e.valueList&&e.valueList!==n&&console.warn("VALUELIST accessor is being overwritten by max aggregation"),e.valueList=n),e.max=n,t):e.max},t.exceptionCount=function(r){return arguments.length?("function"==typeof(r=n(r))?(e.exceptionAccessor&&e.exceptionAccessor!==r&&console.warn("EXCEPTION accessor is being overwritten by exception count aggregation"),e.exceptionAccessor=r,e.exceptionCount=!0):e.exceptionCount=r,t):e.exceptionCount},t.exceptionSum=function(n){return arguments.length?(n=o(n),e.exceptionSum=n,t):e.exceptionSum},t.histogramValue=function(n){return arguments.length?(n=o(n),e.histogramValue=n,t):e.histogramValue},t.histogramBins=function(n){return arguments.length?(e.histogramThresholds=n,t):e.histogramThresholds},t.std=function(n){return arguments.length?("function"==typeof(n=o(n))?(e.sumOfSquares=n,e.sum=n,e.count="count",e.std=!0):e.std=n,t):e.std},t.sumOfSq=function(n){return arguments.length?(n=o(n),e.sumOfSquares=n,t):e.sumOfSquares},t.value=function(t,n){if(arguments.length&&"string"==typeof t)return e.values||(e.values={}),e.values[t]={},e.values[t].parameters=i(),r(e.values[t],e.values[t].parameters),n&&(e.values[t].accessor=n),e.values[t];console.error("'value' requires a string argument.")},t.nest=function(r){return arguments.length?(r.map(n),e.nestKeys=r,t):e.nestKeys},t.alias=function(n){return arguments.length?(e.aliasKeys=n,t):e.aliasKeys},t.aliasProp=function(n){return arguments.length?(e.aliasPropKeys=n,t):e.aliasPropKeys},t.groupAll=function(n){return arguments.length?(e.groupAll=n,t):e.groupAll},t.dataList=function(n){return arguments.length?(e.dataList=n,t):e.dataList},t.custom=function(n){return arguments.length?(e.custom=n,t):e.custom}}var i=t("./parameters.js");_assign=function(t){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;++n){var r=arguments[n];if(null!=r)for(var i in r)r.hasOwnProperty(i)&&(e[i]=r[i])}return e};var o={build:r};e.exports=o},{"./parameters.js":19}],3:[function(t,e,n){var r={initial:function(t,e,n){return function(r){t&&(r=t(r));for(var i in n)e(r)[i]=function(t){return function(){return n[t](e(r))}}(i);return r}}};e.exports=r},{}],4:[function(t,e,n){var r={add:function(t,e,n){return function(r,i,o){e&&e(r,i,o);for(var a in t)n(r)[a]=t[a](n(r),i);return r}}};e.exports=r},{}],5:[function(t,e,n){var r={add:function(t,e,n){return function(t,r,i){return e&&e(t,r,i),n(t).count>0?n(t).avg=n(t).sum/n(t).count:n(t).avg=0,t}},remove:function(t,e,n){return function(t,r,i){return e&&e(t,r,i),n(t).count>0?n(t).avg=n(t).sum/n(t).count:n(t).avg=0,t}},initial:function(t,e){return function(n){return n=t(n),e(n).avg=0,n}}};e.exports=r},{}],6:[function(t,e,n){function r(t,e,n){n||(n=function(t){return t});var M={reduceAdd:e.reduceAdd,reduceRemove:e.reduceRemove,reduceInitial:e.reduceInitial};(t.count||t.std)&&(e.reduceAdd=o.add(e.reduceAdd,n,t.count),e.reduceRemove=o.remove(e.reduceRemove,n,t.count),e.reduceInitial=o.initial(e.reduceInitial,n,t.count)),t.sum&&(e.reduceAdd=a.add(t.sum,e.reduceAdd,n),e.reduceRemove=a.remove(t.sum,e.reduceRemove,n),e.reduceInitial=a.initial(e.reduceInitial,n)),t.avg&&(t.count&&t.sum?(e.reduceAdd=u.add(t.sum,e.reduceAdd,n),e.reduceRemove=u.remove(t.sum,e.reduceRemove,n),e.reduceInitial=u.initial(e.reduceInitial,n)):console.error("You must set .count(true) and define a .sum(accessor) to use .avg(true).")),t.exceptionCount&&(t.exceptionAccessor?(e.reduceAdd=d.add(t.exceptionAccessor,e.reduceAdd,n),e.reduceRemove=d.remove(t.exceptionAccessor,e.reduceRemove,n),e.reduceInitial=d.initial(e.reduceInitial,n)):console.error("You must define an .exception(accessor) to use .exceptionCount(true).")),t.exceptionSum&&(t.exceptionAccessor?(e.reduceAdd=p.add(t.exceptionAccessor,t.exceptionSum,e.reduceAdd,n),e.reduceRemove=p.remove(t.exceptionAccessor,t.exceptionSum,e.reduceRemove,n),e.reduceInitial=p.initial(e.reduceInitial,n)):console.error("You must define an .exception(accessor) to use .exceptionSum(accessor).")),(t.valueList||t.median||t.min||t.max)&&(e.reduceAdd=h.add(t.valueList,e.reduceAdd,n),e.reduceRemove=h.remove(t.valueList,e.reduceRemove,n),e.reduceInitial=h.initial(e.reduceInitial,n)),t.dataList&&(e.reduceAdd=w.add(t.dataList,e.reduceAdd,n),e.reduceRemove=w.remove(t.dataList,e.reduceRemove,n),e.reduceInitial=w.initial(e.reduceInitial,n)),t.median&&(e.reduceAdd=s.add(e.reduceAdd,n),e.reduceRemove=s.remove(e.reduceRemove,n),e.reduceInitial=s.initial(e.reduceInitial,n)),t.min&&(e.reduceAdd=l.add(e.reduceAdd,n),e.reduceRemove=l.remove(e.reduceRemove,n),e.reduceInitial=l.initial(e.reduceInitial,n)),t.max&&(e.reduceAdd=c.add(e.reduceAdd,n),e.reduceRemove=c.remove(e.reduceRemove,n),e.reduceInitial=c.initial(e.reduceInitial,n)),t.exceptionAccessor&&(e.reduceAdd=f.add(t.exceptionAccessor,e.reduceAdd,n),e.reduceRemove=f.remove(t.exceptionAccessor,e.reduceRemove,n),e.reduceInitial=f.initial(e.reduceInitial,n)),t.histogramValue&&t.histogramThresholds&&(e.reduceAdd=g.add(t.histogramValue,e.reduceAdd,n),e.reduceRemove=g.remove(t.histogramValue,e.reduceRemove,n),e.reduceInitial=g.initial(t.histogramThresholds,e.reduceInitial,n)),t.sumOfSquares&&(e.reduceAdd=v.add(t.sumOfSquares,e.reduceAdd,n),e.reduceRemove=v.remove(t.sumOfSquares,e.reduceRemove,n),e.reduceInitial=v.initial(e.reduceInitial,n)),t.std&&(t.sumOfSquares&&t.sum?(e.reduceAdd=m.add(e.reduceAdd,n),e.reduceRemove=m.remove(e.reduceRemove,n),e.reduceInitial=m.initial(e.reduceInitial,n)):console.error("You must set .sumOfSq(accessor) and define a .sum(accessor) to use .std(true). Or use .std(accessor).")),t.custom&&(e.reduceAdd=_.add(e.reduceAdd,n,t.custom.add),e.reduceRemove=_.remove(e.reduceRemove,n,t.custom.remove),e.reduceInitial=_.initial(e.reduceInitial,n,t.custom.initial)),t.nestKeys&&(e.reduceAdd=y.add(t.nestKeys,e.reduceAdd,n),e.reduceRemove=y.remove(t.nestKeys,e.reduceRemove,n),e.reduceInitial=y.initial(e.reduceInitial,n)),t.aliasKeys&&(e.reduceInitial=x.initial(e.reduceInitial,n,t.aliasKeys)),t.aliasPropKeys&&(e.reduceAdd=b.add(t.aliasPropKeys,e.reduceAdd,n),e.reduceRemove=b.add(t.aliasPropKeys,e.reduceRemove,n)),t.filter&&(e.reduceAdd=i.add(t.filter,e.reduceAdd,M.reduceAdd,n),e.reduceRemove=i.remove(t.filter,e.reduceRemove,M.reduceRemove,n)),t.values&&Object.getOwnPropertyNames(t.values).forEach(function(i){e.reduceInitial=function(t){return function(e){return e=t(e),n(e)[i]={},e}}(e.reduceInitial),r(t.values[i].parameters,e,function(t){return t[i]})})}var i=t("./filter.js"),o=t("./count.js"),a=t("./sum.js"),u=t("./avg.js"),s=t("./median.js"),l=t("./min.js"),c=t("./max.js"),f=t("./value-count.js"),h=t("./value-list.js"),d=t("./exception-count.js"),p=t("./exception-sum.js"),g=t("./histogram.js"),v=t("./sum-of-squares.js"),m=t("./std.js"),y=t("./nest.js"),x=t("./alias.js"),b=t("./aliasProp.js"),w=t("./data-list.js"),_=t("./custom.js"),M={build:r};e.exports=M},{"./alias.js":3,"./aliasProp.js":4,"./avg.js":5,"./count.js":8,"./custom.js":9,"./data-list.js":10,"./exception-count.js":11,"./exception-sum.js":12,"./filter.js":13,"./histogram.js":14,"./max.js":15,"./median.js":16,"./min.js":17,"./nest.js":18,"./std.js":23,"./sum-of-squares.js":24,"./sum.js":25,"./value-count.js":26,"./value-list.js":27}],7:[function(t,e,n){var r=function(t){return function(e){return e[t]}};_grouper=function(t,e){return t||(t=function(t){return t}),function(n,r){e&&e(n,r);var i=t(n),o=t(r);return void 0!==o.count&&(i.count+=o.count),void 0!==o.sum&&(i.sum+=o.sum),void 0!==o.avg&&(i.avg=i.sum/i.count),n}},reductio_cap=function(t,e,n){e.reduceInitial();var i=n.values?Object.keys(n.values):[],o=_grouper();if(i.length)for(var a=0;a<i.length;++a)o=_grouper(r(i[a]),o);return function(n,r){if(!arguments.length)return t();if(n===1/0||!n)return t();var i=t(),a=n-1;if(i.length<=n)return i;var u=i.slice(0,a),s={key:r||"Others"};s.value=e.reduceInitial();for(var l=a;l<i.length;++l)o(s.value,i[l].value);return u.push(s),u}},e.exports=reductio_cap},{}],8:[function(t,e,n){var r={add:function(t,e,n){return function(r,i,o){return t&&t(r,i,o),e(r)[n]++,r}},remove:function(t,e,n){return function(r,i,o){return t&&t(r,i,o),e(r)[n]--,r}},initial:function(t,e,n){return function(r){return t&&(r=t(r)),e(r)[n]=0,r}}};e.exports=r},{}],9:[function(t,e,n){var r={add:function(t,e,n){return function(e,r,i){return t&&t(e,r,i),n(e,r)}},remove:function(t,e,n){return function(e,r,i){return t&&t(e,r,i),n(e,r)}},initial:function(t,e,n){return function(e){return t&&(e=t(e)),n(e)}}};e.exports=r},{}],10:[function(t,e,n){var r={add:function(t,e,n){return function(t,r,i){return e&&e(t,r,i),n(t).dataList.push(r),t}},remove:function(t,e,n){return function(t,r,i){return e&&e(t,r,i),n(t).dataList.splice(n(t).dataList.indexOf(r),1),t}},initial:function(t,e){return function(n){return t&&(n=t(n)),e(n).dataList=[],n}}};e.exports=r},{}],11:[function(t,e,n){var r={add:function(t,e,n){var r,i;return function(o,a,u){return e&&e(o,a,u),r=n(o).bisect(n(o).values,t(a),0,n(o).values.length),(i=n(o).values[r])&&i[0]===t(a)&&0!==i[1]||n(o).exceptionCount++,o}},remove:function(t,e,n){var r,i;return function(o,a,u){return e&&e(o,a,u),r=n(o).bisect(n(o).values,t(a),0,n(o).values.length),(i=n(o).values[r])&&i[0]===t(a)&&1===i[1]&&n(o).exceptionCount--,o}},initial:function(t,e){return function(n){return n=t(n),e(n).exceptionCount=0,n}}};e.exports=r},{}],12:[function(t,e,n){var r={add:function(t,e,n,r){var i,o;return function(a,u,s){return n&&n(a,u,s),i=r(a).bisect(r(a).values,t(u),0,r(a).values.length),(o=r(a).values[i])&&o[0]===t(u)&&0!==o[1]||(r(a).exceptionSum=r(a).exceptionSum+e(u)),a}},remove:function(t,e,n,r){var i,o;return function(a,u,s){return n&&n(a,u,s),i=r(a).bisect(r(a).values,t(u),0,r(a).values.length),(o=r(a).values[i])&&o[0]===t(u)&&1===o[1]&&(r(a).exceptionSum=r(a).exceptionSum-e(u)),a}},initial:function(t,e){return function(n){return n=t(n),e(n).exceptionSum=0,n}}};e.exports=r},{}],13:[function(t,e,n){var r={add:function(t,e,n){return function(r,i,o){return t(i,o)?e&&e(r,i,o):n&&n(r,i,o),r}},remove:function(t,e,n){return function(r,i,o){return t(i,o)?e&&e(r,i,o):n&&n(r,i,o),r}}};e.exports=r},{}],14:[function(t,e,n){(function(t){var n="undefined"!=typeof window?window.crossfilter:void 0!==t?t.crossfilter:null,r={add:function(t,e,r){var i,o=n.bisect.by(function(t){return t}).left,a=n.bisect.by(function(t){return t.x}).right;return function(n,u,s){return e&&e(n,u,s),i=r(n).histogram[a(r(n).histogram,t(u),0,r(n).histogram.length)-1],i.y++,i.splice(o(i,t(u),0,i.length),0,t(u)),n}},remove:function(t,e,r){var i,o=n.bisect.by(function(t){return t}).left,a=n.bisect.by(function(t){return t.x}).right;return function(n,u,s){return e&&e(n,u,s),i=r(n).histogram[a(r(n).histogram,t(u),0,r(n).histogram.length)-1],i.y--,i.splice(o(i,t(u),0,i.length),1),n}},initial:function(t,e,n){return function(r){r=e(r),n(r).histogram=[];for(var i=[],o=1;o<t.length;o++)(i=[]).x=t[o-1],i.dx=t[o]-t[o-1],i.y=0,n(r).histogram.push(i);return r}}};e.exports=r}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],15:[function(t,e,n){var r={add:function(t,e){return function(n,r,i){return t&&t(n,r,i),e(n).max=e(n).valueList[e(n).valueList.length-1],n}},remove:function(t,e){return function(n,r,i){return t&&t(n,r,i),0===e(n).valueList.length?(e(n).max=void 0,n):(e(n).max=e(n).valueList[e(n).valueList.length-1],n)}},initial:function(t,e){return function(n){return n=t(n),e(n).max=void 0,n}}};e.exports=r},{}],16:[function(t,e,n){var r={add:function(t,e){var n;return function(r,i,o){return t&&t(r,i,o),n=Math.floor(e(r).valueList.length/2),e(r).valueList.length%2?e(r).median=e(r).valueList[n]:e(r).median=(e(r).valueList[n-1]+e(r).valueList[n])/2,r}},remove:function(t,e){var n;return function(r,i,o){return t&&t(r,i,o),n=Math.floor(e(r).valueList.length/2),0===e(r).valueList.length?(e(r).median=void 0,r):(1===e(r).valueList.length||e(r).valueList.length%2?e(r).median=e(r).valueList[n]:e(r).median=(e(r).valueList[n-1]+e(r).valueList[n])/2,r)}},initial:function(t,e){return function(n){return n=t(n),e(n).median=void 0,n}}};e.exports=r},{}],17:[function(t,e,n){var r={add:function(t,e){return function(n,r,i){return t&&t(n,r,i),e(n).min=e(n).valueList[0],n}},remove:function(t,e){return function(n,r,i){return t&&t(n,r,i),0===e(n).valueList.length?(e(n).min=void 0,n):(e(n).min=e(n).valueList[0],n)}},initial:function(t,e){return function(n){return n=t(n),e(n).min=void 0,n}}};e.exports=r},{}],18:[function(t,e,n){(function(t){"undefined"!=typeof window?window.crossfilter:void 0!==t&&t.crossfilter;var n={add:function(t,e,n){var r,i;return function(o,a,u){return e&&e(o,a,u),r=n(o).nest,t.forEach(function(t){(i=r.filter(function(e){return e.key===t(a)})[0])?r=i.values:(i=[],r.push({key:t(a),values:i}),r=i)}),r.push(a),o}},remove:function(t,e,n){var r;return function(i,o,a){return e&&e(i,o,a),r=n(i).nest,t.forEach(function(t){r=r.filter(function(e){return e.key===t(o)})[0].values}),r.splice(r.indexOf(o),1),i}},initial:function(t,e){return function(n){return n=t(n),e(n).nest=[],n}}};e.exports=n}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],19:[function(t,e,n){e.exports=function(){return{order:!1,avg:!1,count:!1,sum:!1,exceptionAccessor:!1,exceptionCount:!1,exceptionSum:!1,filter:!1,valueList:!1,median:!1,histogramValue:!1,min:!1,max:!1,histogramThresholds:!1,std:!1,sumOfSquares:!1,values:!1,nestKeys:!1,aliasKeys:!1,aliasPropKeys:!1,groupAll:!1,dataList:!1,custom:!1}}},{}],20:[function(t,e,n){e.exports=function(t){return function(e,n,r){e.post=function(){var i=function(){return i.all()};i.all=function(){return e.all()};var o=t.postprocessors;return Object.keys(o).forEach(function(t){i[t]=function(){var e=i.all,a=[].slice.call(arguments);return i.all=function(){return o[t](e,r,n).apply(null,a)},i}}),i}}}},{}],21:[function(t,e,n){e.exports=function(e){e.postprocessors={},e.registerPostProcessor=function(t,n){e.postprocessors[t]=n},e.registerPostProcessor("cap",t("./cap")),e.registerPostProcessor("sortBy",t("./sortBy"))}},{"./cap":7,"./sortBy":22}],22:[function(t,e,n){function r(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var i=function(t){if("function"==typeof t)return t;if(~t.indexOf(".")){var e=t.split(".");return function(t){return e.reduce(function(t,e){return t[e]},t)}}return function(e){return e[t]}},o=function(t,e){return function(n,r){return e(t(n),t(r))}};e.exports=function(t){return function(e,n){return 1===arguments.length&&(n=r),t().sort(o(i(e),n))}}},{}],23:[function(t,e,n){var r={add:function(t,e){return function(n,r,i){if(t&&t(n,r,i),e(n).count>0){e(n).std=0;var o=e(n).sumOfSq-e(n).sum*e(n).sum/e(n).count;o>0&&(e(n).std=Math.sqrt(o/(e(n).count-1)))}else e(n).std=0;return n}},remove:function(t,e){return function(n,r,i){if(t&&t(n,r,i),e(n).count>0){e(n).std=0;var o=e(n).sumOfSq-e(n).sum*e(n).sum/e(n).count;o>0&&(e(n).std=Math.sqrt(o/(e(n).count-1)))}else e(n).std=0;return n}},initial:function(t,e){return function(n){return n=t(n),e(n).std=0,n}}};e.exports=r},{}],24:[function(t,e,n){var r={add:function(t,e,n){return function(r,i,o){return e&&e(r,i,o),n(r).sumOfSq=n(r).sumOfSq+t(i)*t(i),r}},remove:function(t,e,n){return function(r,i,o){return e&&e(r,i,o),n(r).sumOfSq=n(r).sumOfSq-t(i)*t(i),r}},initial:function(t,e){return function(n){return n=t(n),e(n).sumOfSq=0,n}}};e.exports=r},{}],25:[function(t,e,n){var r={add:function(t,e,n){return function(r,i,o){return e&&e(r,i,o),n(r).sum=n(r).sum+t(i),r}},remove:function(t,e,n){return function(r,i,o){return e&&e(r,i,o),n(r).sum=n(r).sum-t(i),r}},initial:function(t,e){return function(n){return n=t(n),e(n).sum=0,n}}};e.exports=r},{}],26:[function(t,e,n){(function(t){var n="undefined"!=typeof window?window.crossfilter:void 0!==t?t.crossfilter:null,r={add:function(t,e,n){var r,i;return function(o,a,u){return e&&e(o,a,u),r=n(o).bisect(n(o).values,t(a),0,n(o).values.length),(i=n(o).values[r])&&i[0]===t(a)?i[1]++:n(o).values.splice(r,0,[t(a),1]),o}},remove:function(t,e,n){var r;return function(i,o,a){return e&&e(i,o,a),r=n(i).bisect(n(i).values,t(o),0,n(i).values.length),n(i).values[r][1]--,i}},initial:function(t,e){return function(r){return r=t(r),e(r).values=[],e(r).bisect=n.bisect.by(function(t){return t[0]}).left,r}}};e.exports=r}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],27:[function(t,e,n){(function(t){var n="undefined"!=typeof window?window.crossfilter:void 0!==t?t.crossfilter:null,r={add:function(t,e,r){var i,o=n.bisect.by(function(t){return t}).left;return function(n,a,u){return e&&e(n,a,u),i=o(r(n).valueList,t(a),0,r(n).valueList.length),r(n).valueList.splice(i,0,t(a)),n}},remove:function(t,e,r){var i,o=n.bisect.by(function(t){return t}).left;return function(n,a,u){return e&&e(n,a,u),i=o(r(n).valueList,t(a),0,r(n).valueList.length),r(n).valueList.splice(i,1),n}},initial:function(t,e){return function(n){return n=t(n),e(n).valueList=[],n}}};e.exports=r}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}),function(){function t(t,e){"use strict";var n={version:"2.1.8",constants:{CHART_CLASS:"dc-chart",DEBUG_GROUP_CLASS:"debug",STACK_CLASS:"stack",DESELECTED_CLASS:"deselected",SELECTED_CLASS:"selected",NODE_INDEX_NAME:"__index__",GROUP_INDEX_NAME:"__group_index__",DEFAULT_CHART_GROUP:"__default_chart_group__",EVENT_DELAY:40,NEGLIGIBLE_NUMBER:1e-10},_renderlet:null};n.chartRegistry=function(){function t(t){return t||(t=n.constants.DEFAULT_CHART_GROUP),e[t]||(e[t]=[]),t}var e={};return{has:function(t){for(var n in e)if(e[n].indexOf(t)>=0)return!0;return!1},register:function(n,r){r=t(r),e[r].push(n)},deregister:function(n,r){r=t(r);for(var i=0;i<e[r].length;i++)if(e[r][i].anchorName()===n.anchorName()){e[r].splice(i,1);break}},clear:function(t){t?delete e[t]:e={}},list:function(n){return n=t(n),e[n]}}}(),n.registerChart=function(t,e){n.chartRegistry.register(t,e)},n.deregisterChart=function(t,e){n.chartRegistry.deregister(t,e)},n.hasChart=function(t){return n.chartRegistry.has(t)},n.deregisterAllCharts=function(t){n.chartRegistry.clear(t)},n.filterAll=function(t){for(var e=n.chartRegistry.list(t),r=0;r<e.length;++r)e[r].filterAll()},n.refocusAll=function(t){for(var e=n.chartRegistry.list(t),r=0;r<e.length;++r)e[r].focus&&e[r].focus()},n.renderAll=function(t){for(var e=n.chartRegistry.list(t),r=0;r<e.length;++r)e[r].render();null!==n._renderlet&&n._renderlet(t)},n.redrawAll=function(t){for(var e=n.chartRegistry.list(t),r=0;r<e.length;++r)e[r].redraw();null!==n._renderlet&&n._renderlet(t)},n.disableTransitions=!1,n.transition=function(t,e,r,i){if(n.disableTransitions||e<=0)return t;var o=t.transition(i);return(e>=0||void 0!==e)&&(o=o.duration(e)),(r>=0||void 0!==r)&&(o=o.delay(r)),o},n.optionalTransition=function(t,e,r,i){return t?function(t){return n.transition(t,e,r,i)}:function(t){return t}},n.afterTransition=function(t,e){if(t.empty()||!t.duration)e.call(t);else{var n=0;t.each(function(){++n}).each("end",function(){--n||e.call(t)})}},n.units={},n.units.integers=function(t,e){return Math.abs(e-t)},n.units.ordinal=function(t,e,n){return n},n.units.fp={},n.units.fp.precision=function(t){var e=function(t,r){var i=Math.abs((r-t)/e.resolution);return n.utils.isNegligible(i-Math.floor(i))?Math.floor(i):Math.ceil(i)};return e.resolution=t,e},n.round={},n.round.floor=function(t){return Math.floor(t)},n.round.ceil=function(t){return Math.ceil(t)},n.round.round=function(t){return Math.round(t)},n.override=function(t,e,n){var r=t[e];t["_"+e]=r,t[e]=n},n.renderlet=function(t){return arguments.length?(n._renderlet=t,n):n._renderlet},n.instanceOfChart=function(t){return t instanceof Object&&t.__dcFlag__&&!0},n.errors={},n.errors.Exception=function(t){var e=t||"Unexpected internal error";this.message=e,this.toString=function(){return e},this.stack=(new Error).stack},n.errors.Exception.prototype=Object.create(Error.prototype),n.errors.Exception.prototype.constructor=n.errors.Exception,n.errors.InvalidStateException=function(){n.errors.Exception.apply(this,arguments)},n.errors.InvalidStateException.prototype=Object.create(n.errors.Exception.prototype),n.errors.InvalidStateException.prototype.constructor=n.errors.InvalidStateException,n.errors.BadArgumentException=function(){n.errors.Exception.apply(this,arguments)},n.errors.BadArgumentException.prototype=Object.create(n.errors.Exception.prototype),n.errors.BadArgumentException.prototype.constructor=n.errors.BadArgumentException,n.dateFormat=t.time.format("%m/%d/%Y"),n.printers={},n.printers.filters=function(t){for(var e="",r=0;r<t.length;++r)r>0&&(e+=", "),e+=n.printers.filter(t[r]);return e},n.printers.filter=function(t){var e="";return void 0!==t&&null!==t&&(t instanceof Array?t.length>=2?e="["+n.utils.printSingleValue(t[0])+" -> "+n.utils.printSingleValue(t[1])+"]":t.length>=1&&(e=n.utils.printSingleValue(t[0])):e=n.utils.printSingleValue(t)),e},n.pluck=function(t,e){return e?function(n,r){return e.call(n,n[t],r)}:function(e){return e[t]}},n.utils={},n.utils.printSingleValue=function(t){var e=""+t;return t instanceof Date?e=n.dateFormat(t):"string"==typeof t?e=t:n.utils.isFloat(t)?e=n.utils.printSingleValue.fformat(t):n.utils.isInteger(t)&&(e=Math.round(t)),e},n.utils.printSingleValue.fformat=t.format(".2f"),n.utils.add=function(e,n,r){if("string"==typeof n&&(n=n.replace("%","")),e instanceof Date)return"string"==typeof n&&(n=+n),"millis"===r?new Date(e.getTime()+n):(r=r||"day",t.time[r].offset(e,n));if("string"==typeof n){var i=+n/100;return e>0?e*(1+i):e*(1-i)}return e+n},n.utils.subtract=function(e,n,r){if("string"==typeof n&&(n=n.replace("%","")),e instanceof Date)return"string"==typeof n&&(n=+n),"millis"===r?new Date(e.getTime()-n):(r=r||"day",t.time[r].offset(e,-n));if("string"==typeof n){var i=+n/100;return e<0?e*(1+i):e*(1-i)}return e-n},n.utils.isNumber=function(t){return t===+t},n.utils.isFloat=function(t){return t===+t&&t!==(0|t)},n.utils.isInteger=function(t){return t===+t&&t===(0|t)},n.utils.isNegligible=function(t){return!n.utils.isNumber(t)||t<n.constants.NEGLIGIBLE_NUMBER&&t>-n.constants.NEGLIGIBLE_NUMBER},n.utils.clamp=function(t,e,n){return t<e?e:t>n?n:t};var r=0;return n.utils.uniqueId=function(){return++r},n.utils.nameToId=function(t){return t.toLowerCase().replace(/[\s]/g,"_").replace(/[\.']/g,"")},n.utils.appendOrSelect=function(t,e,n){n=n||e;var r=t.select(e);return r.empty()&&(r=t.append(n)),r},n.utils.safeNumber=function(t){return n.utils.isNumber(+t)?+t:0},n.logger={},n.logger.enableDebugLog=!1,n.logger.warn=function(t){return console&&(console.warn?console.warn(t):console.log&&console.log(t)),n.logger},n.logger.debug=function(t){return n.logger.enableDebugLog&&console&&(console.debug?console.debug(t):console.log&&console.log(t)),n.logger},n.logger.deprecate=function(t,e){var r=!1;return function(){return r||(n.logger.warn(e),r=!0),t.apply(this,arguments)}},n.events={current:null},n.events.trigger=function(t,e){e?(n.events.current=t,setTimeout(function(){t===n.events.current&&t()},e)):t()},n.filters={},n.filters.RangedFilter=function(t,e){var n=new Array(t,e);return n.isFiltered=function(t){return t>=this[0]&&t<this[1]},n.filterType="RangedFilter",n},n.filters.TwoDimensionalFilter=function(t){if(null===t)return null;var e=t;return e.isFiltered=function(t){return t.length&&t.length===e.length&&t[0]===e[0]&&t[1]===e[1]},e.filterType="TwoDimensionalFilter",e},n.filters.RangedTwoDimensionalFilter=function(t){if(null===t)return null;var e,n=t;return e=n[0]instanceof Array?[[Math.min(t[0][0],t[1][0]),Math.min(t[0][1],t[1][1])],[Math.max(t[0][0],t[1][0]),Math.max(t[0][1],t[1][1])]]:[[t[0],-1/0],[t[1],1/0]],n.isFiltered=function(t){var n,r;return t instanceof Array?(n=t[0],r=t[1]):(n=t,r=e[0][1]),n>=e[0][0]&&n<e[1][0]&&r>=e[0][1]&&r<e[1][1]},n.filterType="RangedTwoDimensionalFilter",n},n.baseMixin=function(r){function i(){h&&(k?h.attr("viewBox")||h.attr("viewBox","0 0 "+r.width()+" "+r.height()):h.attr("width",r.width()).attr("height",r.height()))}function o(){return h=r.root().append("svg"),i(),h}function a(t){if(!r[t]||!r[t]())throw new n.errors.InvalidStateException("Mandatory attribute chart."+t+" is missing on chart[#"+r.anchorName()+"]")}function u(t){if(r.dimension()&&r.dimension().filter){var e=$(r.dimension(),t);e&&(t=e)}return t}r.__dcFlag__=n.utils.uniqueId();var s,l,c,f,h,d,p,g,v,m,y,x=200,b=function(t){var e=t&&t.getBoundingClientRect&&t.getBoundingClientRect().width;return e&&e>x?e:x},w=b,_=200,M=function(t){var e=t&&t.getBoundingClientRect&&t.getBoundingClientRect().height;return e&&e>_?e:_},A=M,k=!1,S=n.pluck("key"),T=n.pluck("value"),C=n.pluck("key"),D=n.pluck("key"),E=!1,N=function(t){return r.keyAccessor()(t)+": "+r.valueAccessor()(t)},L=!0,O=!1,R=750,j=0,P=n.printers.filters,F=["dimension","group"],I=n.constants.DEFAULT_CHART_GROUP,Y=t.dispatch("preRender","postRender","preRedraw","postRedraw","filtered","zoomed","renderlet","pretransition"),H=[],$=function(t,e){return 0===e.length?t.filter(null):1!==e.length||e[0].isFiltered?1===e.length&&"RangedFilter"===e[0].filterType?t.filterRange(e[0]):t.filterFunction(function(t){for(var n=0;n<e.length;n++){var r=e[n];if(r.isFiltered&&r.isFiltered(t))return!0;if(r<=t&&r>=t)return!0}return!1}):t.filterExact(e[0]),e},q=function(t){return t.all()};r.height=function(e){return arguments.length?(A=t.functor(e||M),g=void 0,r):(n.utils.isNumber(g)||(g=A(f.node())),g)},r.width=function(e){return arguments.length?(w=t.functor(e||b),p=void 0,r):(n.utils.isNumber(p)||(p=w(f.node())),p)},r.minWidth=function(t){return arguments.length?(x=t,r):x},r.minHeight=function(t){return arguments.length?(_=t,r):_},r.useViewBoxResizing=function(t){return arguments.length?(k=t,r):k},r.dimension=function(t){return arguments.length?(s=t,r.expireCache(),r):s},r.data=function(e){return arguments.length?(q=t.functor(e),r.expireCache(),r):q.call(r,l)},r.group=function(t,e){return arguments.length?(l=t,r._groupName=e,r.expireCache(),r):l},r.ordering=function(t){return arguments.length?(D=t,v=e.quicksort.by(D),r.expireCache(),r):D},r._computeOrderedGroups=function(t){var n=t.slice(0);return n.length<=1?n:(v||(v=e.quicksort.by(D)),v(n,0,n.length))},r.filterAll=function(){return r.filter(null)},r.select=function(t){return f.select(t)},r.selectAll=function(t){return f?f.selectAll(t):null},r.anchor=function(e,i){if(!arguments.length)return c;if(n.instanceOfChart(e))c=e.anchor(),f=e.root(),d=!0;else{if(!e)throw new n.errors.BadArgumentException("parent must be defined");c=e.select&&e.classed?e.node():e,(f=t.select(c)).classed(n.constants.CHART_CLASS,!0),n.registerChart(r,i),d=!1}return I=i,r},r.anchorName=function(){var t=r.anchor();return t&&t.id?t.id:t&&t.replace?t.replace("#",""):"dc-chart"+r.chartID()},r.root=function(t){return arguments.length?(f=t,r):f},r.svg=function(t){return arguments.length?(h=t,r):h},r.resetSvg=function(){return r.select("svg").remove(),o()},r.filterPrinter=function(t){return arguments.length?(P=t,r):P},r.controlsUseVisibility=function(t){return arguments.length?(O=t,r):O},r.turnOnControls=function(){if(f){var t=r.controlsUseVisibility()?"visibility":"display";r.selectAll(".reset").style(t,null),r.selectAll(".filter").text(P(r.filters())).style(t,null)}return r},r.turnOffControls=function(){if(f){var t=r.controlsUseVisibility()?"visibility":"display",e=r.controlsUseVisibility()?"hidden":"none";r.selectAll(".reset").style(t,e),r.selectAll(".filter").style(t,e).text(r.filter())}return r},r.transitionDuration=function(t){return arguments.length?(R=t,r):R},r.transitionDelay=function(t){return arguments.length?(j=t,r):j},r._mandatoryAttributes=function(t){return arguments.length?(F=t,r):F},r.render=function(){g=p=void 0,Y.preRender(r),F&&F.forEach(a);var t=r._doRender();return m&&m.render(),r._activateRenderlets("postRender"),t},r._activateRenderlets=function(t){Y.pretransition(r),r.transitionDuration()>0&&h?h.transition().duration(r.transitionDuration()).delay(r.transitionDelay()).each("end",function(){Y.renderlet(r),t&&Y[t](r)}):(Y.renderlet(r),t&&Y[t](r))},r.redraw=function(){i(),Y.preRedraw(r);var t=r._doRedraw();return m&&m.render(),r._activateRenderlets("postRedraw"),t},r.commitHandler=function(t){return arguments.length?(y=t,r):y},r.redrawGroup=function(){return y?y(!1,function(t,e){t?console.log(t):n.redrawAll(r.chartGroup())}):n.redrawAll(r.chartGroup()),r},r.renderGroup=function(){return y?y(!1,function(t,e){t?console.log(t):n.renderAll(r.chartGroup())}):n.renderAll(r.chartGroup()),r},r._invokeFilteredListener=function(t){void 0!==t&&Y.filtered(r,t)},r._invokeZoomedListener=function(){Y.zoomed(r)};var U=function(t,e){return null===e||void 0===e?t.length>0:t.some(function(t){return e<=t&&e>=t})};r.hasFilterHandler=function(t){return arguments.length?(U=t,r):U},r.hasFilter=function(t){return U(H,t)};var z=function(t,e){for(var n=0;n<t.length;n++)if(t[n]<=e&&t[n]>=e){t.splice(n,1);break}return t};r.removeFilterHandler=function(t){return arguments.length?(z=t,r):z};var W=function(t,e){return t.push(e),t};r.addFilterHandler=function(t){return arguments.length?(W=t,r):W};var B=function(t){return[]};return r.resetFilterHandler=function(t){return arguments.length?(B=t,r):B},r.replaceFilter=function(t){return H=B(H),r.filter(t),r},r.filter=function(t){if(!arguments.length)return H.length>0?H[0]:null;var e=H;return t instanceof Array&&t[0]instanceof Array&&!t.isFiltered?t[0].forEach(function(t){e=U(e,t)?z(e,t):W(e,t)}):e=null===t?B(e):U(e,t)?z(e,t):W(e,t),H=u(e),r._invokeFilteredListener(t),null!==f&&r.hasFilter()?r.turnOnControls():r.turnOffControls(),r},r.filters=function(){return H},r.highlightSelected=function(e){t.select(e).classed(n.constants.SELECTED_CLASS,!0),t.select(e).classed(n.constants.DESELECTED_CLASS,!1)},r.fadeDeselected=function(e){t.select(e).classed(n.constants.SELECTED_CLASS,!1),t.select(e).classed(n.constants.DESELECTED_CLASS,!0)},r.resetHighlight=function(e){t.select(e).classed(n.constants.SELECTED_CLASS,!1),t.select(e).classed(n.constants.DESELECTED_CLASS,!1)},r.onClick=function(t){var e=r.keyAccessor()(t);n.events.trigger(function(){r.filter(e),r.redrawGroup()})},r.filterHandler=function(t){return arguments.length?($=t,r):$},r._doRender=function(){return r},r._doRedraw=function(){return r},r.legendables=function(){return[]},r.legendHighlight=function(){},r.legendReset=function(){},r.legendToggle=function(){},r.isLegendableHidden=function(){return!1},r.keyAccessor=function(t){return arguments.length?(S=t,r):S},r.valueAccessor=function(t){return arguments.length?(T=t,r):T},r.label=function(t,e){return arguments.length?(C=t,(void 0===e||e)&&(E=!0),r):C},r.renderLabel=function(t){return arguments.length?(E=t,r):E},r.title=function(t){return arguments.length?(N=t,r):N},r.renderTitle=function(t){return arguments.length?(L=t,r):L},r.renderlet=n.logger.deprecate(function(t){return r.on("renderlet."+n.utils.uniqueId(),t),r},'chart.renderlet has been deprecated.  Please use chart.on("renderlet.<renderletKey>", renderletFunction)'),r.chartGroup=function(t){return arguments.length?(d||n.deregisterChart(r,I),I=t,d||n.registerChart(r,I),r):I},r.expireCache=function(){return r},r.legend=function(t){return arguments.length?((m=t).parent(r),r):m},r.chartID=function(){return r.__dcFlag__},r.options=function(t){var e=["anchor","group","xAxisLabel","yAxisLabel","stack","title","point","getColor","overlayGeoJson"];for(var i in t)"function"==typeof r[i]?t[i]instanceof Array&&-1!==e.indexOf(i)?r[i].apply(r,t[i]):r[i].call(r,t[i]):n.logger.debug("Not a valid option setter name: "+i);return r},r.on=function(t,e){return Y.on(t,e),r},r},n.marginMixin=function(t){var e={top:10,right:50,bottom:30,left:30};return t.margins=function(n){return arguments.length?(e=n,t):e},t.effectiveWidth=function(){return t.width()-t.margins().left-t.margins().right},t.effectiveHeight=function(){return t.height()-t.margins().top-t.margins().bottom},t},n.colorMixin=function(e){var r=t.scale.category20c(),i=!0,o=function(t){return e.keyAccessor()(t)};return e.colors=function(n){return arguments.length?(r=n instanceof Array?t.scale.quantize().range(n):t.functor(n),e):r},e.ordinalColors=function(n){return e.colors(t.scale.ordinal().range(n))},e.linearColors=function(n){return e.colors(t.scale.linear().range(n).interpolate(t.interpolateHcl))},e.colorAccessor=function(t){return arguments.length?(o=t,i=!1,e):o},e.defaultColorAccessor=function(){return i},e.colorDomain=function(t){return arguments.length?(r.domain(t),e):r.domain()},e.calculateColorDomain=function(){var n=[t.min(e.data(),e.colorAccessor()),t.max(e.data(),e.colorAccessor())];return r.domain(n),e},e.getColor=function(t,e){return r(o.call(this,t,e))},e.colorCalculator=n.logger.deprecate(function(t){return arguments.length?(e.getColor=t,e):e.getColor},"colorMixin.colorCalculator has been deprecated. Please colorMixin.colors and colorMixin.colorAccessor instead"),e},n.coordinateGridMixin=function(e){function r(t,e){return!t||!e||t.length!==e.length||t.some(function(t,n){return t&&e[n]?t.toString()!==e[n].toString():t===e[n]})}function i(t,n){e.isOrdinal()?(e.elasticX()||0===w.domain().length)&&w.domain(e._ordinalXDomain()):e.elasticX()&&w.domain([e.xAxisMin(),e.xAxisMax()]);var i=w.domain();(n||r(A,i))&&e.rescale(),A=i,e.isOrdinal()?w.rangeBands([0,e.xAxisLength()],et,e._useOuterPadding()?tt:0):w.range([0,e.xAxisLength()]),N=N.scale(e.x()),o(t)}function o(t){var r=t.select("g."+m);if(z){r.empty()&&(r=t.insert("g",":first-child").attr("class",v+" "+m).attr("transform","translate("+e.margins().left+","+e.margins().top+")"));var i=N.tickValues()?N.tickValues():"function"==typeof w.ticks?w.ticks(N.ticks()[0]):w.domain(),o=r.selectAll("line").data(i),a=o.enter().append("line").attr("x1",function(t){return w(t)}).attr("y1",e._xAxisY()-e.margins().top).attr("x2",function(t){return w(t)}).attr("y2",0).attr("opacity",0);n.transition(a,e.transitionDuration(),e.transitionDelay()).attr("opacity",1),n.transition(o,e.transitionDuration(),e.transitionDelay()).attr("x1",function(t){return w(t)}).attr("y1",e._xAxisY()-e.margins().top).attr("x2",function(t){return w(t)}).attr("y2",0),o.exit().remove()}else r.selectAll("line").remove()}function a(){return e._xAxisY()-e.margins().top}function u(){return e.anchorName().replace(/[ .#=\[\]"]/g,"-")+"-clip"}function s(){var t=n.utils.appendOrSelect(y,"defs"),r=u(),i=n.utils.appendOrSelect(t,"#"+r,"clipPath").attr("id",r),o=2*J;n.utils.appendOrSelect(i,"rect").attr("width",e.xAxisLength()+o).attr("height",e.yAxisHeight()+o).attr("transform","translate(-"+J+", -"+J+")")}function l(t){e.isOrdinal()&&(q=!1),i(e.g(),t),e._prepareYAxis(e.g()),e.plotData(),(e.elasticX()||B||t)&&e.renderXAxis(e.g()),(e.elasticY()||B||t)&&e.renderYAxis(e.g()),t?e.renderBrush(e.g(),!1):e.redrawBrush(e.g(),B),e.fadeDeselectedArea(),B=!1}function c(){Q?e._enableMouseZoom():K&&e._disableMouseZoom()}function f(){if(W=!0,G){var t=_;D&&(t=h(t,D.x().domain()));var r=d(e.x().domain(),t);r&&e.x().domain(r)}var i=e.x().domain(),o=n.filters.RangedFilter(i[0],i[1]);e.replaceFilter(o),e.rescale(),e.redraw(),D&&!p(e.filter(),D.filter())&&n.events.trigger(function(){D.replaceFilter(o),D.redraw()}),e._invokeZoomedListener(),n.events.trigger(function(){e.redrawGroup()},n.constants.EVENT_DELAY),W=!p(i,_)}function h(t,e){return(t[0]>e[1]||t[1]<e[0])&&console.warn("could not intersect extents"),[Math.max(t[0],e[0]),Math.min(t[1],e[1])]}function d(t,e){var r=t[1]-t[0];return t[0]<e[0]?[e[0],Math.min(e[1],n.utils.add(e[0],r,"millis"))]:t[1]>e[1]?[Math.max(e[0],n.utils.subtract(e[1],r,"millis")),e[1]]:null}function p(t,e){return!t&&!e||!(!t||!e)&&(0===t.length&&0===e.length||t[0].valueOf()===e[0].valueOf()&&t[1].valueOf()===e[1].valueOf())}function g(t){return t instanceof Array&&t.length>1}var v="grid-line",m="vertical";(e=n.colorMixin(n.marginMixin(n.baseMixin(e)))).colors(t.scale.category10()),e._mandatoryAttributes().push("x");var y,x,b,w,_,M,A,k,S,T,C,D,E,N=t.svg.axis().orient("bottom"),L=n.units.integers,O=0,R="day",j=!1,P=0,F=t.svg.axis().orient("left"),I=0,Y=!1,H=0,$=t.svg.brush(),q=!0,U=!1,z=!1,W=!1,B=!1,V=[1,1/0],G=!0,X=t.behavior.zoom().on("zoom",f),Z=t.behavior.zoom().on("zoom",null),K=!1,Q=!1,J=0,tt=.5,et=0,nt=!1;return e.rescale=function(){return C=void 0,B=!0,e},e.resizing=function(){return B},e.rangeChart=function(t){return arguments.length?((D=t).focusChart(e),e):D},e.zoomScale=function(t){return arguments.length?(V=t,e):V},e.zoomOutRestrict=function(t){return arguments.length?(V[0]=t?1:0,G=t,e):G},e._generateG=function(t){y=void 0===t?e.svg():t;var n=window.location.href.split("#")[0];return x=y.append("g"),b=x.append("g").attr("class","chart-body").attr("transform","translate("+e.margins().left+", "+e.margins().top+")").attr("clip-path","url("+n+"#"+u()+")"),x},e.g=function(t){return arguments.length?(x=t,e):x},e.mouseZoomable=function(t){return arguments.length?(Q=t,e):Q},e.chartBodyG=function(t){return arguments.length?(b=t,e):b},e.x=function(t){return arguments.length?(w=t,_=w.domain(),e.rescale(),e):w},e.xOriginalDomain=function(){return _},e.xUnits=function(t){return arguments.length?(L=t,e):L},e.xAxis=function(t){return arguments.length?(N=t,e):N},e.elasticX=function(t){return arguments.length?(j=t,e):j},e.xAxisPadding=function(t){return arguments.length?(O=t,e):O},e.xAxisPaddingUnit=function(t){return arguments.length?(R=t,e):R},e.xUnitCount=function(){if(void 0===C){var t=e.xUnits()(e.x().domain()[0],e.x().domain()[1],e.x().domain());C=t instanceof Array?t.length:t}return C},e.useRightYAxis=function(t){return arguments.length?(nt=t,e):nt},e.isOrdinal=function(){return e.xUnits()===n.units.ordinal},e._useOuterPadding=function(){return!0},e._ordinalXDomain=function(){return e._computeOrderedGroups(e.data()).map(e.keyAccessor())},e.renderXAxis=function(t){var r=t.select("g.x");r.empty()&&(r=t.append("g").attr("class","axis x").attr("transform","translate("+e.margins().left+","+e._xAxisY()+")"));var i=t.select("text.x-axis-label");i.empty()&&e.xAxisLabel()&&(i=t.append("text").attr("class","x-axis-label").attr("transform","translate("+(e.margins().left+e.xAxisLength()/2)+","+(e.height()-P)+")").attr("text-anchor","middle")),e.xAxisLabel()&&i.text()!==e.xAxisLabel()&&i.text(e.xAxisLabel()),n.transition(r,e.transitionDuration(),e.transitionDelay()).attr("transform","translate("+e.margins().left+","+e._xAxisY()+")").call(N),n.transition(i,e.transitionDuration(),e.transitionDelay()).attr("transform","translate("+(e.margins().left+e.xAxisLength()/2)+","+(e.height()-P)+")")},e._xAxisY=function(){return e.height()-e.margins().bottom},e.xAxisLength=function(){return e.effectiveWidth()},e.xAxisLabel=function(t,n){return arguments.length?(M=t,e.margins().bottom-=P,P=void 0===n?12:n,e.margins().bottom+=P,e):M},e._prepareYAxis=function(n){if(void 0===k||e.elasticY()){void 0===k&&(k=t.scale.linear());var r=e.yAxisMin()||0,i=e.yAxisMax()||0;k.domain([r,i]).rangeRound([e.yAxisHeight(),0])}k.range([e.yAxisHeight(),0]),F=F.scale(k),nt&&F.orient("right"),e._renderHorizontalGridLinesForAxis(n,k,F)},e.renderYAxisLabel=function(t,r,i,o){o=o||H;var a=e.g().select("text.y-axis-label."+t+"-label"),u=e.margins().top+e.yAxisHeight()/2;a.empty()&&r&&(a=e.g().append("text").attr("transform","translate("+o+","+u+"),rotate("+i+")").attr("class","y-axis-label "+t+"-label").attr("text-anchor","middle").text(r)),r&&a.text()!==r&&a.text(r),n.transition(a,e.transitionDuration(),e.transitionDelay()).attr("transform","translate("+o+","+u+"),rotate("+i+")")},e.renderYAxisAt=function(t,r,i){var o=e.g().select("g."+t);o.empty()&&(o=e.g().append("g").attr("class","axis "+t).attr("transform","translate("+i+","+e.margins().top+")")),n.transition(o,e.transitionDuration(),e.transitionDelay()).attr("transform","translate("+i+","+e.margins().top+")").call(r)},e.renderYAxis=function(){var t=nt?e.width()-e.margins().right:e._yAxisX();e.renderYAxisAt("y",F,t);var n=nt?e.width()-H:H,r=nt?90:-90;e.renderYAxisLabel("y",e.yAxisLabel(),r,n)},e._renderHorizontalGridLinesForAxis=function(t,r,i){var o=t.select("g.horizontal");if(U){var a=i.tickValues()?i.tickValues():r.ticks(i.ticks()[0]);o.empty()&&(o=t.insert("g",":first-child").attr("class",v+" horizontal").attr("transform","translate("+e.margins().left+","+e.margins().top+")"));var u=o.selectAll("line").data(a),s=u.enter().append("line").attr("x1",1).attr("y1",function(t){return r(t)}).attr("x2",e.xAxisLength()).attr("y2",function(t){return r(t)}).attr("opacity",0);n.transition(s,e.transitionDuration(),e.transitionDelay()).attr("opacity",1),n.transition(u,e.transitionDuration(),e.transitionDelay()).attr("x1",1).attr("y1",function(t){return r(t)}).attr("x2",e.xAxisLength()).attr("y2",function(t){return r(t)}),u.exit().remove()}else o.selectAll("line").remove()},e._yAxisX=function(){return e.useRightYAxis()?e.width()-e.margins().right:e.margins().left},e.yAxisLabel=function(t,n){return arguments.length?(S=t,e.margins().left-=H,H=void 0===n?12:n,e.margins().left+=H,e):S},e.y=function(t){return arguments.length?(k=t,e.rescale(),e):k},e.yAxis=function(t){return arguments.length?(F=t,e):F},e.elasticY=function(t){return arguments.length?(Y=t,e):Y},e.renderHorizontalGridLines=function(t){return arguments.length?(U=t,e):U},e.renderVerticalGridLines=function(t){return arguments.length?(z=t,e):z},e.xAxisMin=function(){var r=t.min(e.data(),function(t){return e.keyAccessor()(t)});return n.utils.subtract(r,O,R)},e.xAxisMax=function(){var r=t.max(e.data(),function(t){return e.keyAccessor()(t)});return n.utils.add(r,O,R)},e.yAxisMin=function(){var r=t.min(e.data(),function(t){return e.valueAccessor()(t)});return n.utils.subtract(r,I)},e.yAxisMax=function(){var r=t.max(e.data(),function(t){return e.valueAccessor()(t)});return n.utils.add(r,I)},e.yAxisPadding=function(t){return arguments.length?(I=t,e):I},e.yAxisHeight=function(){return e.effectiveHeight()},e.round=function(t){return arguments.length?(T=t,e):T},e._rangeBandPadding=function(t){return arguments.length?(et=t,e):et},e._outerRangeBandPadding=function(t){return arguments.length?(tt=t,e):tt},n.override(e,"filter",function(t){return arguments.length?(e._filter(t),t?e.brush().extent(t):e.brush().clear(),e):e._filter()}),e.brush=function(t){return arguments.length?($=t,e):$},e.renderBrush=function(t){if(q){$.on("brush",e._brushing),$.on("brushstart",e._disableMouseZoom),$.on("brushend",c);var n=t.append("g").attr("class","brush").attr("transform","translate("+e.margins().left+","+e.margins().top+")").call($.x(e.x()));e.setBrushY(n,!1),e.setHandlePaths(n),e.hasFilter()&&e.redrawBrush(t,!1)}},e.setHandlePaths=function(t){t.selectAll(".resize").append("path").attr("d",e.resizeHandlePath)},e.setBrushY=function(t){t.selectAll("rect").attr("height",a()),t.selectAll(".resize path").attr("d",e.resizeHandlePath)},e.extendBrush=function(){var t=$.extent();return e.round()&&(t[0]=t.map(e.round())[0],t[1]=t.map(e.round())[1],x.select(".brush").call($.extent(t))),t},e.brushIsEmpty=function(t){return $.empty()||!t||t[1]<=t[0]},e._brushing=function(){var t=e.extendBrush();if(e.redrawBrush(x,!1),e.brushIsEmpty(t))n.events.trigger(function(){e.filter(null),e.redrawGroup()},n.constants.EVENT_DELAY);else{var r=n.filters.RangedFilter(t[0],t[1]);n.events.trigger(function(){e.replaceFilter(r),e.redrawGroup()},n.constants.EVENT_DELAY)}},e.redrawBrush=function(t,r){if(q){e.filter()&&e.brush().empty()&&e.brush().extent(e.filter());var i=n.optionalTransition(r,e.transitionDuration(),e.transitionDelay())(t.select("g.brush"));e.setBrushY(i),i.call(e.brush().x(e.x()).extent(e.brush().extent()))}e.fadeDeselectedArea()},e.fadeDeselectedArea=function(){},e.resizeHandlePath=function(t){var e=+("e"===t),n=e?1:-1,r=a()/3;return"M"+.5*n+","+r+"A6,6 0 0 "+e+" "+6.5*n+","+(r+6)+"V"+(2*r-6)+"A6,6 0 0 "+e+" "+.5*n+","+2*r+"ZM"+2.5*n+","+(r+8)+"V"+(2*r-8)+"M"+4.5*n+","+(r+8)+"V"+(2*r-8)},e.clipPadding=function(t){return arguments.length?(J=t,e):J},e._preprocessData=function(){},e._doRender=function(){return e.resetSvg(),e._preprocessData(),e._generateG(),s(),l(!0),c(),e},e._doRedraw=function(){return e._preprocessData(),l(!1),s(),e},e._enableMouseZoom=function(){K=!0,X.x(e.x()).scaleExtent(V).size([e.width(),e.height()]).duration(e.transitionDuration()),e.root().call(X)},e._disableMouseZoom=function(){e.root().call(Z)},e.focus=function(t){g(t)?e.x().domain(t):e.x().domain(_),X.x(e.x()),f()},e.refocused=function(){return W},e.focusChart=function(t){return arguments.length?(E=t,e.on("filtered",function(t){t.filter()?p(t.filter(),E.filter())||n.events.trigger(function(){E.focus(t.filter())}):n.events.trigger(function(){E.x().domain(E.xOriginalDomain())})}),e):E},e.brushOn=function(t){return arguments.length?(q=t,e):q},e},n.stackMixin=function(e){function r(t,n){var r=t.accessor||e.valueAccessor();return t.name=String(t.name||n),t.values=t.group.all().map(function(n,i){return{x:e.keyAccessor()(n,i),y:t.hidden?null:r(n,i),data:n,layer:t.name,hidden:t.hidden}}),t.values=t.values.filter(i()),t.values}function i(){if(!e.x()||h)return t.functor(!0);var n=e.x().domain();return e.isOrdinal()?function(){return!0}:e.elasticX()?function(){return!0}:function(t){return t.x>=n[0]&&t.x<=n[n.length-1]}}function o(t){var e=l.map(n.pluck("name")).indexOf(t);return l[e]}function a(){var t=e.data().map(function(t){return t.values});return Array.prototype.concat.apply([],t)}function u(t){return!t.hidden}var s=t.layout.stack().values(r),l=[],c={},f=!1,h=!1;return e.stack=function(t,n,r){if(!arguments.length)return l;arguments.length<=2&&(r=n);var i={group:t};return"string"==typeof n&&(i.name=n),"function"==typeof r&&(i.accessor=r),l.push(i),e},n.override(e,"group",function(t,n,r){return arguments.length?(l=[],c={},e.stack(t,n),r&&e.valueAccessor(r),e._group(t,n)):e._group()}),e.hidableStacks=function(t){return arguments.length?(f=t,e):f},e.hideStack=function(t){var n=o(t);return n&&(n.hidden=!0),e},e.showStack=function(t){var n=o(t);return n&&(n.hidden=!1),e},e.getValueAccessorByIndex=function(t){return l[t].accessor||e.valueAccessor()},e.yAxisMin=function(){var r=t.min(a(),function(t){return t.y<0?t.y+t.y0:t.y0});return n.utils.subtract(r,e.yAxisPadding())},e.yAxisMax=function(){var r=t.max(a(),function(t){return t.y>0?t.y+t.y0:t.y0});return n.utils.add(r,e.yAxisPadding())},e.xAxisMin=function(){var r=t.min(a(),n.pluck("x"));return n.utils.subtract(r,e.xAxisPadding(),e.xAxisPaddingUnit())},e.xAxisMax=function(){var r=t.max(a(),n.pluck("x"));return n.utils.add(r,e.xAxisPadding(),e.xAxisPaddingUnit())},n.override(e,"title",function(t,n){return t?"function"==typeof t?e._title(t):t===e._groupName&&"function"==typeof n?e._title(n):"function"!=typeof n?c[t]||e._title():(c[t]=n,e):e._title()}),e.stackLayout=function(n){return arguments.length?((s=n).values()===t.layout.stack().values()&&s.values(r),e):s},e.evadeDomainFilter=function(t){return arguments.length?(h=t,e):h},e.data(function(){var t=l.filter(u);return t.length?e.stackLayout()(t):[]}),e._ordinalXDomain=function(){var t=a().map(n.pluck("data"));return e._computeOrderedGroups(t).map(e.keyAccessor())},e.colorAccessor(function(t){return this.layer||this.name||t.name||t.layer}),e.legendables=function(){return l.map(function(t,n){return{chart:e,name:t.name,hidden:t.hidden||!1,color:e.getColor.call(t,t.values,n)}})},e.isLegendableHidden=function(t){var e=o(t.name);return!!e&&e.hidden},e.legendToggle=function(t){f&&(e.isLegendableHidden(t)?e.showStack(t.name):e.hideStack(t.name),e.renderGroup())},e},n.capMixin=function(e){var r=1/0,i=!0,o="Others";e.ordering(function(t){return-t.value});var a=function(n,r){var i=t.sum(r,e.valueAccessor()),o=r.map(e.keyAccessor());return i>0?n.concat([{others:o,key:e.othersLabel(),value:i}]):n};return e.cappedKeyAccessor=function(t,n){return t.others?t.key:e.keyAccessor()(t,n)},e.cappedValueAccessor=function(t,n){return t.others?t.value:e.valueAccessor()(t,n)},e.data(function(t){if(r===1/0)return e._computeOrderedGroups(t.all());var n,o=t.all();if(o=e._computeOrderedGroups(o),r)if(i)n=o.slice(r),o=o.slice(0,r);else{var u=Math.max(0,o.length-r);n=o.slice(0,u),o=o.slice(u)}return a?a(o,n):o}),e.cap=function(t){return arguments.length?(r=t,e):r},e.takeFront=function(t){return arguments.length?(i=t,e):i},e.othersLabel=function(t){return arguments.length?(o=t,e):o},e.othersGrouper=function(t){return arguments.length?(a=t,e):a},n.override(e,"onClick",function(t){t.others&&e.filter([t.others]),e._onClick(t)}),e},n.bubbleMixin=function(e){var r=.3,i=10,o=!1,a=!1;e.BUBBLE_NODE_CLASS="node",e.BUBBLE_CLASS="bubble",e.MIN_RADIUS=10,(e=n.colorMixin(e)).renderLabel(!0),e.data(function(n){var r=n.all();if(o){var i=e.radiusValueAccessor();r.sort(function(e,n){return t.descending(i(e),i(n))})}return r});var u=t.scale.linear().domain([0,100]),s=function(t){return t.r};e.r=function(t){return arguments.length?(u=t,e):u},e.elasticRadius=function(t){return arguments.length?(a=t,e):a},e.calculateRadiusDomain=function(){a&&e.r().domain([e.rMin(),e.rMax()])},e.radiusValueAccessor=function(t){return arguments.length?(s=t,e):s},e.rMin=function(){return t.min(e.data(),function(t){return e.radiusValueAccessor()(t)})},e.rMax=function(){return t.max(e.data(),function(t){return e.radiusValueAccessor()(t)})},e.bubbleR=function(t){var n=e.radiusValueAccessor()(t),r=e.r()(n);return(isNaN(r)||n<=0)&&(r=0),r};var l=function(t){return e.label()(t)},c=function(t){return e.bubbleR(t)>i},f=function(t){return c(t)?1:0},h=function(t){return c(t)?"all":"none"};e._doRenderLabel=function(t){if(e.renderLabel()){var r=t.select("text");r.empty()&&(r=t.append("text").attr("text-anchor","middle").attr("dy",".3em").on("click",e.onClick)),r.attr("opacity",0).attr("pointer-events",h).text(l),n.transition(r,e.transitionDuration(),e.transitionDelay()).attr("opacity",f)}},e.doUpdateLabels=function(t){if(e.renderLabel()){var r=t.select("text").attr("pointer-events",h).text(l);n.transition(r,e.transitionDuration(),e.transitionDelay()).attr("opacity",f)}};var d=function(t){return e.title()(t)};return e._doRenderTitles=function(t){e.renderTitle()&&t.select("title").empty()&&t.append("title").text(d)},e.doUpdateTitles=function(t){e.renderTitle()&&t.select("title").text(d)},e.sortBubbleSize=function(t){return arguments.length?(o=t,e):o},e.minRadius=function(t){return arguments.length?(e.MIN_RADIUS=t,e):e.MIN_RADIUS},e.minRadiusWithLabel=function(t){return arguments.length?(i=t,e):i},e.maxBubbleRelativeSize=function(t){return arguments.length?(r=t,e):r},e.fadeDeselectedArea=function(){e.hasFilter()?e.selectAll("g."+e.BUBBLE_NODE_CLASS).each(function(t){e.isSelectedNode(t)?e.highlightSelected(this):e.fadeDeselected(this)}):e.selectAll("g."+e.BUBBLE_NODE_CLASS).each(function(){e.resetHighlight(this)})},e.isSelectedNode=function(t){return e.hasFilter(t.key)},e.onClick=function(t){var r=t.key;n.events.trigger(function(){e.filter(r),e.redrawGroup()})},e},n.pieChart=function(e,r){function i(){var e=t.min([V.width(),V.height()])/2;N=L&&L<e?L:e;var r,i=x(),a=w();if(t.sum(V.data(),V.valueAccessor())?(r=a(V.data()),O.classed($,!1)):(r=a([{key:q,value:1,others:[q]}]),O.classed($,!0)),O){var u=O.select("g."+Y).selectAll("g."+F).data(r),s=O.select("g."+H).selectAll("text."+I).data(r);o(u,s,i,r),d(r,i),m(u,s),y(),n.transition(O,V.transitionDuration(),V.transitionDelay()).attr("transform","translate("+V.cx()+","+V.cy()+")")}}function o(t,e,n,r){var i=a(t);u(i,n),s(i),f(e,r,n)}function a(t){return t.enter().append("g").attr("class",function(t,e){return F+" _"+e})}function u(t,e){var r=t.append("path").attr("fill",S).on("click",T).attr("d",function(t,n){return C(t,n,e)}),i=n.transition(r,V.transitionDuration(),V.transitionDelay());i.attrTween&&i.attrTween("d",A)}function s(t){V.renderTitle()&&t.append("title").text(function(t){return V.title()(t.data)})}function l(t,e){V._applyLabelText(t),n.transition(t,V.transitionDuration(),V.transitionDelay()).attr("transform",function(t){return D(t,e)}).attr("text-anchor","middle")}function c(t,e){V.select("g.pie-slice._"+t).classed("highlight",e)}function f(t,e,n){V.renderLabel()&&(l(t.enter().append("text").attr("class",function(t,e){var n=F+" "+I+" _"+e;return P&&(n+=" external"),n}).on("click",T).on("mouseover",function(t,e){c(e,!0)}).on("mouseout",function(t,e){c(e,!1)}),n),P&&B&&h(e,n))}function h(e,r){var i=O.selectAll("polyline."+F).data(e);i.enter().append("polyline").attr("class",function(t,e){return"pie-path _"+e+" "+F}).on("click",T).on("mouseover",function(t,e){c(e,!0)}).on("mouseout",function(t,e){c(e,!1)}),i.exit().remove();var o=t.svg.arc().outerRadius(N-z+P).innerRadius(N-z),a=n.transition(i,V.transitionDuration(),V.transitionDelay());a.attrTween?a.attrTween("points",function(e){var n=this._current||e;n={startAngle:n.startAngle,endAngle:n.endAngle};var i=t.interpolate(n,e);return this._current=i(0),function(t){var e=i(t);return[r.centroid(e),o.centroid(e)]}}):a.attr("points",function(t){return[r.centroid(t),o.centroid(t)]}),a.style("visibility",function(t){return t.endAngle-t.startAngle<1e-4?"hidden":"visible"})}function d(t,e){p(t,e),g(t,e),v(t)}function p(t,e){var r=O.selectAll("g."+F).data(t).select("path").attr("d",function(t,n){return C(t,n,e)}),i=n.transition(r,V.transitionDuration(),V.transitionDelay());i.attrTween&&i.attrTween("d",A),i.attr("fill",S)}function g(t,e){V.renderLabel()&&(l(O.selectAll("text."+I).data(t),e),P&&B&&h(t,e))}function v(t){V.renderTitle()&&O.selectAll("g."+F).data(t).select("title").text(function(t){return V.title()(t.data)})}function m(t,e){t.exit().remove(),e.exit().remove()}function y(){V.hasFilter()?V.selectAll("g."+F).each(function(t){b(t)?V.highlightSelected(this):V.fadeDeselected(this)}):V.selectAll("g."+F).each(function(){V.resetHighlight(this)})}function x(){return t.svg.arc().outerRadius(N-z).innerRadius(U)}function b(t){return V.hasFilter(V.cappedKeyAccessor(t.data))}function w(){return t.layout.pie().sort(null).value(V.cappedValueAccessor)}function _(t){var e=t.endAngle-t.startAngle;return isNaN(e)||e<W}function M(t){return 0===V.cappedValueAccessor(t)}function A(e){e.innerRadius=U;var n=this._current;n=k(n)?{startAngle:0,endAngle:0}:{startAngle:n.startAngle,endAngle:n.endAngle};var r=t.interpolate(n,e);return this._current=r(0),function(t){return C(r(t),0,x())}}function k(t){return!t||isNaN(t.startAngle)||isNaN(t.endAngle)}function S(t,e){return V.getColor(t.data,e)}function T(t,e){O.attr("class")!==$&&V.onClick(t.data,e)}function C(t,e,n){var r=n(t,e);return r.indexOf("NaN")>=0&&(r="M0,0"),r}function D(e,n){var r;return r=P?t.svg.arc().outerRadius(N-z+P).innerRadius(N-z+P).centroid(e):n.centroid(e),isNaN(r[0])||isNaN(r[1])?"translate(0,0)":"translate("+r+")"}function E(e,n){V.selectAll("g.pie-slice").each(function(r){e.name===r.data.key&&t.select(this).classed("highlight",n)})}var N,L,O,R,j,P,F="pie-slice",I="pie-label",Y="pie-slice-group",H="pie-label-group",$="empty-chart",q="empty",U=0,z=0,W=.5,B=!1,V=n.capMixin(n.colorMixin(n.baseMixin({})));return V.colorAccessor(V.cappedKeyAccessor),V.title(function(t){return V.cappedKeyAccessor(t)+": "+V.cappedValueAccessor(t)}),V.slicesCap=V.cap,V.label(V.cappedKeyAccessor),V.renderLabel(!0),V.transitionDuration(350),V.transitionDelay(0),V._doRender=function(){return V.resetSvg(),(O=V.svg().append("g").attr("transform","translate("+V.cx()+","+V.cy()+")")).append("g").attr("class",Y),O.append("g").attr("class",H),i(),V},V._applyLabelText=function(t){t.text(function(t){return!M(t.data)&&!_(t)||b(t)?V.label()(t.data):""})},V.externalRadiusPadding=function(t){return arguments.length?(z=t,V):z},V.innerRadius=function(t){return arguments.length?(U=t,V):U},V.radius=function(t){return arguments.length?(L=t,V):L},V.cx=function(t){return arguments.length?(R=t,V):R||V.width()/2},V.cy=function(t){return arguments.length?(j=t,V):j||V.height()/2},V._doRedraw=function(){return i(),V},V.minAngleForLabel=function(t){return arguments.length?(W=t,V):W},V.emptyTitle=function(t){return 0===arguments.length?q:(q=t,V)},V.externalLabels=function(t){return 0===arguments.length?P:(P=t||void 0,V)},V.drawPaths=function(t){return 0===arguments.length?B:(B=t,V)},V.legendables=function(){return V.data().map(function(t,e){var n={name:t.key,data:t.value,others:t.others,chart:V};return n.color=V.getColor(t,e),n})},V.legendHighlight=function(t){E(t,!0)},V.legendReset=function(t){E(t,!1)},V.legendToggle=function(t){V.onClick({key:t.name,others:t.others})},V.anchor(e,r)},n.barChart=function(e,r){function i(t){return n.utils.safeNumber(Math.abs(h.y()(t.y+t.y0)-h.y()(t.y0)))}function o(t,e,r){var o=t.selectAll("text.barLabel").data(r.values,n.pluck("x"));o.enter().append("text").attr("class","barLabel").attr("text-anchor","middle"),h.isOrdinal()&&(o.on("click",h.onClick),o.attr("cursor","pointer")),n.transition(o,h.transitionDuration(),h.transitionDelay()).attr("x",function(t){var e=h.x()(t.x);return p||(e+=l/2),n.utils.safeNumber(e)}).attr("y",function(t){var e=h.y()(t.y+t.y0);return t.y<0&&(e-=i(t)),n.utils.safeNumber(e-f)}).text(function(t){return h.label()(t)}),n.transition(o.exit(),h.transitionDuration(),h.transitionDelay()).attr("height",0).remove()}function a(t,e,r){var o=t.selectAll("rect.bar").data(r.values,n.pluck("x")),a=o.enter().append("rect").attr("class","bar").attr("fill",n.pluck("data",h.getColor)).attr("y",h.yAxisHeight()).attr("height",0);h.renderTitle()&&a.append("title").text(n.pluck("data",h.title(r.name))),h.isOrdinal()&&o.on("click",h.onClick),n.transition(o,h.transitionDuration(),h.transitionDelay()).attr("x",function(t){var e=h.x()(t.x);return p&&(e-=l/2),h.isOrdinal()&&void 0!==d&&(e+=d/2),n.utils.safeNumber(e)}).attr("y",function(t){var e=h.y()(t.y+t.y0);return t.y<0&&(e-=i(t)),n.utils.safeNumber(e)}).attr("width",l).attr("height",function(t){return i(t)}).attr("fill",n.pluck("data",h.getColor)).select("title").text(n.pluck("data",h.title(r.name))),n.transition(o.exit(),h.transitionDuration(),h.transitionDelay()).attr("x",function(t){return h.x()(t.x)}).attr("width",.9*l).remove()}function u(){if(void 0===l){var t=h.xUnitCount();((l=h.isOrdinal()&&void 0===d?Math.floor(h.x().rangeBand()):d?Math.floor((h.xAxisLength()-(t-1)*d)/t):Math.floor(h.xAxisLength()/(1+h.barPadding())/t))===1/0||isNaN(l)||l<c)&&(l=c)}}function s(e,n){return function(){var r=t.select(this).attr("fill")===e;return n?!r:r}}var l,c=1,f=3,h=n.stackMixin(n.coordinateGridMixin({})),d=2,p=!1,g=!1;return n.override(h,"rescale",function(){return h._rescale(),l=void 0,h}),n.override(h,"render",function(){return h.round()&&p&&!g&&n.logger.warn("By default, brush rounding is disabled if bars are centered. See dc.js bar chart API documentation for details."),h._render()}),h.label(function(t){return n.utils.printSingleValue(t.y0+t.y)},!1),h.plotData=function(){var e=h.chartBodyG().selectAll("g.stack").data(h.data());u(),e.enter().append("g").attr("class",function(t,e){return"stack _"+e});var n=e.size()-1;e.each(function(e,r){var i=t.select(this);a(i,0,e),h.renderLabel()&&n===r&&o(i,0,e)})},h.fadeDeselectedArea=function(){var t=h.chartBodyG().selectAll("rect.bar"),e=h.brush().extent();if(h.isOrdinal())h.hasFilter()?(t.classed(n.constants.SELECTED_CLASS,function(t){return h.hasFilter(t.x)}),t.classed(n.constants.DESELECTED_CLASS,function(t){return!h.hasFilter(t.x)})):(t.classed(n.constants.SELECTED_CLASS,!1),t.classed(n.constants.DESELECTED_CLASS,!1));else if(h.brushIsEmpty(e))t.classed(n.constants.DESELECTED_CLASS,!1);else{var r=e[0],i=e[1];t.classed(n.constants.DESELECTED_CLASS,function(t){return t.x<r||t.x>=i})}},h.centerBar=function(t){return arguments.length?(p=t,h):p},n.override(h,"onClick",function(t){h._onClick(t.data)}),h.barPadding=function(t){return arguments.length?(h._rangeBandPadding(t),d=void 0,h):h._rangeBandPadding()},h._useOuterPadding=function(){return void 0===d},h.outerPadding=h._outerRangeBandPadding,h.gap=function(t){return arguments.length?(d=t,h):d},h.extendBrush=function(){var t=h.brush().extent();return!h.round()||p&&!g||(t[0]=t.map(h.round())[0],t[1]=t.map(h.round())[1],h.chartBodyG().select(".brush").call(h.brush().extent(t))),t},h.alwaysUseRounding=function(t){return arguments.length?(g=t,h):g},h.legendHighlight=function(t){h.isLegendableHidden(t)||h.g().selectAll("rect.bar").classed("highlight",s(t.color)).classed("fadeout",s(t.color,!0))},h.legendReset=function(){h.g().selectAll("rect.bar").classed("highlight",!1).classed("fadeout",!1)},n.override(h,"xAxisMax",function(){var t=this._xAxisMax();return"resolution"in h.xUnits()&&(t+=h.xUnits().resolution),t}),h.anchor(e,r)},n.lineChart=function(e,r){function i(t,e){return k.getColor.call(t,t.values,e)}function o(e,r){var o=t.svg.line().x(function(t){return k.x()(t.x)}).y(function(t){return k.y()(t.y+t.y0)}).interpolate(N).tension(L);y&&o.defined(y);var a=e.append("path").attr("class","line").attr("stroke",i);x&&a.attr("stroke-dasharray",x),n.transition(r.select("path.line"),k.transitionDuration(),k.transitionDelay()).attr("stroke",i).attr("d",function(t){return u(o(t.values))})}function a(e,r){if(S){var o=t.svg.area().x(function(t){return k.x()(t.x)}).y(function(t){return k.y()(t.y+t.y0)}).y0(function(t){return k.y()(t.y0)}).interpolate(N).tension(L);y&&o.defined(y),e.append("path").attr("class","area").attr("fill",i).attr("d",function(t){return u(o(t.values))}),n.transition(r.select("path.area"),k.transitionDuration(),k.transitionDelay()).attr("fill",i).attr("d",function(t){return u(o(t.values))})}}function u(t){return!t||t.indexOf("NaN")>=0?"M0,0":t}function s(e,r){if("always"===k.xyTipsOn()||!k.brushOn()&&k.xyTipsOn()){var i=b+"-list",o=e.select("g."+i);o.empty()&&(o=e.append("g").attr("class",i)),r.each(function(e,r){var i=e.values;y&&(i=i.filter(y));var a=o.select("g."+b+"._"+r);a.empty()&&(a=o.append("g").attr("class",b+" _"+r)),c(a);var u=a.selectAll("circle."+w).data(i,n.pluck("x"));u.enter().append("circle").attr("class",w).attr("r",d()).style("fill-opacity",D).style("stroke-opacity",E).attr("fill",k.getColor).on("mousemove",function(){var e=t.select(this);f(e),h(e,a)}).on("mouseout",function(){p(t.select(this)),g(a)}),u.call(v,e),n.transition(u,k.transitionDuration()).attr("cx",function(t){return n.utils.safeNumber(k.x()(t.x))}).attr("cy",function(t){return n.utils.safeNumber(k.y()(t.y+t.y0))}).attr("fill",k.getColor),u.exit().remove()})}}function l(e){e.each(function(e,r){var i=t.select(this).selectAll("text.lineLabel").data(e.values,n.pluck("x"));i.enter().append("text").attr("class","lineLabel").attr("text-anchor","middle"),n.transition(i,k.transitionDuration()).attr("x",function(t){return n.utils.safeNumber(k.x()(t.x))}).attr("y",function(t){var e=k.y()(t.y+t.y0)-A;return n.utils.safeNumber(e)}).text(function(t){return k.label()(t)}),n.transition(i.exit(),k.transitionDuration()).attr("height",0).remove()})}function c(t){(t.select("path."+_).empty()?t.append("path").attr("class",_):t.select("path."+_)).style("display","none").attr("stroke-dasharray","5,5"),(t.select("path."+M).empty()?t.append("path").attr("class",M):t.select("path."+M)).style("display","none").attr("stroke-dasharray","5,5")}function f(t){return t.style("fill-opacity",.8),t.style("stroke-opacity",.8),t.attr("r",T),t}function h(t,e){var n=t.attr("cx"),r=t.attr("cy"),i="M"+(k._yAxisX()-k.margins().left)+" "+r+"L"+n+" "+r,o="M"+n+" "+k.yAxisHeight()+"L"+n+" "+r;e.select("path."+_).style("display","").attr("d",i),e.select("path."+M).style("display","").attr("d",o)}function d(){return C||T}function p(t){t.style("fill-opacity",D).style("stroke-opacity",E).attr("r",d())}function g(t){t.select("path."+_).style("display","none"),t.select("path."+M).style("display","none")}function v(t,e){k.renderTitle()&&(t.select("title").remove(),t.append("title").text(n.pluck("data",k.title(e.name))))}function m(e,n,r){return function(){var i=t.select(this),o=i.attr("stroke")===e&&i.attr("stroke-dasharray")===(n instanceof Array?n.join(","):null)||i.attr("fill")===e;return r?!o:o}}var y,x,b="dc-tooltip",w="dot",_="yRef",M="xRef",A=3,k=n.stackMixin(n.coordinateGridMixin({})),S=!1,T=5,C=null,D=1e-6,E=1e-6,N="linear",L=.7,O=!0;return k.transitionDuration(500),k.transitionDelay(0),k._rangeBandPadding(1),k.plotData=function(){var t=k.chartBodyG(),e=t.select("g.stack-list");e.empty()&&(e=t.append("g").attr("class","stack-list"));var n=e.selectAll("g.stack").data(k.data()),r=n.enter().append("g").attr("class",function(t,e){return"stack _"+e});o(r,n),a(r,n),s(t,n),k.renderLabel()&&l(n)},k.interpolate=function(t){return arguments.length?(N=t,k):N},k.tension=function(t){return arguments.length?(L=t,k):L},k.defined=function(t){return arguments.length?(y=t,k):y},k.dashStyle=function(t){return arguments.length?(x=t,k):x},k.renderArea=function(t){return arguments.length?(S=t,k):S},k.label(function(t){return n.utils.printSingleValue(t.y0+t.y)},!1),k.xyTipsOn=function(t){return arguments.length?(O=t,k):O},k.dotRadius=function(t){return arguments.length?(T=t,k):T},k.renderDataPoints=function(t){return arguments.length?(t?(D=t.fillOpacity||.8,E=t.strokeOpacity||.8,C=t.radius||2):(D=1e-6,E=1e-6,C=null),k):{fillOpacity:D,strokeOpacity:E,radius:C}},k.legendHighlight=function(t){k.isLegendableHidden(t)||k.g().selectAll("path.line, path.area").classed("highlight",m(t.color,t.dashstyle)).classed("fadeout",m(t.color,t.dashstyle,!0))},k.legendReset=function(){k.g().selectAll("path.line, path.area").classed("highlight",!1).classed("fadeout",!1)},n.override(k,"legendables",function(){var t=k._legendables();return x?t.map(function(t){return t.dashstyle=x,t}):t}),k.anchor(e,r)},n.dataCount=function(e,r){var i=t.format(",d"),o=n.baseMixin({}),a={some:"",all:""};return o.html=function(t){return arguments.length?(t.all&&(a.all=t.all),t.some&&(a.some=t.some),o):a},o.formatNumber=function(t){return arguments.length?(i=t,o):i},o._doRender=function(){var t=o.dimension().size(),e=o.group().value(),n=i(t),r=i(e);return t===e&&""!==a.all?o.root().html(a.all.replace("%total-count",n).replace("%filter-count",r)):""!==a.some?o.root().html(a.some.replace("%total-count",n).replace("%filter-count",r)):(o.selectAll(".total-count").text(n),o.selectAll(".filter-count").text(r)),o},o._doRedraw=function(){return o._doRender()},o.anchor(e,r)},n.dataTable=function(e,r){function i(){var t=!0;if(g.forEach(function(e){t&="function"==typeof e}),!t){var e=d.selectAll("thead").data([0]);e.enter().append("thead"),e.exit().remove();var n=e.selectAll("tr").data([0]);n.enter().append("tr"),n.exit().remove();var r=n.selectAll("th").data(g);r.enter().append("th"),r.exit().remove(),r.attr("class",h).html(function(t){return d._doColumnHeaderFormat(t)})}var i=d.root().selectAll("tbody").data(o(),function(t){return d.keyAccessor()(t)}),a=i.enter().append("tbody");return!0===x&&a.append("tr").attr("class",f).append("td").attr("class",s).attr("colspan",g.length).html(function(t){return d.keyAccessor()(t)}),i.exit().remove(),a}function o(){var e;return e=m===t.ascending?d.dimension().bottom(p):d.dimension().top(p),t.nest().key(d.group()).sortKeys(m).entries(e.sort(function(t,e){return m(v(t),v(e))}).slice(y,u))}function a(t){var e=t.order().selectAll("tr."+l).data(function(t){return t.values}),n=e.enter().append("tr").attr("class",l);return g.forEach(function(t,e){n.append("td").attr("class",c+" _"+e).html(function(e){return d._doColumnValueFormat(t,e)})}),e.exit().remove(),e}var u,s="dc-table-label",l="dc-table-row",c="dc-table-column",f="dc-table-group",h="dc-table-head",d=n.baseMixin({}),p=25,g=[],v=function(t){return t},m=t.ascending,y=0,x=!0;return d._doRender=function(){return d.selectAll("tbody").remove(),a(i()),d},d._doColumnValueFormat=function(t,e){return"function"==typeof t?t(e):"string"==typeof t?e[t]:t.format(e)},d._doColumnHeaderFormat=function(t){return"function"==typeof t?d._doColumnHeaderFnToString(t):"string"==typeof t?d._doColumnHeaderCapitalize(t):String(t.label)},d._doColumnHeaderCapitalize=function(t){return t.charAt(0).toUpperCase()+t.slice(1)},d._doColumnHeaderFnToString=function(t){var e=String(t),n=e.indexOf("return ");if(n>=0){var r=e.lastIndexOf(";");r>=0&&(e=e.substring(n+7,r)).indexOf("numberFormat")>=0&&(e=e.replace("numberFormat",""))}return e},d._doRedraw=function(){return d._doRender()},d.size=function(t){return arguments.length?(p=t,d):p},d.beginSlice=function(t){return arguments.length?(y=t,d):y},d.endSlice=function(t){return arguments.length?(u=t,d):u},d.columns=function(t){return arguments.length?(g=t,d):g},d.sortBy=function(t){return arguments.length?(v=t,d):v},d.order=function(t){return arguments.length?(m=t,d):m},d.showGroups=function(t){return arguments.length?(x=t,d):x},d.anchor(e,r)},n.dataGrid=function(e,r){function i(){var t=c.root().selectAll("div."+l).data(o(),function(t){return c.keyAccessor()(t)}),e=t.enter().append("div").attr("class",l);return v&&e.html(function(t){return v(t)}),t.exit().remove(),e}function o(){var e=c.dimension().top(f);return t.nest().key(c.group()).sortKeys(p).entries(e.sort(function(t,e){return p(d(t),d(e))}).slice(g,u))}function a(t){var e=t.order().selectAll("div."+s).data(function(t){return t.values});return e.enter().append("div").attr("class",s).html(function(t){return h(t)}),e.exit().remove(),e}var u,s="dc-grid-item",l="dc-grid-top",c=n.baseMixin({}),f=999,h=function(t){return"you need to provide an html() handling param:  "+JSON.stringify(t)},d=function(t){return t},p=t.ascending,g=0,v=function(t){return"<div class='dc-grid-group'><h1 class='dc-grid-label'>"+c.keyAccessor()(t)+"</h1></div>"};return c._doRender=function(){return c.selectAll("div."+l).remove(),a(i()),c},c._doRedraw=function(){return c._doRender()},c.beginSlice=function(t){return arguments.length?(g=t,c):g},c.endSlice=function(t){return arguments.length?(u=t,c):u},c.size=function(t){return arguments.length?(f=t,c):f},c.html=function(t){return arguments.length?(h=t,c):h},c.htmlGroup=function(t){return arguments.length?(v=t,c):v},c.sortBy=function(t){return arguments.length?(d=t,c):d},c.order=function(t){return arguments.length?(p=t,c):p},c.anchor(e,r)},n.bubbleChart=function(t,e){function r(t){var e=t.enter().append("g");e.attr("class",s.BUBBLE_NODE_CLASS).attr("transform",l).append("circle").attr("class",function(t,e){return s.BUBBLE_CLASS+" _"+e}).on("click",s.onClick).attr("fill",s.getColor).attr("r",0),n.transition(t,s.transitionDuration(),s.transitionDelay()).select("circle."+s.BUBBLE_CLASS).attr("r",function(t){return s.bubbleR(t)}).attr("opacity",function(t){return s.bubbleR(t)>0?1:0}),s._doRenderLabel(e),s._doRenderTitles(e)}function i(t){n.transition(t,s.transitionDuration(),s.transitionDelay()).attr("transform",l).select("circle."+s.BUBBLE_CLASS).attr("fill",s.getColor).attr("r",function(t){return s.bubbleR(t)}).attr("opacity",function(t){return s.bubbleR(t)>0?1:0}),s.doUpdateLabels(t),s.doUpdateTitles(t)}function o(t){t.exit().remove()}function a(t){var e=s.x()(s.keyAccessor()(t));return isNaN(e)&&(e=0),e}function u(t){var e=s.y()(s.valueAccessor()(t));return isNaN(e)&&(e=0),e}var s=n.bubbleMixin(n.coordinateGridMixin({}));s.transitionDuration(750),s.transitionDelay(0);var l=function(t){return"translate("+a(t)+","+u(t)+")"};return s.plotData=function(){s.calculateRadiusDomain(),s.r().range([s.MIN_RADIUS,s.xAxisLength()*s.maxBubbleRelativeSize()]);var t=s.data(),e=s.chartBodyG().selectAll("g."+s.BUBBLE_NODE_CLASS).data(t,function(t){return t.key});s.sortBubbleSize()&&e.order(),r(e),i(e),o(e),s.fadeDeselectedArea()},s.renderBrush=function(){},s.redrawBrush=function(){s.fadeDeselectedArea()},s.anchor(t,e)},n.compositeChart=function(e,r){function i(t,e){var n,r,i,a,u;return t&&(n=h(),r=g()),e&&(i=d(),a=v()),w.alignYAxes()&&t&&e&&(u=o(n,r,i,a)),u||{lyAxisMin:n,lyAxisMax:r,ryAxisMin:i,ryAxisMax:a}}function o(t,e,n,r){var i=(r-n)/(e-t);return{lyAxisMin:Math.min(t,n/i),lyAxisMax:Math.max(e,r/i),ryAxisMin:Math.min(n,t*i),ryAxisMax:Math.max(r,e*i)}}function a(e){var n=void 0===w.rightY()||w.elasticY(),r=n||w.resizing();void 0===w.rightY()&&w.rightY(t.scale.linear()),n&&w.rightY().domain([e.ryAxisMin,e.ryAxisMax]),r&&w.rightY().rangeRound([w.yAxisHeight(),0]),w.rightY().range([w.yAxisHeight(),0]),w.rightYAxis(w.rightYAxis().scale(w.rightY())),w.rightYAxis().orient("right")}function u(e){var n=void 0===w.y()||w.elasticY(),r=n||w.resizing();void 0===w.y()&&w.y(t.scale.linear()),n&&w.y().domain([e.lyAxisMin,e.lyAxisMax]),r&&w.y().rangeRound([w.yAxisHeight(),0]),w.y().range([w.yAxisHeight(),0]),w.yAxis(w.yAxis().scale(w.y())),w.yAxis().orient("left")}function s(t,e){t._generateG(w.g()),t.g().attr("class",b+" _"+e)}function l(){return _.filter(function(t){return!t.useRightYAxis()})}function c(){return _.filter(function(t){return t.useRightYAxis()})}function f(t){return t.map(function(t){return t.yAxisMin()})}function h(){return t.min(f(l()))}function d(){return t.min(f(c()))}function p(t){return t.map(function(t){return t.yAxisMax()})}function g(){return n.utils.add(t.max(p(l())),w.yAxisPadding())}function v(){return n.utils.add(t.max(p(c())),w.yAxisPadding())}function m(){return _.map(function(t){return t.xAxisMin()})}function y(){return _.map(function(t){return t.xAxisMax()})}var x,b="sub",w=n.coordinateGridMixin({}),_=[],M={},A=!1,k=!0,S=!1,T=t.svg.axis(),C=0,D=12,E=!1;return w._mandatoryAttributes([]),w.transitionDuration(500),w.transitionDelay(0),n.override(w,"_generateG",function(){for(var t=this.__generateG(),e=0;e<_.length;++e){var n=_[e];s(n,e),n.dimension()||n.dimension(w.dimension()),n.group()||n.group(w.group()),n.chartGroup(w.chartGroup()),n.svg(w.svg()),n.xUnits(w.xUnits()),n.transitionDuration(w.transitionDuration(),w.transitionDelay()),n.brushOn(w.brushOn()),n.renderTitle(w.renderTitle()),n.elasticX(w.elasticX())}return t}),w._brushing=function(){for(var t=w.extendBrush(),e=w.brushIsEmpty(t),n=0;n<_.length;++n)_[n].replaceFilter(e?null:t)},w._prepareYAxis=function(){var t=0!==l().length,e=0!==c().length,n=i(t,e);t&&u(n),e&&a(n),l().length>0&&!E?w._renderHorizontalGridLinesForAxis(w.g(),w.y(),w.yAxis()):c().length>0&&w._renderHorizontalGridLinesForAxis(w.g(),x,T)},w.renderYAxis=function(){0!==l().length&&(w.renderYAxisAt("y",w.yAxis(),w.margins().left),w.renderYAxisLabel("y",w.yAxisLabel(),-90)),0!==c().length&&(w.renderYAxisAt("yr",w.rightYAxis(),w.width()-w.margins().right),w.renderYAxisLabel("yr",w.rightYAxisLabel(),90,w.width()-D))},w.plotData=function(){for(var t=0;t<_.length;++t){var e=_[t];e.g()||s(e,t),A&&e.colors(w.colors()),e.x(w.x()),e.xAxis(w.xAxis()),e.useRightYAxis()?(e.y(w.rightY()),e.yAxis(w.rightYAxis())):(e.y(w.y()),e.yAxis(w.yAxis())),e.plotData(),e._activateRenderlets()}},w.useRightAxisGridLines=function(t){return arguments?(E=t,w):E},w.childOptions=function(t){return arguments.length?(M=t,_.forEach(function(t){t.options(M)}),w):M},w.fadeDeselectedArea=function(){for(var t=0;t<_.length;++t){var e=_[t];e.brush(w.brush()),e.fadeDeselectedArea()}},w.rightYAxisLabel=function(t,e){return arguments.length?(C=t,w.margins().right-=D,D=void 0===e?12:e,w.margins().right+=D,w):C},w.compose=function(t){return(_=t).forEach(function(t){t.height(w.height()),t.width(w.width()),t.margins(w.margins()),k&&t.title(w.title()),t.options(M)}),w},w.children=function(){return _},w.shareColors=function(t){return arguments.length?(A=t,w):A},w.shareTitle=function(t){return arguments.length?(k=t,w):k},w.rightY=function(t){return arguments.length?(x=t,w.rescale(),w):x},w.alignYAxes=function(t){return arguments.length?(S=t,w.rescale(),w):S},delete w.yAxisMin,delete w.yAxisMax,n.override(w,"xAxisMin",function(){return n.utils.subtract(t.min(m()),w.xAxisPadding())}),n.override(w,"xAxisMax",function(){return n.utils.add(t.max(y()),w.xAxisPadding())}),w.legendables=function(){return _.reduce(function(t,e){return A&&e.colors(w.colors()),t.push.apply(t,e.legendables()),t},[])},w.legendHighlight=function(t){for(var e=0;e<_.length;++e)_[e].legendHighlight(t)},w.legendReset=function(t){for(var e=0;e<_.length;++e)_[e].legendReset(t)},w.legendToggle=function(){console.log("composite should not be getting legendToggle itself")},w.rightYAxis=function(t){return arguments.length?(T=t,w):T},w.anchor(e,r)},n.seriesChart=function(e,r){function i(t){s[t].g()&&s[t].g().remove(),delete s[t]}function o(){Object.keys(s).map(i),s={}}var a,u=n.compositeChart(e,r),s={},l=n.lineChart,c=t.ascending,f=function(e,n){return t.ascending(u.keyAccessor()(e),u.keyAccessor()(n))};return u._mandatoryAttributes().push("seriesAccessor","chart"),u.shareColors(!0),u._preprocessData=function(){var e,n=[],o=t.nest().key(a);c&&o.sortKeys(c),f&&o.sortValues(f);var h=o.entries(u.data()).map(function(i,o){var a=s[i.key]||l.call(u,u,r,i.key,o);return s[i.key]||(e=!0),s[i.key]=a,n.push(i.key),a.dimension(u.dimension()).group({all:t.functor(i.values)},i.key).keyAccessor(u.keyAccessor()).valueAccessor(u.valueAccessor()).brushOn(u.brushOn())});Object.keys(s).filter(function(t){return-1===n.indexOf(t)}).forEach(function(t){i(t),e=!0}),u._compose(h),e&&u.legend()&&u.legend().render()},u.chart=function(t){return arguments.length?(l=t,o(),u):l},u.seriesAccessor=function(t){return arguments.length?(a=t,o(),u):a},u.seriesSort=function(t){return arguments.length?(c=t,o(),u):c},u.valueSort=function(t){return arguments.length?(f=t,o(),u):f},u._compose=u.compose,delete u.compose,u},n.geoChoroplethChart=function(e,r){function i(t){var e=o();if(a(t)){var n=u(t);d(n,t,e),p(n,t,e)}}function o(){for(var t={},e=g.data(),n=0;n<e.length;++n)t[g.keyAccessor()(e[n])]=g.valueAccessor()(e[n]);return t}function a(t){return h(t).keyAccessor}function u(t){return g.svg().selectAll(s(t)).classed("selected",function(e){return l(t,e)}).classed("deselected",function(e){return c(t,e)}).attr("class",function(e){var r=h(t).name+" "+n.utils.nameToId(h(t).keyAccessor(e));return l(t,e)&&(r+=" selected"),c(t,e)&&(r+=" deselected"),r})}function s(t){return"g.layer"+t+" g."+h(t).name}function l(t,e){return g.hasFilter()&&g.hasFilter(f(t,e))}function c(t,e){return g.hasFilter()&&!g.hasFilter(f(t,e))}function f(t,e){return h(t).keyAccessor(e)}function h(t){return y[t]}function d(e,r,i){var o=e.select("path").attr("fill",function(){var e=t.select(this).attr("fill");return e||"none"}).on("click",function(t){return g.onClick(t,r)});n.transition(o,g.transitionDuration(),g.transitionDelay()).attr("fill",function(t,e){return g.getColor(i[h(r).keyAccessor(t)],e)})}function p(t,e,n){g.renderTitle()&&t.selectAll("title").text(function(t){var r=f(e,t),i=n[r];return g.title()({key:r,value:i})})}var g=n.colorMixin(n.baseMixin({}));g.colorAccessor(function(t){return t||0});var v,m=t.geo.path(),y=[];return g._doRender=function(){g.resetSvg();for(var t=0;t<y.length;++t){var e=g.svg().append("g").attr("class","layer"+t).selectAll("g."+h(t).name).data(h(t).data).enter().append("g").attr("class",h(t).name);e.append("path").attr("fill","white").attr("d",m),e.append("title"),i(t)}v=!1},g.onClick=function(t,e){var r=h(e).keyAccessor(t);n.events.trigger(function(){g.filter(r),g.redrawGroup()})},g._doRedraw=function(){for(var t=0;t<y.length;++t)i(t),v&&g.svg().selectAll("g."+h(t).name+" path").attr("d",m);v=!1},g.overlayGeoJson=function(t,e,n){for(var r=0;r<y.length;++r)if(y[r].name===e)return y[r].data=t,y[r].keyAccessor=n,g;return y.push({name:e,data:t,keyAccessor:n}),g},g.projection=function(t){return m.projection(t),v=!0,g},g.geoJsons=function(){return y},g.geoPath=function(){return m},g.removeGeoJson=function(t){for(var e=[],n=0;n<y.length;++n){var r=y[n];r.name!==t&&e.push(r)}return y=e,g},g.anchor(e,r)},n.bubbleOverlay=function(e,r){function i(){return(l=d.select("g."+c)).empty()&&(l=d.svg().append("g").attr("class",c)),l}function o(){var t=a();d.calculateRadiusDomain(),p.forEach(function(e){var r=u(e,t),i=r.select("circle."+h);i.empty()&&(i=r.append("circle").attr("class",h).attr("r",0).attr("fill",d.getColor).on("click",d.onClick)),n.transition(i,d.transitionDuration(),d.transitionDelay()).attr("r",function(t){return d.bubbleR(t)}),d._doRenderLabel(r),d._doRenderTitles(r)})}function a(){var t={};return d.data().forEach(function(e){t[d.keyAccessor()(e)]=e}),t}function u(t,e){var r=f+" "+n.utils.nameToId(t.name),i=l.select("g."+n.utils.nameToId(t.name));return i.empty()&&(i=l.append("g").attr("class",r).attr("transform","translate("+t.x+","+t.y+")")),i.datum(e[t.name]),i}function s(){var t=a();d.calculateRadiusDomain(),p.forEach(function(e){var r=u(e,t),i=r.select("circle."+h);n.transition(i,d.transitionDuration(),d.transitionDelay()).attr("r",function(t){return d.bubbleR(t)}).attr("fill",d.getColor),d.doUpdateLabels(r),d.doUpdateTitles(r)})}var l,c="bubble-overlay",f="node",h="bubble",d=n.bubbleMixin(n.baseMixin({})),p=[];return d.transitionDuration(750),d.transitionDelay(0),d.radiusValueAccessor(function(t){return t.value}),d.point=function(t,e,n){return p.push({name:t,x:e,y:n}),d},d._doRender=function(){return l=i(),d.r().range([d.MIN_RADIUS,d.width()*d.maxBubbleRelativeSize()]),o(),d.fadeDeselectedArea(),d},d._doRedraw=function(){return s(),d.fadeDeselectedArea(),d},d.debug=function(e){if(e){var r=d.select("g."+n.constants.DEBUG_GROUP_CLASS);r.empty()&&(r=d.svg().append("g").attr("class",n.constants.DEBUG_GROUP_CLASS));var i=r.append("text").attr("x",10).attr("y",20);r.append("rect").attr("width",d.width()).attr("height",d.height()).on("mousemove",function(){var e=t.mouse(r.node()),n=e[0]+", "+e[1];i.text(n)})}else d.selectAll(".debug").remove();return d},d.anchor(e,r),d},n.rowChart=function(e,r){function i(){if(!x||b){var e=t.extent(w,L.cappedValueAccessor);e[0]>0&&(e[0]=0),e[1]<0&&(e[1]=0),x=t.scale.linear().domain(e).range([0,L.effectiveWidth()])}O.scale(x)}function o(){var t=y.select("g.axis");i(),t.empty()&&(t=y.append("g").attr("class","axis")),t.attr("transform","translate(0, "+L.effectiveHeight()+")"),n.transition(t,L.transitionDuration(),L.transitionDelay()).call(O)}function a(){y.selectAll("g.tick").select("line.grid-line").remove(),y.selectAll("g.tick").append("line").attr("class","grid-line").attr("x1",0).attr("y1",0).attr("x2",0).attr("y2",function(){return-L.effectiveHeight()})}function u(){w=L.data(),o(),a();var t=y.selectAll("g."+D).data(w);s(t),l(t),f(t)}function s(t){var e=t.enter().append("g").attr("class",function(t,e){return D+" _"+e});e.append("rect").attr("width",0),d(e)}function l(t){t.exit().remove()}function c(){var t=x(0);return t===-1/0||t!==t?x(1):t}function f(t){var e,r=w.length;e=C||(L.effectiveHeight()-(r+1)*T)/r,A||(M=e/2);var i=t.attr("transform",function(t,n){return"translate(0,"+((n+1)*T+n*e)+")"}).select("rect").attr("height",e).attr("fill",L.getColor).on("click",g).classed("deselected",function(t){return!!L.hasFilter()&&!m(t)}).classed("selected",function(t){return!!L.hasFilter()&&m(t)});n.transition(i,L.transitionDuration(),L.transitionDelay()).attr("width",function(t){return Math.abs(c()-x(L.valueAccessor()(t)))}).attr("transform",v),h(t),p(t)}function h(t){L.renderTitle()&&(t.select("title").remove(),t.append("title").text(L.title()))}function d(t){L.renderLabel()&&t.append("text").on("click",g),L.renderTitleLabel()&&t.append("text").attr("class",E).on("click",g)}function p(t){if(L.renderLabel()){var e=t.select("text").attr("x",_).attr("y",M).attr("dy",k).on("click",g).attr("class",function(t,e){return D+" _"+e}).text(function(t){return L.label()(t)});n.transition(e,L.transitionDuration(),L.transitionDelay()).attr("transform",v)}if(L.renderTitleLabel()){var r=t.select("."+E).attr("x",L.effectiveWidth()-S).attr("y",M).attr("dy",k).attr("text-anchor","end").on("click",g).attr("class",function(t,e){return E+" _"+e}).text(function(t){return L.title()(t)});n.transition(r,L.transitionDuration(),L.transitionDelay()).attr("transform",v)}}function g(t){L.onClick(t)}function v(t){var e=x(L.cappedValueAccessor(t)),n=c();return"translate("+(e>n?n:e)+",0)"}function m(t){return L.hasFilter(L.cappedKeyAccessor(t))}var y,x,b,w,_=10,M=15,A=!1,k="0.35em",S=2,T=5,C=!1,D="row",E="titlerow",N=!1,L=n.capMixin(n.marginMixin(n.colorMixin(n.baseMixin({})))),O=t.svg.axis().orient("bottom");return L.rowsCap=L.cap,L._doRender=function(){return L.resetSvg(),y=L.svg().append("g").attr("transform","translate("+L.margins().left+","+L.margins().top+")"),u(),L},L.title(function(t){return L.cappedKeyAccessor(t)+": "+L.cappedValueAccessor(t)}),L.label(L.cappedKeyAccessor),L.x=function(t){return arguments.length?(x=t,L):x},L.renderTitleLabel=function(t){return arguments.length?(N=t,L):N},L._doRedraw=function(){return u(),L},L.xAxis=function(){return O},L.fixedBarHeight=function(t){return arguments.length?(C=t,L):C},L.gap=function(t){return arguments.length?(T=t,L):T},L.elasticX=function(t){return arguments.length?(b=t,L):b},L.labelOffsetX=function(t){return arguments.length?(_=t,L):_},L.labelOffsetY=function(t){return arguments.length?(M=t,A=!0,L):M},L.titleLabelOffsetX=function(t){return arguments.length?(S=t,L):S},L.anchor(e,r)},n.legend=function(){function t(){return l+s}var e,r,i,o={},a=0,u=0,s=12,l=5,c=!1,f=560,h=70,d=!1,p=n.pluck("name");return o.parent=function(t){return arguments.length?(e=t,o):e},o.render=function(){e.svg().select("g.dc-legend").remove(),i=e.svg().append("g").attr("class","dc-legend").attr("transform","translate("+a+","+u+")");var o=e.legendables();void 0!==r&&(o=o.slice(0,r));var g=i.selectAll("g.dc-legend-item").data(o).enter().append("g").attr("class","dc-legend-item").on("mouseover",function(t){e.legendHighlight(t)}).on("mouseout",function(t){e.legendReset(t)}).on("click",function(t){t.chart.legendToggle(t)});i.selectAll("g.dc-legend-item").classed("fadeout",function(t){return t.chart.isLegendableHidden(t)}),o.some(n.pluck("dashstyle"))?g.append("line").attr("x1",0).attr("y1",s/2).attr("x2",s).attr("y2",s/2).attr("stroke-width",2).attr("stroke-dasharray",n.pluck("dashstyle")).attr("stroke",n.pluck("color")):g.append("rect").attr("width",s).attr("height",s).attr("fill",function(t){return t?t.color:"blue"}),g.append("text").text(p).attr("x",s+2).attr("y",function(){return s/2+(this.clientHeight?this.clientHeight:13)/2-2});var v=0,m=0;g.attr("transform",function(e,n){if(c){var r=!0===d?this.getBBox().width+l:h;v+r>f&&v>0&&(++m,v=0);var i="translate("+v+","+m*t()+")";return v+=r,i}return"translate(0,"+n*t()+")"})},o.x=function(t){return arguments.length?(a=t,o):a},o.y=function(t){return arguments.length?(u=t,o):u},o.gap=function(t){return arguments.length?(l=t,o):l},o.itemHeight=function(t){return arguments.length?(s=t,o):s},o.horizontal=function(t){return arguments.length?(c=t,o):c},o.legendWidth=function(t){return arguments.length?(f=t,o):f},o.itemWidth=function(t){return arguments.length?(h=t,o):h},o.autoItemWidth=function(t){return arguments.length?(d=t,o):d},o.legendText=function(t){return arguments.length?(p=t,o):p},o.maxItems=function(t){return arguments.length?(r=n.utils.isNumber(t)?t:void 0,o):r},o},n.scatterPlot=function(e,r){function i(t,e){return l(t)?w[e]?Math.pow(d,2):Math.pow(p,2):Math.pow(m,2)}function o(t,e){u.renderTitle()&&(t.selectAll("title").remove(),t.append("title").text(function(t){return u.title()(t)}))}function a(e,r){var i=u.chartBodyG().selectAll(".chart-body path.symbol").filter(function(){return e(t.select(this))}),o=s.size();s.size(Math.pow(r,2)),n.transition(i,u.transitionDuration(),u.transitionDelay()).attr("d",s),s.size(o)}var u=n.coordinateGridMixin({}),s=t.svg.symbol(),l=function(t){return t.value},c=u.keyAccessor();u.keyAccessor(function(t){return c(t)[0]}),u.valueAccessor(function(t){return c(t)[1]}),u.colorAccessor(function(){return u._groupName}),u.title(function(t){return u.keyAccessor()(t)+","+u.valueAccessor()(t)+": "+u.existenceAccessor()(t)});var f=function(t){return"translate("+u.x()(u.keyAccessor()(t))+","+u.y()(u.valueAccessor()(t))+")"},h=7,d=5,p=3,g=null,v=1,m=0,y=0,x=1,b=null,w=[];return s.size(i),n.override(u,"_filter",function(t){return arguments.length?u.__filter(n.filters.RangedTwoDimensionalFilter(t)):u.__filter()}),u.plotData=function(){var t=u.chartBodyG().selectAll("path.symbol").data(u.data());t.enter().append("path").attr("class","symbol").attr("opacity",0).attr("fill",u.getColor).attr("transform",f),t.call(o,u.data()),t.each(function(t,e){w[e]=!u.filter()||u.filter().isFiltered([t.key[0],t.key[1]])}),n.transition(t,u.transitionDuration(),u.transitionDelay()).attr("opacity",function(t,e){return l(t)?w[e]?x:u.excludedOpacity():y}).attr("fill",function(t,e){return b&&!l(t)?b:u.excludedColor()&&!w[e]?u.excludedColor():u.getColor(t)}).attr("transform",f).attr("d",s),n.transition(t.exit(),u.transitionDuration(),u.transitionDelay()).attr("opacity",0).remove()},u.existenceAccessor=function(t){return arguments.length?(l=t,this):l},u.symbol=function(t){return arguments.length?(s.type(t),u):s.type()},u.customSymbol=function(t){return arguments.length?((s=t).size(i),u):s},u.symbolSize=function(t){return arguments.length?(d=t,u):d},u.highlightedSize=function(t){return arguments.length?(h=t,u):h},u.excludedSize=function(t){return arguments.length?(p=t,u):p},u.excludedColor=function(t){return arguments.length?(g=t,u):g},u.excludedOpacity=function(t){return arguments.length?(v=t,u):v},u.hiddenSize=u.emptySize=function(t){return arguments.length?(m=t,u):m},u.emptyColor=function(t){return arguments.length?(b=t,u):b},u.emptyOpacity=function(t){return arguments.length?(y=t,u):y},u.nonemptyOpacity=function(t){return arguments.length?(x=t,u):y},u.legendables=function(){return[{chart:u,name:u._groupName,color:u.getColor()}]},u.legendHighlight=function(e){a(function(t){return t.attr("fill")===e.color},h),u.chartBodyG().selectAll(".chart-body path.symbol").filter(function(){return t.select(this).attr("fill")!==e.color}).classed("fadeout",!0)},u.legendReset=function(e){a(function(t){return t.attr("fill")===e.color},d),u.chartBodyG().selectAll(".chart-body path.symbol").filter(function(){return t.select(this).attr("fill")!==e.color}).classed("fadeout",!1)},u.setHandlePaths=function(){},u.extendBrush=function(){var t=u.brush().extent();return u.round()&&(t[0]=t[0].map(u.round()),t[1]=t[1].map(u.round()),u.g().select(".brush").call(u.brush().extent(t))),t},u.brushIsEmpty=function(t){return u.brush().empty()||!t||t[0][0]>=t[1][0]||t[0][1]>=t[1][1]},u._brushing=function(){var t=u.extendBrush();if(u.redrawBrush(u.g()),u.brushIsEmpty(t))n.events.trigger(function(){u.filter(null),u.redrawGroup()});else{var e=n.filters.RangedTwoDimensionalFilter(t);n.events.trigger(function(){u.filter(null),u.filter(e),u.redrawGroup()},n.constants.EVENT_DELAY)}},u.setBrushY=function(t){t.call(u.brush().y(u.y()))},u.anchor(e,r)},n.numberDisplay=function(e,r){function i(t){if(!t.length)return null;var e=u._computeOrderedGroups(t);return e[e.length-1]}var o,a=t.format(".2s"),u=n.baseMixin({}),s={one:"",some:"",none:""};return u._mandatoryAttributes(["group"]),u.ordering(function(t){return t.value}),u.html=function(t){return arguments.length?(t.none?s.none=t.none:t.one?s.none=t.one:t.some&&(s.none=t.some),t.one?s.one=t.one:t.some&&(s.one=t.some),t.some?s.some=t.some:t.one&&(s.some=t.one),u):s},u.value=function(){return u.data()},u.data(function(t){var e=t.value?t.value():i(t.all());return u.valueAccessor()(e)}),u.transitionDuration(250),u.transitionDelay(0),u._doRender=function(){var e=u.value(),n=u.selectAll(".number-display");n.empty()&&(n=n.data([0]).enter().append("span").attr("class","number-display")),n.transition().duration(u.transitionDuration()).delay(u.transitionDelay()).ease("quad-out-in").tween("text",function(){var n=isFinite(o)?o:0,r=t.interpolateNumber(n||0,e);return o=e,function(t){var n=null,i=u.formatNumber()(r(t));0===e&&""!==s.none?n=s.none:1===e&&""!==s.one?n=s.one:""!==s.some&&(n=s.some),this.innerHTML=n?n.replace("%number",i):i}})},u._doRedraw=function(){return u._doRender()},u.formatNumber=function(t){return arguments.length?(a=t,u):a},u.anchor(e,r)},n.heatMap=function(e,r){function i(t,e){var r=p.selectAll(".box-group").filter(function(n){return n.key[t]===e}),i=r.filter(function(t){return!p.hasFilter(t.key)});n.events.trigger(function(){var t=(i.empty()?r:i).data().map(function(t){return n.filters.TwoDimensionalFilter(t.key)});p._filter([t]),p.redrawGroup()})}var o,a,u,s=t.ascending,l=t.ascending,c=t.scale.ordinal(),f=t.scale.ordinal(),h=6.75,d=6.75,p=n.colorMixin(n.marginMixin(n.baseMixin({})));p._mandatoryAttributes(["group"]),p.title(p.colorAccessor());var g=function(t){return t},v=function(t){return t};p.colsLabel=function(t){return arguments.length?(g=t,p):g},p.rowsLabel=function(t){return arguments.length?(v=t,p):v};var m=function(t){i(0,t)},y=function(t){i(1,t)},x=function(t){var e=t.key;n.events.trigger(function(){p.filter(e),p.redrawGroup()})};return n.override(p,"filter",function(t){return arguments.length?p._filter(n.filters.TwoDimensionalFilter(t)):p._filter()}),p.rows=function(t){return arguments.length?(u=t,p):u},p.rowOrdering=function(t){return arguments.length?(l=t,p):l},p.cols=function(t){return arguments.length?(a=t,p):a},p.colOrdering=function(t){return arguments.length?(s=t,p):s},p._doRender=function(){return p.resetSvg(),o=p.svg().append("g").attr("class","heatmap").attr("transform","translate("+p.margins().left+","+p.margins().top+")"),p._doRedraw()},p._doRedraw=function(){var t=p.data(),e=p.rows()||t.map(p.valueAccessor()),r=p.cols()||t.map(p.keyAccessor());l&&(e=e.sort(l)),s&&(r=r.sort(s)),e=f.domain(e),r=c.domain(r);var i=e.domain().length,a=r.domain().length,u=Math.floor(p.effectiveWidth()/a),g=Math.floor(p.effectiveHeight()/i);r.rangeRoundBands([0,p.effectiveWidth()]),e.rangeRoundBands([p.effectiveHeight(),0]);var v=o.selectAll("g.box-group").data(p.data(),function(t,e){return p.keyAccessor()(t,e)+"\0"+p.valueAccessor()(t,e)}),m=v.enter().append("g").attr("class","box-group");m.append("rect").attr("class","heat-box").attr("fill","white").on("click",p.boxOnClick()),p.renderTitle()&&(m.append("title"),v.select("title").text(p.title())),n.transition(v.select("rect"),p.transitionDuration(),p.transitionDelay()).attr("x",function(t,e){return r(p.keyAccessor()(t,e))}).attr("y",function(t,n){return e(p.valueAccessor()(t,n))}).attr("rx",h).attr("ry",d).attr("fill",p.getColor).attr("width",u).attr("height",g),v.exit().remove();var y=o.select("g.cols");y.empty()&&(y=o.append("g").attr("class","cols axis"));var x=y.selectAll("text").data(r.domain());x.enter().append("text").attr("x",function(t){return r(t)+u/2}).style("text-anchor","middle").attr("y",p.effectiveHeight()).attr("dy",12).on("click",p.xAxisOnClick()).text(p.colsLabel()),n.transition(x,p.transitionDuration(),p.transitionDelay()).text(p.colsLabel()).attr("x",function(t){return r(t)+u/2}).attr("y",p.effectiveHeight()),x.exit().remove();var b=o.select("g.rows");b.empty()&&(b=o.append("g").attr("class","rows axis"));var w=b.selectAll("text").data(e.domain());return w.enter().append("text").attr("dy",6).style("text-anchor","end").attr("x",0).attr("dx",-2).on("click",p.yAxisOnClick()).text(p.rowsLabel()),n.transition(w,p.transitionDuration(),p.transitionDelay()).text(p.rowsLabel()).attr("y",function(t){return e(t)+g/2}),w.exit().remove(),p.hasFilter()?p.selectAll("g.box-group").each(function(t){p.isSelectedNode(t)?p.highlightSelected(this):p.fadeDeselected(this)}):p.selectAll("g.box-group").each(function(){p.resetHighlight(this)}),p},p.boxOnClick=function(t){return arguments.length?(x=t,p):x},p.xAxisOnClick=function(t){return arguments.length?(m=t,p):m},p.yAxisOnClick=function(t){return arguments.length?(y=t,p):y},p.xBorderRadius=function(t){return arguments.length?(h=t,p):h},p.yBorderRadius=function(t){return arguments.length?(d=t,p):d},p.isSelectedNode=function(t){return p.hasFilter(t.key)},p.anchor(e,r)},function(){function e(t){return[0,t.length-1]}function n(e){return[t.quantile(e,.25),t.quantile(e,.5),t.quantile(e,.75)]}t.box=function(){function r(e){e.each(function(e,n){e=e.map(l).sort(t.ascending);var r=t.select(this),d=e.length,p=e[0],g=e[d-1],v=e.quartiles=f(e),m=c&&c.call(this,e,n),y=m&&m.map(function(t){return e[t]}),x=m?t.range(0,m[0]).concat(t.range(m[1]+1,d)):t.range(d),b=t.scale.linear().domain(s&&s.call(this,e,n)||[p,g]).range([o,0]),w=this.__chart__||t.scale.linear().domain([0,1/0]).range(b.range());this.__chart__=b;var _=r.selectAll("line.center").data(y?[y]:[]);_.enter().insert("line","rect").attr("class","center").attr("x1",i/2).attr("y1",function(t){return w(t[0])}).attr("x2",i/2).attr("y2",function(t){return w(t[1])}).style("opacity",1e-6).transition().duration(a).delay(u).style("opacity",1).attr("y1",function(t){return b(t[0])}).attr("y2",function(t){return b(t[1])}),_.transition().duration(a).delay(u).style("opacity",1).attr("x1",i/2).attr("x2",i/2).attr("y1",function(t){return b(t[0])}).attr("y2",function(t){return b(t[1])}),_.exit().transition().duration(a).delay(u).style("opacity",1e-6).attr("y1",function(t){return b(t[0])}).attr("y2",function(t){return b(t[1])}).remove();var M=r.selectAll("rect.box").data([v]);M.enter().append("rect").attr("class","box").attr("x",0).attr("y",function(t){return w(t[2])}).attr("width",i).attr("height",function(t){return w(t[0])-w(t[2])}).transition().duration(a).delay(u).attr("y",function(t){return b(t[2])}).attr("height",function(t){return b(t[0])-b(t[2])}),M.transition().duration(a).delay(u).attr("width",i).attr("y",function(t){return b(t[2])}).attr("height",function(t){return b(t[0])-b(t[2])});var A=r.selectAll("line.median").data([v[1]]);A.enter().append("line").attr("class","median").attr("x1",0).attr("y1",w).attr("x2",i).attr("y2",w).transition().duration(a).delay(u).attr("y1",b).attr("y2",b),A.transition().duration(a).delay(u).attr("x1",0).attr("x2",i).attr("y1",b).attr("y2",b);var k=r.selectAll("line.whisker").data(y||[]);k.enter().insert("line","circle, text").attr("class","whisker").attr("x1",0).attr("y1",w).attr("x2",i).attr("y2",w).style("opacity",1e-6).transition().duration(a).delay(u).attr("y1",b).attr("y2",b).style("opacity",1),k.transition().duration(a).delay(u).attr("x1",0).attr("x2",i).attr("y1",b).attr("y2",b).style("opacity",1),k.exit().transition().duration(a).delay(u).attr("y1",b).attr("y2",b).style("opacity",1e-6).remove();var S=r.selectAll("circle.outlier").data(x,Number);S.enter().insert("circle","text").attr("class","outlier").attr("r",5).attr("cx",i/2).attr("cy",function(t){return w(e[t])}).style("opacity",1e-6).transition().duration(a).delay(u).attr("cy",function(t){return b(e[t])}).style("opacity",1),S.transition().duration(a).delay(u).attr("cx",i/2).attr("cy",function(t){return b(e[t])}).style("opacity",1),S.exit().transition().duration(a).delay(u).attr("cy",function(t){return b(e[t])}).style("opacity",1e-6).remove();var T=h||b.tickFormat(8),C=r.selectAll("text.box").data(v);C.enter().append("text").attr("class","box").attr("dy",".3em").attr("dx",function(t,e){return 1&e?6:-6}).attr("x",function(t,e){return 1&e?i:0}).attr("y",w).attr("text-anchor",function(t,e){return 1&e?"start":"end"}).text(T).transition().duration(a).delay(u).attr("y",b),C.transition().duration(a).delay(u).text(T).attr("x",function(t,e){return 1&e?i:0}).attr("y",b);var D=r.selectAll("text.whisker").data(y||[]);D.enter().append("text").attr("class","whisker").attr("dy",".3em").attr("dx",6).attr("x",i).attr("y",w).text(T).style("opacity",1e-6).transition().duration(a).delay(u).attr("y",b).style("opacity",1),D.transition().duration(a).delay(u).text(T).attr("x",i).attr("y",b).style("opacity",1),D.exit().transition().duration(a).delay(u).attr("y",b).style("opacity",1e-6).remove()}),t.timer.flush()}var i=1,o=1,a=0,u=0,s=null,l=Number,c=e,f=n,h=null;return r.width=function(t){return arguments.length?(i=t,r):i},r.height=function(t){return arguments.length?(o=t,r):o},r.tickFormat=function(t){return arguments.length?(h=t,r):h},r.duration=function(t){return arguments.length?(a=t,r):a},r.domain=function(e){return arguments.length?(s=null===e?e:t.functor(e),r):s},r.value=function(t){return arguments.length?(l=t,r):l},r.whiskers=function(t){return arguments.length?(c=t,r):c},r.quartiles=function(t){return arguments.length?(f=t,r):f},r}}(),n.boxPlot=function(e,r){function i(t){t.enter().append("g").attr("class","box").attr("transform",h).call(l).on("click",function(t){u.filter(u.keyAccessor()(t)),u.redrawGroup()})}function o(e){n.transition(e,u.transitionDuration(),u.transitionDelay()).attr("transform",h).call(l).each(function(){t.select(this).select("rect.box").attr("fill",u.getColor)})}function a(t){t.exit().remove().call(l)}var u=n.coordinateGridMixin({}),s=function(t){return function(e){var n=e.quartiles[0],r=e.quartiles[2],i=(r-n)*t,o=-1,a=e.length;do{++o}while(e[o]<n-i);do{--a}while(e[a]>r+i);return[o,a]}}(1.5),l=t.box(),c=null,f=function(t,e){return u.isOrdinal()?u.x().rangeBand():t/(1+u.boxPadding())/e};u.yAxisPadding(12),u.x(t.scale.ordinal()),u.xUnits(n.units.ordinal),u.data(function(t){return t.all().map(function(t){return t.map=function(e){return e.call(t,t)},t}).filter(function(t){return 0!==u.valueAccessor()(t).length})}),u.boxPadding=u._rangeBandPadding,u.boxPadding(.8),u.outerPadding=u._outerRangeBandPadding,u.outerPadding(.5),u.boxWidth=function(e){return arguments.length?(f=t.functor(e),u):f};var h=function(t,e){return"translate("+u.x()(u.keyAccessor()(t,e))+", 0)"};return u._preprocessData=function(){u.elasticX()&&u.x().domain([])},u.plotData=function(){var t=f(u.effectiveWidth(),u.xUnitCount());l.whiskers(s).width(t).height(u.effectiveHeight()).value(u.valueAccessor()).domain(u.y().domain()).duration(u.transitionDuration()).tickFormat(c);var e=u.chartBodyG().selectAll("g.box").data(u.data(),u.keyAccessor());i(e),o(e),a(e),u.fadeDeselectedArea()},u.fadeDeselectedArea=function(){if(u.hasFilter())if(u.isOrdinal())u.g().selectAll("g.box").each(function(t){u.isSelectedNode(t)?u.highlightSelected(this):u.fadeDeselected(this)});else{var t=u.brush().extent(),e=t[0],n=t[1],r=u.keyAccessor();u.g().selectAll("g.box").each(function(t){var i=r(t);i<e||i>=n?u.fadeDeselected(this):u.highlightSelected(this)})}else u.g().selectAll("g.box").each(function(){u.resetHighlight(this)})},u.isSelectedNode=function(t){return u.hasFilter(u.keyAccessor()(t))},u.yAxisMin=function(){var e=t.min(u.data(),function(e){return t.min(u.valueAccessor()(e))});return n.utils.subtract(e,u.yAxisPadding())},u.yAxisMax=function(){var e=t.max(u.data(),function(e){return t.max(u.valueAccessor()(e))});return n.utils.add(e,u.yAxisPadding())},u.tickFormat=function(t){return arguments.length?(c=t,u):c},u.anchor(e,r)},n.selectMenu=function(e,r){function i(){var t=u.selectAll("option."+s).data(l.data(),function(t){return l.keyAccessor()(t)});return t.enter().append("option").classed(s,!0).attr("value",function(t){return l.keyAccessor()(t)}),t.text(l.title()),t.exit().remove(),u.selectAll("option."+s).sort(p),u.on("change",o),t}function o(e,n){var r,i=t.event.target;1===(r=i.selectedOptions?Array.prototype.slice.call(i.selectedOptions).map(function(t){return t.value}):[].slice.call(t.event.target.options).filter(function(t){return t.selected}).map(function(t){return t.value})).length&&""===r[0]?r=h||null:f||1!==r.length||(r=r[0]),l.onChange(r)}function a(){f?u.attr("multiple",!0):u.attr("multiple",null),null!==d?u.attr("size",d):u.attr("size",null)}var u,s="dc-select-option",l=n.baseMixin({}),c="Select all",f=!1,h=null,d=null,p=function(t,e){return l.keyAccessor()(t)>l.keyAccessor()(e)?1:l.keyAccessor()(e)>l.keyAccessor()(t)?-1:0},g=function(t){return l.valueAccessor()(t)>0};return l.data(function(t){return t.all().filter(g)}),l._doRender=function(){return l.select("select").remove(),(u=l.root().append("select").classed("dc-select-menu",!0)).append("option").text(c).attr("value",""),l._doRedraw(),l},l._doRedraw=function(){return a(),i(),l.hasFilter()&&f?u.selectAll("option").property("selected",function(t){return t&&l.filters().indexOf(String(l.keyAccessor()(t)))>=0}):l.hasFilter()?u.property("value",l.filter()):u.property("value",""),l},l.onChange=function(t){t&&f?l.replaceFilter([t]):t?l.replaceFilter(t):l.filterAll(),n.events.trigger(function(){l.redrawGroup()})},l.order=function(t){return arguments.length?(p=t,l):p},l.promptText=function(t){return arguments.length?(c=t,l):c},l.filterDisplayed=function(t){return arguments.length?(g=t,l):g},l.multiple=function(t){return arguments.length?(f=t,l):f},l.promptValue=function(t){return arguments.length?(h=t,l):h},l.numberVisible=function(t){return arguments.length?(d=t,l):d},l.size=n.logger.deprecate(l.numberVisible,"selectMenu.size is ambiguous - use numberVisible instead"),l.anchor(e,r)},n.abstractBubbleChart=n.bubbleMixin,n.baseChart=n.baseMixin,n.capped=n.capMixin,n.colorChart=n.colorMixin,n.coordinateGridChart=n.coordinateGridMixin,n.marginable=n.marginMixin,n.stackableChart=n.stackMixin,n.d3=t,n.crossfilter=e,n}if("function"==typeof define&&define.amd)define(["d3","crossfilter2"],t);else if("object"==typeof module&&module.exports){var e=require("d3"),n=require("crossfilter2");"function"!=typeof n&&(n=n.crossfilter),module.exports=t(e,n)}else this.dc=t(d3,crossfilter)}(),"undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){"use strict";var e=jQuery.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>3)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(),function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}t.fn.emulateTransitionEnd=function(e){var n=!1,r=this;t(this).one("bsTransitionEnd",function(){n=!0});return setTimeout(function(){n||t(r).trigger(t.support.transition.end)},e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}})})}(jQuery),function(t){"use strict";var e='[data-dismiss="alert"]',n=function(n){t(n).on("click",e,this.close)};n.VERSION="3.3.7",n.TRANSITION_DURATION=150,n.prototype.close=function(e){function r(){a.detach().trigger("closed.bs.alert").remove()}var i=t(this),o=i.attr("data-target");o||(o=(o=i.attr("href"))&&o.replace(/.*(?=#[^\s]*$)/,""));var a=t("#"===o?[]:o);e&&e.preventDefault(),a.length||(a=i.closest(".alert")),a.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(a.removeClass("in"),t.support.transition&&a.hasClass("fade")?a.one("bsTransitionEnd",r).emulateTransitionEnd(n.TRANSITION_DURATION):r())};var r=t.fn.alert;t.fn.alert=function(e){return this.each(function(){var r=t(this),i=r.data("bs.alert");i||r.data("bs.alert",i=new n(this)),"string"==typeof e&&i[e].call(r)})},t.fn.alert.Constructor=n,t.fn.alert.noConflict=function(){return t.fn.alert=r,this},t(document).on("click.bs.alert.data-api",e,n.prototype.close)}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.button"),o="object"==typeof e&&e;i||r.data("bs.button",i=new n(this,o)),"toggle"==e?i.toggle():e&&i.setState(e)})}var n=function(e,r){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,r),this.isLoading=!1};n.VERSION="3.3.7",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(e){var n="disabled",r=this.$element,i=r.is("input")?"val":"html",o=r.data();e+="Text",null==o.resetText&&r.data("resetText",r[i]()),setTimeout(t.proxy(function(){r[i](null==o[e]?this.options[e]:o[e]),"loadingText"==e?(this.isLoading=!0,r.addClass(n).attr(n,n).prop(n,!0)):this.isLoading&&(this.isLoading=!1,r.removeClass(n).removeAttr(n).prop(n,!1))},this),0)},n.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")?(n.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==n.prop("type")&&(n.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),n.prop("checked",this.$element.hasClass("active")),t&&n.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var r=t.fn.button;t.fn.button=e,t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=r,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var r=t(n.target).closest(".btn");e.call(r,"toggle"),t(n.target).is('input[type="radio"], input[type="checkbox"]')||(n.preventDefault(),r.is("input,button")?r.trigger("focus"):r.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.carousel"),o=t.extend({},n.DEFAULTS,r.data(),"object"==typeof e&&e),a="string"==typeof e?e:o.slide;i||r.data("bs.carousel",i=new n(this,o)),"number"==typeof e?i.to(e):a?i[a]():o.interval&&i.pause().cycle()})}var n=function(e,n){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};n.VERSION="3.3.7",n.TRANSITION_DURATION=600,n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},n.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},n.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},n.prototype.getItemForDirection=function(t,e){var n=this.getItemIndex(e);if(("prev"==t&&0===n||"next"==t&&n==this.$items.length-1)&&!this.options.wrap)return e;var r=(n+("prev"==t?-1:1))%this.$items.length;return this.$items.eq(r)},n.prototype.to=function(t){var e=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):n==t?this.pause().cycle():this.slide(t>n?"next":"prev",this.$items.eq(t))},n.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},n.prototype.next=function(){if(!this.sliding)return this.slide("next")},n.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},n.prototype.slide=function(e,r){var i=this.$element.find(".item.active"),o=r||this.getItemForDirection(e,i),a=this.interval,u="next"==e?"left":"right",s=this;if(o.hasClass("active"))return this.sliding=!1;var l=o[0],c=t.Event("slide.bs.carousel",{relatedTarget:l,direction:u});if(this.$element.trigger(c),!c.isDefaultPrevented()){if(this.sliding=!0,a&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var f=t(this.$indicators.children()[this.getItemIndex(o)]);f&&f.addClass("active")}var h=t.Event("slid.bs.carousel",{relatedTarget:l,direction:u});return t.support.transition&&this.$element.hasClass("slide")?(o.addClass(e),o[0].offsetWidth,i.addClass(u),o.addClass(u),i.one("bsTransitionEnd",function(){o.removeClass([e,u].join(" ")).addClass("active"),i.removeClass(["active",u].join(" ")),s.sliding=!1,setTimeout(function(){s.$element.trigger(h)},0)}).emulateTransitionEnd(n.TRANSITION_DURATION)):(i.removeClass("active"),o.addClass("active"),this.sliding=!1,this.$element.trigger(h)),a&&this.cycle(),this}};var r=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=r,this};var i=function(n){var r,i=t(this),o=t(i.attr("data-target")||(r=i.attr("href"))&&r.replace(/.*(?=#[^\s]+$)/,""));if(o.hasClass("carousel")){var a=t.extend({},o.data(),i.data()),u=i.attr("data-slide-to");u&&(a.interval=!1),e.call(o,a),u&&o.data("bs.carousel").to(u),n.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",i).on("click.bs.carousel.data-api","[data-slide-to]",i),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var n=t(this);e.call(n,n.data())})})}(jQuery),function(t){"use strict";function e(e){var n,r=e.attr("data-target")||(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return t(r)}function n(e){return this.each(function(){var n=t(this),i=n.data("bs.collapse"),o=t.extend({},r.DEFAULTS,n.data(),"object"==typeof e&&e);!i&&o.toggle&&/show|hide/.test(e)&&(o.toggle=!1),i||n.data("bs.collapse",i=new r(this,o)),"string"==typeof e&&i[e]()})}var r=function(e,n){this.$element=t(e),this.options=t.extend({},r.DEFAULTS,n),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};r.VERSION="3.3.7",r.TRANSITION_DURATION=350,r.DEFAULTS={toggle:!0},r.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},r.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,i=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(i&&i.length&&(e=i.data("bs.collapse"))&&e.transitioning)){var o=t.Event("show.bs.collapse");if(this.$element.trigger(o),!o.isDefaultPrevented()){i&&i.length&&(n.call(i,"hide"),e||i.data("bs.collapse",null));var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var u=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return u.call(this);var s=t.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",t.proxy(u,this)).emulateTransitionEnd(r.TRANSITION_DURATION)[a](this.$element[0][s])}}}},r.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var i=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!t.support.transition)return i.call(this);this.$element[n](0).one("bsTransitionEnd",t.proxy(i,this)).emulateTransitionEnd(r.TRANSITION_DURATION)}}},r.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},r.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(n,r){var i=t(r);this.addAriaAndCollapsedClass(e(i),i)},this)).end()},r.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n),e.toggleClass("collapsed",!n).attr("aria-expanded",n)};var i=t.fn.collapse;t.fn.collapse=n,t.fn.collapse.Constructor=r,t.fn.collapse.noConflict=function(){return t.fn.collapse=i,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(r){var i=t(this);i.attr("data-target")||r.preventDefault();var o=e(i),a=o.data("bs.collapse")?"toggle":i.data();n.call(o,a)})}(jQuery),function(t){"use strict";function e(e){var n=e.attr("data-target");n||(n=(n=e.attr("href"))&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var r=n&&t(n);return r&&r.length?r:e.parent()}function n(n){n&&3===n.which||(t(r).remove(),t(i).each(function(){var r=t(this),i=e(r),o={relatedTarget:this};i.hasClass("open")&&(n&&"click"==n.type&&/input|textarea/i.test(n.target.tagName)&&t.contains(i[0],n.target)||(i.trigger(n=t.Event("hide.bs.dropdown",o)),n.isDefaultPrevented()||(r.attr("aria-expanded","false"),i.removeClass("open").trigger(t.Event("hidden.bs.dropdown",o)))))}))}var r=".dropdown-backdrop",i='[data-toggle="dropdown"]',o=function(e){t(e).on("click.bs.dropdown",this.toggle)};o.VERSION="3.3.7",o.prototype.toggle=function(r){var i=t(this);if(!i.is(".disabled, :disabled")){var o=e(i),a=o.hasClass("open");if(n(),!a){"ontouchstart"in document.documentElement&&!o.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",n);var u={relatedTarget:this};if(o.trigger(r=t.Event("show.bs.dropdown",u)),r.isDefaultPrevented())return;i.trigger("focus").attr("aria-expanded","true"),o.toggleClass("open").trigger(t.Event("shown.bs.dropdown",u))}return!1}},o.prototype.keydown=function(n){if(/(38|40|27|32)/.test(n.which)&&!/input|textarea/i.test(n.target.tagName)){var r=t(this);if(n.preventDefault(),n.stopPropagation(),!r.is(".disabled, :disabled")){var o=e(r),a=o.hasClass("open");if(!a&&27!=n.which||a&&27==n.which)return 27==n.which&&o.find(i).trigger("focus"),r.trigger("click");var u=o.find(".dropdown-menu li:not(.disabled):visible a");if(u.length){var s=u.index(n.target);38==n.which&&s>0&&s--,40==n.which&&s<u.length-1&&s++,~s||(s=0),u.eq(s).trigger("focus")}}}};var a=t.fn.dropdown;t.fn.dropdown=function(e){return this.each(function(){var n=t(this),r=n.data("bs.dropdown");r||n.data("bs.dropdown",r=new o(this)),"string"==typeof e&&r[e].call(n)})},t.fn.dropdown.Constructor=o,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=a,this},t(document).on("click.bs.dropdown.data-api",n).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",i,o.prototype.toggle).on("keydown.bs.dropdown.data-api",i,o.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",o.prototype.keydown)}(jQuery),function(t){"use strict";function e(e,r){return this.each(function(){var i=t(this),o=i.data("bs.modal"),a=t.extend({},n.DEFAULTS,i.data(),"object"==typeof e&&e);o||i.data("bs.modal",o=new n(this,a)),"string"==typeof e?o[e](r):a.show&&o.show(r)})}var n=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.3.7",n.TRANSITION_DURATION=300,n.BACKDROP_TRANSITION_DURATION=150,n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},n.prototype.show=function(e){var r=this,i=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(i),this.isShown||i.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){r.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(r.$element)&&(r.ignoreBackdropClick=!0)})}),this.backdrop(function(){var i=t.support.transition&&r.$element.hasClass("fade");r.$element.parent().length||r.$element.appendTo(r.$body),r.$element.show().scrollTop(0),r.adjustDialog(),i&&r.$element[0].offsetWidth,r.$element.addClass("in"),r.enforceFocus();var o=t.Event("shown.bs.modal",{relatedTarget:e});i?r.$dialog.one("bsTransitionEnd",function(){r.$element.trigger("focus").trigger(o)}).emulateTransitionEnd(n.TRANSITION_DURATION):r.$element.trigger("focus").trigger(o)}))},n.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(n.TRANSITION_DURATION):this.hideModal())},n.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},n.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},n.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(e){var r=this,i=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var o=t.support.transition&&i;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+i).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){this.ignoreBackdropClick?this.ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide())},this)),o&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;o?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){r.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):a()}else e&&e()},n.prototype.handleUpdate=function(){this.adjustDialog()},n.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},n.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},n.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},n.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},n.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var r=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=r,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var r=t(this),i=r.attr("href"),o=t(r.attr("data-target")||i&&i.replace(/.*(?=#[^\s]+$)/,"")),a=o.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(i)&&i},o.data(),r.data());r.is("a")&&n.preventDefault(),o.one("show.bs.modal",function(t){t.isDefaultPrevented()||o.one("hidden.bs.modal",function(){r.is(":visible")&&r.trigger("focus")})}),e.call(o,a,this)})}(jQuery),function(t){"use strict";var e=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};e.VERSION="3.3.7",e.TRANSITION_DURATION=150,e.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},e.prototype.init=function(e,n,r){if(this.enabled=!0,this.type=e,this.$element=t(n),this.options=this.getOptions(r),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var i=this.options.trigger.split(" "),o=i.length;o--;){var a=i[o];if("click"==a)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=a){var u="hover"==a?"mouseenter":"focusin",s="hover"==a?"mouseleave":"focusout";this.$element.on(u+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(s+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},e.prototype.getDefaults=function(){return e.DEFAULTS},e.prototype.getOptions=function(e){return(e=t.extend({},this.getDefaults(),this.$element.data(),e)).delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},e.prototype.getDelegateOptions=function(){var e={},n=this.getDefaults();return this._options&&t.each(this._options,function(t,r){n[t]!=r&&(e[t]=r)}),e},e.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusin"==e.type?"focus":"hover"]=!0),n.tip().hasClass("in")||"in"==n.hoverState)n.hoverState="in";else{if(clearTimeout(n.timeout),n.hoverState="in",!n.options.delay||!n.options.delay.show)return n.show();n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show)}},e.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},e.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusout"==e.type?"focus":"hover"]=!1),!n.isInStateTrue()){if(clearTimeout(n.timeout),n.hoverState="out",!n.options.delay||!n.options.delay.hide)return n.hide();n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide)}},e.prototype.show=function(){var n=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(n);var r=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(n.isDefaultPrevented()||!r)return;var i=this,o=this.tip(),a=this.getUID(this.type);this.setContent(),o.attr("id",a),this.$element.attr("aria-describedby",a),this.options.animation&&o.addClass("fade");var u="function"==typeof this.options.placement?this.options.placement.call(this,o[0],this.$element[0]):this.options.placement,s=/\s?auto?\s?/i,l=s.test(u);l&&(u=u.replace(s,"")||"top"),o.detach().css({top:0,left:0,display:"block"}).addClass(u).data("bs."+this.type,this),this.options.container?o.appendTo(this.options.container):o.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var c=this.getPosition(),f=o[0].offsetWidth,h=o[0].offsetHeight;if(l){var d=u,p=this.getPosition(this.$viewport);u="bottom"==u&&c.bottom+h>p.bottom?"top":"top"==u&&c.top-h<p.top?"bottom":"right"==u&&c.right+f>p.width?"left":"left"==u&&c.left-f<p.left?"right":u,o.removeClass(d).addClass(u)}var g=this.getCalculatedOffset(u,c,f,h);this.applyPlacement(g,u);var v=function(){var t=i.hoverState;i.$element.trigger("shown.bs."+i.type),i.hoverState=null,"out"==t&&i.leave(i)};t.support.transition&&this.$tip.hasClass("fade")?o.one("bsTransitionEnd",v).emulateTransitionEnd(e.TRANSITION_DURATION):v()}},e.prototype.applyPlacement=function(e,n){var r=this.tip(),i=r[0].offsetWidth,o=r[0].offsetHeight,a=parseInt(r.css("margin-top"),10),u=parseInt(r.css("margin-left"),10);isNaN(a)&&(a=0),isNaN(u)&&(u=0),e.top+=a,e.left+=u,t.offset.setOffset(r[0],t.extend({using:function(t){r.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),r.addClass("in");var s=r[0].offsetWidth,l=r[0].offsetHeight;"top"==n&&l!=o&&(e.top=e.top+o-l);var c=this.getViewportAdjustedDelta(n,e,s,l);c.left?e.left+=c.left:e.top+=c.top;var f=/top|bottom/.test(n),h=f?2*c.left-i+s:2*c.top-o+l,d=f?"offsetWidth":"offsetHeight";r.offset(e),this.replaceArrow(h,r[0][d],f)},e.prototype.replaceArrow=function(t,e,n){this.arrow().css(n?"left":"top",50*(1-t/e)+"%").css(n?"top":"left","")},e.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},e.prototype.hide=function(n){function r(){"in"!=i.hoverState&&o.detach(),i.$element&&i.$element.removeAttr("aria-describedby").trigger("hidden.bs."+i.type),n&&n()}var i=this,o=t(this.$tip),a=t.Event("hide.bs."+this.type);if(this.$element.trigger(a),!a.isDefaultPrevented())return o.removeClass("in"),t.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",r).emulateTransitionEnd(e.TRANSITION_DURATION):r(),this.hoverState=null,this},e.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},e.prototype.hasContent=function(){return this.getTitle()},e.prototype.getPosition=function(e){var n=(e=e||this.$element)[0],r="BODY"==n.tagName,i=n.getBoundingClientRect();null==i.width&&(i=t.extend({},i,{width:i.right-i.left,height:i.bottom-i.top}));var o=window.SVGElement&&n instanceof window.SVGElement,a=r?{top:0,left:0}:o?null:e.offset(),u={scroll:r?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},s=r?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},i,u,s,a)},e.prototype.getCalculatedOffset=function(t,e,n,r){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-r,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-r/2,left:e.left-n}:{top:e.top+e.height/2-r/2,left:e.left+e.width}},e.prototype.getViewportAdjustedDelta=function(t,e,n,r){var i={top:0,left:0};if(!this.$viewport)return i;var o=this.options.viewport&&this.options.viewport.padding||0,a=this.getPosition(this.$viewport);if(/right|left/.test(t)){var u=e.top-o-a.scroll,s=e.top+o-a.scroll+r;u<a.top?i.top=a.top-u:s>a.top+a.height&&(i.top=a.top+a.height-s)}else{var l=e.left-o,c=e.left+o+n;l<a.left?i.left=a.left-l:c>a.right&&(i.left=a.left+a.width-c)}return i},e.prototype.getTitle=function(){var t=this.$element,e=this.options;return t.attr("data-original-title")||("function"==typeof e.title?e.title.call(t[0]):e.title)},e.prototype.getUID=function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},e.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},e.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},e.prototype.enable=function(){this.enabled=!0},e.prototype.disable=function(){this.enabled=!1},e.prototype.toggleEnabled=function(){this.enabled=!this.enabled},e.prototype.toggle=function(e){var n=this;e&&((n=t(e.currentTarget).data("bs."+this.type))||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n))),e?(n.inState.click=!n.inState.click,n.isInStateTrue()?n.enter(n):n.leave(n)):n.tip().hasClass("in")?n.leave(n):n.enter(n)},e.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null,t.$element=null})};var n=t.fn.tooltip;t.fn.tooltip=function(n){return this.each(function(){var r=t(this),i=r.data("bs.tooltip"),o="object"==typeof n&&n;!i&&/destroy|hide/.test(n)||(i||r.data("bs.tooltip",i=new e(this,o)),"string"==typeof n&&i[n]())})},t.fn.tooltip.Constructor=e,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=n,this}}(jQuery),function(t){"use strict";var e=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");e.VERSION="3.3.7",e.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),e.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),e.prototype.constructor=e,e.prototype.getDefaults=function(){return e.DEFAULTS},e.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},e.prototype.hasContent=function(){return this.getTitle()||this.getContent()},e.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},e.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var n=t.fn.popover;t.fn.popover=function(n){return this.each(function(){var r=t(this),i=r.data("bs.popover"),o="object"==typeof n&&n;!i&&/destroy|hide/.test(n)||(i||r.data("bs.popover",i=new e(this,o)),"string"==typeof n&&i[n]())})},t.fn.popover.Constructor=e,t.fn.popover.noConflict=function(){return t.fn.popover=n,this}}(jQuery),function(t){"use strict";function e(n,r){this.$body=t(document.body),this.$scrollElement=t(t(n).is(document.body)?window:n),this.options=t.extend({},e.DEFAULTS,r),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function n(n){return this.each(function(){var r=t(this),i=r.data("bs.scrollspy"),o="object"==typeof n&&n;i||r.data("bs.scrollspy",i=new e(this,o)),"string"==typeof n&&i[n]()})}e.VERSION="3.3.7",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,n="offset",r=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(n="position",r=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),i=e.data("target")||e.attr("href"),o=/^#./.test(i)&&t(i);return o&&o.length&&o.is(":visible")&&[[o[n]().top+r,i]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),r=this.options.offset+n-this.$scrollElement.height(),i=this.offsets,o=this.targets,a=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),e>=r)return a!=(t=o[o.length-1])&&this.activate(t);if(a&&e<i[0])return this.activeTarget=null,this.clear();for(t=i.length;t--;)a!=o[t]&&e>=i[t]&&(void 0===i[t+1]||e<i[t+1])&&this.activate(o[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',r=t(n).parents("li").addClass("active");r.parent(".dropdown-menu").length&&(r=r.closest("li.dropdown").addClass("active")),r.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var r=t.fn.scrollspy;t.fn.scrollspy=n,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=r,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);n.call(e,e.data())})})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.tab");i||r.data("bs.tab",i=new n(this)),"string"==typeof e&&i[e]()})}var n=function(e){this.element=t(e)};n.VERSION="3.3.7",n.TRANSITION_DURATION=150,n.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),r=e.data("target");if(r||(r=(r=e.attr("href"))&&r.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var i=n.find(".active:last a"),o=t.Event("hide.bs.tab",{relatedTarget:e[0]}),a=t.Event("show.bs.tab",{relatedTarget:i[0]});if(i.trigger(o),e.trigger(a),!a.isDefaultPrevented()&&!o.isDefaultPrevented()){var u=t(r);this.activate(e.closest("li"),n),this.activate(u,u.parent(),function(){i.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:i[0]})})}}},n.prototype.activate=function(e,r,i){function o(){a.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),u?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),i&&i()}var a=r.find("> .active"),u=i&&t.support.transition&&(a.length&&a.hasClass("fade")||!!r.find("> .fade").length);a.length&&u?a.one("bsTransitionEnd",o).emulateTransitionEnd(n.TRANSITION_DURATION):o(),a.removeClass("in")};var r=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=r,this};var i=function(n){n.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',i).on("click.bs.tab.data-api",'[data-toggle="pill"]',i)}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.affix"),o="object"==typeof e&&e;i||r.data("bs.affix",i=new n(this,o)),"string"==typeof e&&i[e]()})}var n=function(e,r){this.options=t.extend({},n.DEFAULTS,r),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.3.7",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getState=function(t,e,n,r){var i=this.$target.scrollTop(),o=this.$element.offset(),a=this.$target.height();if(null!=n&&"top"==this.affixed)return i<n&&"top";if("bottom"==this.affixed)return null!=n?!(i+this.unpin<=o.top)&&"bottom":!(i+a<=t-r)&&"bottom";var u=null==this.affixed,s=u?i:o.top,l=u?a:e;return null!=n&&i<=n?"top":null!=r&&s+l>=t-r&&"bottom"},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},n.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),r=this.options.offset,i=r.top,o=r.bottom,a=Math.max(t(document).height(),t(document.body).height());"object"!=typeof r&&(o=i=r),"function"==typeof i&&(i=r.top(this.$element)),"function"==typeof o&&(o=r.bottom(this.$element));var u=this.getState(a,e,i,o);if(this.affixed!=u){null!=this.unpin&&this.$element.css("top","");var s="affix"+(u?"-"+u:""),l=t.Event(s+".bs.affix");if(this.$element.trigger(l),l.isDefaultPrevented())return;this.affixed=u,this.unpin="bottom"==u?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(s).trigger(s.replace("affix","affixed")+".bs.affix")}"bottom"==u&&this.$element.offset({top:a-e-o})}};var r=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=n,t.fn.affix.noConflict=function(){return t.fn.affix=r,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),r=n.data();r.offset=r.offset||{},null!=r.offsetBottom&&(r.offset.bottom=r.offsetBottom),null!=r.offsetTop&&(r.offset.top=r.offsetTop),e.call(n,r)})})}(jQuery),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.moment=e()}(this,function(){"use strict";function t(){return ye.apply(null,arguments)}function e(t){return t instanceof Array||"[object Array]"===Object.prototype.toString.call(t)}function n(t){return null!=t&&"[object Object]"===Object.prototype.toString.call(t)}function r(t){var e;for(e in t)return!1;return!0}function i(t){return void 0===t}function o(t){return"number"==typeof t||"[object Number]"===Object.prototype.toString.call(t)}function a(t){return t instanceof Date||"[object Date]"===Object.prototype.toString.call(t)}function u(t,e){var n,r=[];for(n=0;n<t.length;++n)r.push(e(t[n],n));return r}function s(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function l(t,e){for(var n in e)s(e,n)&&(t[n]=e[n]);return s(e,"toString")&&(t.toString=e.toString),s(e,"valueOf")&&(t.valueOf=e.valueOf),t}function c(t,e,n,r){return jt(t,e,n,r,!0).utc()}function f(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}}function h(t){return null==t._pf&&(t._pf=f()),t._pf}function d(t){if(null==t._isValid){var e=h(t),n=be.call(e.parsedDateParts,function(t){return null!=t}),r=!isNaN(t._d.getTime())&&e.overflow<0&&!e.empty&&!e.invalidMonth&&!e.invalidWeekday&&!e.nullInput&&!e.invalidFormat&&!e.userInvalidated&&(!e.meridiem||e.meridiem&&n);if(t._strict&&(r=r&&0===e.charsLeftOver&&0===e.unusedTokens.length&&void 0===e.bigHour),null!=Object.isFrozen&&Object.isFrozen(t))return r;t._isValid=r}return t._isValid}function p(t){var e=c(NaN);return null!=t?l(h(e),t):h(e).userInvalidated=!0,e}function g(t,e){var n,r,o;if(i(e._isAMomentObject)||(t._isAMomentObject=e._isAMomentObject),i(e._i)||(t._i=e._i),i(e._f)||(t._f=e._f),i(e._l)||(t._l=e._l),i(e._strict)||(t._strict=e._strict),i(e._tzm)||(t._tzm=e._tzm),i(e._isUTC)||(t._isUTC=e._isUTC),i(e._offset)||(t._offset=e._offset),i(e._pf)||(t._pf=h(e)),i(e._locale)||(t._locale=e._locale),we.length>0)for(n=0;n<we.length;n++)i(o=e[r=we[n]])||(t[r]=o);return t}function v(e){g(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===_e&&(_e=!0,t.updateOffset(this),_e=!1)}function m(t){return t instanceof v||null!=t&&null!=t._isAMomentObject}function y(t){return t<0?Math.ceil(t)||0:Math.floor(t)}function x(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=y(e)),n}function b(t,e,n){var r,i=Math.min(t.length,e.length),o=Math.abs(t.length-e.length),a=0;for(r=0;r<i;r++)(n&&t[r]!==e[r]||!n&&x(t[r])!==x(e[r]))&&a++;return a+o}function w(e){!1===t.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function _(e,n){var r=!0;return l(function(){if(null!=t.deprecationHandler&&t.deprecationHandler(null,e),r){for(var i,o=[],a=0;a<arguments.length;a++){if(i="","object"==typeof arguments[a]){i+="\n["+a+"] ";for(var u in arguments[0])i+=u+": "+arguments[0][u]+", ";i=i.slice(0,-2)}else i=arguments[a];o.push(i)}w(e+"\nArguments: "+Array.prototype.slice.call(o).join("")+"\n"+(new Error).stack),r=!1}return n.apply(this,arguments)},n)}function M(e,n){null!=t.deprecationHandler&&t.deprecationHandler(e,n),Me[e]||(w(n),Me[e]=!0)}function A(t){return t instanceof Function||"[object Function]"===Object.prototype.toString.call(t)}function k(t,e){var r,i=l({},t);for(r in e)s(e,r)&&(n(t[r])&&n(e[r])?(i[r]={},l(i[r],t[r]),l(i[r],e[r])):null!=e[r]?i[r]=e[r]:delete i[r]);for(r in t)s(t,r)&&!s(e,r)&&n(t[r])&&(i[r]=l({},i[r]));return i}function S(t){null!=t&&this.set(t)}function T(t,e){var n=t.toLowerCase();Ne[n]=Ne[n+"s"]=Ne[e]=t}function C(t){return"string"==typeof t?Ne[t]||Ne[t.toLowerCase()]:void 0}function D(t){var e,n,r={};for(n in t)s(t,n)&&(e=C(n))&&(r[e]=t[n]);return r}function E(t,e){Le[t]=e}function N(t){var e=[];for(var n in t)e.push({unit:n,priority:Le[n]});return e.sort(function(t,e){return t.priority-e.priority}),e}function L(e,n){return function(r){return null!=r?(R(this,e,r),t.updateOffset(this,n),this):O(this,e)}}function O(t,e){return t.isValid()?t._d["get"+(t._isUTC?"UTC":"")+e]():NaN}function R(t,e,n){t.isValid()&&t._d["set"+(t._isUTC?"UTC":"")+e](n)}function j(t,e,n){var r=""+Math.abs(t),i=e-r.length;return(t>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,i)).toString().substr(1)+r}function P(t,e,n,r){var i=r;"string"==typeof r&&(i=function(){return this[r]()}),t&&(Pe[t]=i),e&&(Pe[e[0]]=function(){return j(i.apply(this,arguments),e[1],e[2])}),n&&(Pe[n]=function(){return this.localeData().ordinal(i.apply(this,arguments),t)})}function F(t){return t.match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"")}function I(t){var e,n,r=t.match(Oe);for(e=0,n=r.length;e<n;e++)Pe[r[e]]?r[e]=Pe[r[e]]:r[e]=F(r[e]);return function(e){var i,o="";for(i=0;i<n;i++)o+=A(r[i])?r[i].call(e,t):r[i];return o}}function Y(t,e){return t.isValid()?(e=H(e,t.localeData()),je[e]=je[e]||I(e),je[e](t)):t.localeData().invalidDate()}function H(t,e){var n=5;for(Re.lastIndex=0;n>=0&&Re.test(t);)t=t.replace(Re,function(t){return e.longDateFormat(t)||t}),Re.lastIndex=0,n-=1;return t}function $(t,e,n){tn[t]=A(e)?e:function(t,r){return t&&n?n:e}}function q(t,e){return s(tn,t)?tn[t](e._strict,e._locale):new RegExp(U(t))}function U(t){return z(t.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,n,r,i){return e||n||r||i}))}function z(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function W(t,e){var n,r=e;for("string"==typeof t&&(t=[t]),o(e)&&(r=function(t,n){n[e]=x(t)}),n=0;n<t.length;n++)en[t[n]]=r}function B(t,e){W(t,function(t,n,r,i){r._w=r._w||{},e(t,r._w,r,i)})}function V(t,e,n){null!=e&&s(en,t)&&en[t](e,n._a,n,t)}function G(t,e){return new Date(Date.UTC(t,e+1,0)).getUTCDate()}function X(t,e,n){var r,i,o,a=t.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)o=c([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(o,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(o,"").toLocaleLowerCase();return n?"MMM"===e?-1!==(i=hn.call(this._shortMonthsParse,a))?i:null:-1!==(i=hn.call(this._longMonthsParse,a))?i:null:"MMM"===e?-1!==(i=hn.call(this._shortMonthsParse,a))?i:-1!==(i=hn.call(this._longMonthsParse,a))?i:null:-1!==(i=hn.call(this._longMonthsParse,a))?i:-1!==(i=hn.call(this._shortMonthsParse,a))?i:null}function Z(t,e){var n;if(!t.isValid())return t;if("string"==typeof e)if(/^\d+$/.test(e))e=x(e);else if(e=t.localeData().monthsParse(e),!o(e))return t;return n=Math.min(t.date(),G(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t}function K(e){return null!=e?(Z(this,e),t.updateOffset(this,!0),this):O(this,"Month")}function Q(){function t(t,e){return e.length-t.length}var e,n,r=[],i=[],o=[];for(e=0;e<12;e++)n=c([2e3,e]),r.push(this.monthsShort(n,"")),i.push(this.months(n,"")),o.push(this.months(n,"")),o.push(this.monthsShort(n,""));for(r.sort(t),i.sort(t),o.sort(t),e=0;e<12;e++)r[e]=z(r[e]),i[e]=z(i[e]);for(e=0;e<24;e++)o[e]=z(o[e]);this._monthsRegex=new RegExp("^("+o.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function J(t){return tt(t)?366:365}function tt(t){return t%4==0&&t%100!=0||t%400==0}function et(t,e,n,r,i,o,a){var u=new Date(t,e,n,r,i,o,a);return t<100&&t>=0&&isFinite(u.getFullYear())&&u.setFullYear(t),u}function nt(t){var e=new Date(Date.UTC.apply(null,arguments));return t<100&&t>=0&&isFinite(e.getUTCFullYear())&&e.setUTCFullYear(t),e}function rt(t,e,n){var r=7+e-n;return-((7+nt(t,0,r).getUTCDay()-e)%7)+r-1}function it(t,e,n,r,i){var o,a,u=1+7*(e-1)+(7+n-r)%7+rt(t,r,i);return u<=0?a=J(o=t-1)+u:u>J(t)?(o=t+1,a=u-J(t)):(o=t,a=u),{year:o,dayOfYear:a}}function ot(t,e,n){var r,i,o=rt(t.year(),e,n),a=Math.floor((t.dayOfYear()-o-1)/7)+1;return a<1?r=a+at(i=t.year()-1,e,n):a>at(t.year(),e,n)?(r=a-at(t.year(),e,n),i=t.year()+1):(i=t.year(),r=a),{week:r,year:i}}function at(t,e,n){var r=rt(t,e,n),i=rt(t+1,e,n);return(J(t)-r+i)/7}function ut(t,e){return"string"!=typeof t?t:isNaN(t)?"number"==typeof(t=e.weekdaysParse(t))?t:null:parseInt(t,10)}function st(t,e){return"string"==typeof t?e.weekdaysParse(t)%7||7:isNaN(t)?null:t}function lt(t,e,n){var r,i,o,a=t.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)o=c([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(o,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(o,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(o,"").toLocaleLowerCase();return n?"dddd"===e?-1!==(i=hn.call(this._weekdaysParse,a))?i:null:"ddd"===e?-1!==(i=hn.call(this._shortWeekdaysParse,a))?i:null:-1!==(i=hn.call(this._minWeekdaysParse,a))?i:null:"dddd"===e?-1!==(i=hn.call(this._weekdaysParse,a))?i:-1!==(i=hn.call(this._shortWeekdaysParse,a))?i:-1!==(i=hn.call(this._minWeekdaysParse,a))?i:null:"ddd"===e?-1!==(i=hn.call(this._shortWeekdaysParse,a))?i:-1!==(i=hn.call(this._weekdaysParse,a))?i:-1!==(i=hn.call(this._minWeekdaysParse,a))?i:null:-1!==(i=hn.call(this._minWeekdaysParse,a))?i:-1!==(i=hn.call(this._weekdaysParse,a))?i:-1!==(i=hn.call(this._shortWeekdaysParse,a))?i:null}function ct(){function t(t,e){return e.length-t.length}var e,n,r,i,o,a=[],u=[],s=[],l=[];for(e=0;e<7;e++)n=c([2e3,1]).day(e),r=this.weekdaysMin(n,""),i=this.weekdaysShort(n,""),o=this.weekdays(n,""),a.push(r),u.push(i),s.push(o),l.push(r),l.push(i),l.push(o);for(a.sort(t),u.sort(t),s.sort(t),l.sort(t),e=0;e<7;e++)u[e]=z(u[e]),s[e]=z(s[e]),l[e]=z(l[e]);this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+a.join("|")+")","i")}function ft(){return this.hours()%12||12}function ht(t,e){P(t,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),e)})}function dt(t,e){return e._meridiemParse}function pt(t){return t?t.toLowerCase().replace("_","-"):t}function gt(t){for(var e,n,r,i,o=0;o<t.length;){for(e=(i=pt(t[o]).split("-")).length,n=(n=pt(t[o+1]))?n.split("-"):null;e>0;){if(r=vt(i.slice(0,e).join("-")))return r;if(n&&n.length>=e&&b(i,n,!0)>=e-1)break;e--}o++}return null}function vt(t){var e=null;if(!En[t]&&"undefined"!=typeof module&&module&&module.exports)try{e=Sn._abbr,require("./locale/"+t),mt(e)}catch(t){}return En[t]}function mt(t,e){var n;return t&&(n=i(e)?xt(t):yt(t,e))&&(Sn=n),Sn._abbr}function yt(t,e){if(null!==e){var n=Dn;if(e.abbr=t,null!=En[t])M("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),n=En[t]._config;else if(null!=e.parentLocale){if(null==En[e.parentLocale])return Nn[e.parentLocale]||(Nn[e.parentLocale]=[]),Nn[e.parentLocale].push({name:t,config:e}),null;n=En[e.parentLocale]._config}return En[t]=new S(k(n,e)),Nn[t]&&Nn[t].forEach(function(t){yt(t.name,t.config)}),mt(t),En[t]}return delete En[t],null}function xt(t){var n;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return Sn;if(!e(t)){if(n=vt(t))return n;t=[t]}return gt(t)}function bt(t){var e,n=t._a;return n&&-2===h(t).overflow&&(e=n[rn]<0||n[rn]>11?rn:n[on]<1||n[on]>G(n[nn],n[rn])?on:n[an]<0||n[an]>24||24===n[an]&&(0!==n[un]||0!==n[sn]||0!==n[ln])?an:n[un]<0||n[un]>59?un:n[sn]<0||n[sn]>59?sn:n[ln]<0||n[ln]>999?ln:-1,h(t)._overflowDayOfYear&&(e<nn||e>on)&&(e=on),h(t)._overflowWeeks&&-1===e&&(e=cn),h(t)._overflowWeekday&&-1===e&&(e=fn),h(t).overflow=e),t}function wt(t){var e,n,r,i,o,a,u=t._i,s=Ln.exec(u)||On.exec(u);if(s){for(h(t).iso=!0,e=0,n=jn.length;e<n;e++)if(jn[e][1].exec(s[1])){i=jn[e][0],r=!1!==jn[e][2];break}if(null==i)return void(t._isValid=!1);if(s[3]){for(e=0,n=Pn.length;e<n;e++)if(Pn[e][1].exec(s[3])){o=(s[2]||" ")+Pn[e][0];break}if(null==o)return void(t._isValid=!1)}if(!r&&null!=o)return void(t._isValid=!1);if(s[4]){if(!Rn.exec(s[4]))return void(t._isValid=!1);a="Z"}t._f=i+(o||"")+(a||""),Ct(t)}else t._isValid=!1}function _t(t){var e,n,r,i,o,a,u,s,l={" GMT":" +0000"," EDT":" -0400"," EST":" -0500"," CDT":" -0500"," CST":" -0600"," MDT":" -0600"," MST":" -0700"," PDT":" -0700"," PST":" -0800"};if(e=t._i.replace(/\([^\)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s|\s$/g,""),n=In.exec(e)){if(r=n[1]?"ddd"+(5===n[1].length?", ":" "):"",i="D MMM "+(n[2].length>10?"YYYY ":"YY "),o="HH:mm"+(n[4]?":ss":""),n[1]){var c=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"][new Date(n[2]).getDay()];if(n[1].substr(0,3)!==c)return h(t).weekdayMismatch=!0,void(t._isValid=!1)}switch(n[5].length){case 2:u=0===s?" +0000":((s="YXWVUTSRQPONZABCDEFGHIKLM".indexOf(n[5][1].toUpperCase())-12)<0?" -":" +")+(""+s).replace(/^-?/,"0").match(/..$/)[0]+"00";break;case 4:u=l[n[5]];break;default:u=l[" GMT"]}n[5]=u,t._i=n.splice(1).join(""),a=" ZZ",t._f=r+i+o+a,Ct(t),h(t).rfc2822=!0}else t._isValid=!1}function Mt(e){var n=Fn.exec(e._i);null===n?(wt(e),!1===e._isValid&&(delete e._isValid,_t(e),!1===e._isValid&&(delete e._isValid,t.createFromInputFallback(e)))):e._d=new Date(+n[1])}function At(t,e,n){return null!=t?t:null!=e?e:n}function kt(e){var n=new Date(t.now());return e._useUTC?[n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()]:[n.getFullYear(),n.getMonth(),n.getDate()]}function St(t){var e,n,r,i,o=[];if(!t._d){for(r=kt(t),t._w&&null==t._a[on]&&null==t._a[rn]&&Tt(t),null!=t._dayOfYear&&(i=At(t._a[nn],r[nn]),(t._dayOfYear>J(i)||0===t._dayOfYear)&&(h(t)._overflowDayOfYear=!0),n=nt(i,0,t._dayOfYear),t._a[rn]=n.getUTCMonth(),t._a[on]=n.getUTCDate()),e=0;e<3&&null==t._a[e];++e)t._a[e]=o[e]=r[e];for(;e<7;e++)t._a[e]=o[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[an]&&0===t._a[un]&&0===t._a[sn]&&0===t._a[ln]&&(t._nextDay=!0,t._a[an]=0),t._d=(t._useUTC?nt:et).apply(null,o),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[an]=24)}}function Tt(t){var e,n,r,i,o,a,u,s;if(null!=(e=t._w).GG||null!=e.W||null!=e.E)o=1,a=4,n=At(e.GG,t._a[nn],ot(Pt(),1,4).year),r=At(e.W,1),((i=At(e.E,1))<1||i>7)&&(s=!0);else{o=t._locale._week.dow,a=t._locale._week.doy;var l=ot(Pt(),o,a);n=At(e.gg,t._a[nn],l.year),r=At(e.w,l.week),null!=e.d?((i=e.d)<0||i>6)&&(s=!0):null!=e.e?(i=e.e+o,(e.e<0||e.e>6)&&(s=!0)):i=o}r<1||r>at(n,o,a)?h(t)._overflowWeeks=!0:null!=s?h(t)._overflowWeekday=!0:(u=it(n,r,i,o,a),t._a[nn]=u.year,t._dayOfYear=u.dayOfYear)}function Ct(e){if(e._f!==t.ISO_8601)if(e._f!==t.RFC_2822){e._a=[],h(e).empty=!0;var n,r,i,o,a,u=""+e._i,s=u.length,l=0;for(i=H(e._f,e._locale).match(Oe)||[],n=0;n<i.length;n++)o=i[n],(r=(u.match(q(o,e))||[])[0])&&((a=u.substr(0,u.indexOf(r))).length>0&&h(e).unusedInput.push(a),u=u.slice(u.indexOf(r)+r.length),l+=r.length),Pe[o]?(r?h(e).empty=!1:h(e).unusedTokens.push(o),V(o,r,e)):e._strict&&!r&&h(e).unusedTokens.push(o);h(e).charsLeftOver=s-l,u.length>0&&h(e).unusedInput.push(u),e._a[an]<=12&&!0===h(e).bigHour&&e._a[an]>0&&(h(e).bigHour=void 0),h(e).parsedDateParts=e._a.slice(0),h(e).meridiem=e._meridiem,e._a[an]=Dt(e._locale,e._a[an],e._meridiem),St(e),bt(e)}else _t(e);else wt(e)}function Dt(t,e,n){var r;return null==n?e:null!=t.meridiemHour?t.meridiemHour(e,n):null!=t.isPM?((r=t.isPM(n))&&e<12&&(e+=12),r||12!==e||(e=0),e):e}function Et(t){var e,n,r,i,o;if(0===t._f.length)return h(t).invalidFormat=!0,void(t._d=new Date(NaN));for(i=0;i<t._f.length;i++)o=0,e=g({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._f=t._f[i],Ct(e),d(e)&&(o+=h(e).charsLeftOver,o+=10*h(e).unusedTokens.length,h(e).score=o,(null==r||o<r)&&(r=o,n=e));l(t,n||e)}function Nt(t){if(!t._d){var e=D(t._i);t._a=u([e.year,e.month,e.day||e.date,e.hour,e.minute,e.second,e.millisecond],function(t){return t&&parseInt(t,10)}),St(t)}}function Lt(t){var e=new v(bt(Ot(t)));return e._nextDay&&(e.add(1,"d"),e._nextDay=void 0),e}function Ot(t){var n=t._i,r=t._f;return t._locale=t._locale||xt(t._l),null===n||void 0===r&&""===n?p({nullInput:!0}):("string"==typeof n&&(t._i=n=t._locale.preparse(n)),m(n)?new v(bt(n)):(a(n)?t._d=n:e(r)?Et(t):r?Ct(t):Rt(t),d(t)||(t._d=null),t))}function Rt(r){var s=r._i;i(s)?r._d=new Date(t.now()):a(s)?r._d=new Date(s.valueOf()):"string"==typeof s?Mt(r):e(s)?(r._a=u(s.slice(0),function(t){return parseInt(t,10)}),St(r)):n(s)?Nt(r):o(s)?r._d=new Date(s):t.createFromInputFallback(r)}function jt(t,i,o,a,u){var s={};return!0!==o&&!1!==o||(a=o,o=void 0),(n(t)&&r(t)||e(t)&&0===t.length)&&(t=void 0),s._isAMomentObject=!0,s._useUTC=s._isUTC=u,s._l=o,s._i=t,s._f=i,s._strict=a,Lt(s)}function Pt(t,e,n,r){return jt(t,e,n,r,!1)}function Ft(t,n){var r,i;if(1===n.length&&e(n[0])&&(n=n[0]),!n.length)return Pt();for(r=n[0],i=1;i<n.length;++i)n[i].isValid()&&!n[i][t](r)||(r=n[i]);return r}function It(t){for(var e in t)if(-1===$n.indexOf(e)||null!=t[e]&&isNaN(t[e]))return!1;for(var n=!1,r=0;r<$n.length;++r)if(t[$n[r]]){if(n)return!1;parseFloat(t[$n[r]])!==x(t[$n[r]])&&(n=!0)}return!0}function Yt(t){var e=D(t),n=e.year||0,r=e.quarter||0,i=e.month||0,o=e.week||0,a=e.day||0,u=e.hour||0,s=e.minute||0,l=e.second||0,c=e.millisecond||0;this._isValid=It(e),this._milliseconds=+c+1e3*l+6e4*s+1e3*u*60*60,this._days=+a+7*o,this._months=+i+3*r+12*n,this._data={},this._locale=xt(),this._bubble()}function Ht(t){return t instanceof Yt}function $t(t){return t<0?-1*Math.round(-1*t):Math.round(t)}function qt(t,e){P(t,0,0,function(){var t=this.utcOffset(),n="+";return t<0&&(t=-t,n="-"),n+j(~~(t/60),2)+e+j(~~t%60,2)})}function Ut(t,e){var n=(e||"").match(t);if(null===n)return null;var r=((n[n.length-1]||[])+"").match(qn)||["-",0,0],i=60*r[1]+x(r[2]);return 0===i?0:"+"===r[0]?i:-i}function zt(e,n){var r,i;return n._isUTC?(r=n.clone(),i=(m(e)||a(e)?e.valueOf():Pt(e).valueOf())-r.valueOf(),r._d.setTime(r._d.valueOf()+i),t.updateOffset(r,!1),r):Pt(e).local()}function Wt(t){return 15*-Math.round(t._d.getTimezoneOffset()/15)}function Bt(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}function Vt(t,e){var n,r,i,a=t,u=null;return Ht(t)?a={ms:t._milliseconds,d:t._days,M:t._months}:o(t)?(a={},e?a[e]=t:a.milliseconds=t):(u=Un.exec(t))?(n="-"===u[1]?-1:1,a={y:0,d:x(u[on])*n,h:x(u[an])*n,m:x(u[un])*n,s:x(u[sn])*n,ms:x($t(1e3*u[ln]))*n}):(u=zn.exec(t))?(n="-"===u[1]?-1:1,a={y:Gt(u[2],n),M:Gt(u[3],n),w:Gt(u[4],n),d:Gt(u[5],n),h:Gt(u[6],n),m:Gt(u[7],n),s:Gt(u[8],n)}):null==a?a={}:"object"==typeof a&&("from"in a||"to"in a)&&(i=Zt(Pt(a.from),Pt(a.to)),(a={}).ms=i.milliseconds,a.M=i.months),r=new Yt(a),Ht(t)&&s(t,"_locale")&&(r._locale=t._locale),r}function Gt(t,e){var n=t&&parseFloat(t.replace(",","."));return(isNaN(n)?0:n)*e}function Xt(t,e){var n={milliseconds:0,months:0};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function Zt(t,e){var n;return t.isValid()&&e.isValid()?(e=zt(e,t),t.isBefore(e)?n=Xt(t,e):((n=Xt(e,t)).milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}function Kt(t,e){return function(n,r){var i,o;return null===r||isNaN(+r)||(M(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),o=n,n=r,r=o),n="string"==typeof n?+n:n,i=Vt(n,r),Qt(this,i,t),this}}function Qt(e,n,r,i){var o=n._milliseconds,a=$t(n._days),u=$t(n._months);e.isValid()&&(i=null==i||i,o&&e._d.setTime(e._d.valueOf()+o*r),a&&R(e,"Date",O(e,"Date")+a*r),u&&Z(e,O(e,"Month")+u*r),i&&t.updateOffset(e,a||u))}function Jt(t,e){var n,r=12*(e.year()-t.year())+(e.month()-t.month()),i=t.clone().add(r,"months");return n=e-i<0?(e-i)/(i-t.clone().add(r-1,"months")):(e-i)/(t.clone().add(r+1,"months")-i),-(r+n)||0}function te(t){var e;return void 0===t?this._locale._abbr:(null!=(e=xt(t))&&(this._locale=e),this)}function ee(){return this._locale}function ne(t,e){P(0,[t,t.length],0,e)}function re(t,e,n,r,i){var o;return null==t?ot(this,r,i).year:(o=at(t,r,i),e>o&&(e=o),ie.call(this,t,e,n,r,i))}function ie(t,e,n,r,i){var o=it(t,e,n,r,i),a=nt(o.year,0,o.dayOfYear);return this.year(a.getUTCFullYear()),this.month(a.getUTCMonth()),this.date(a.getUTCDate()),this}function oe(t){return t}function ae(t,e,n,r){var i=xt(),o=c().set(r,e);return i[n](o,t)}function ue(t,e,n){if(o(t)&&(e=t,t=void 0),t=t||"",null!=e)return ae(t,e,n,"month");var r,i=[];for(r=0;r<12;r++)i[r]=ae(t,r,n,"month");return i}function se(t,e,n,r){"boolean"==typeof t?(o(e)&&(n=e,e=void 0),e=e||""):(n=e=t,t=!1,o(e)&&(n=e,e=void 0),e=e||"");var i=xt(),a=t?i._week.dow:0;if(null!=n)return ae(e,(n+a)%7,r,"day");var u,s=[];for(u=0;u<7;u++)s[u]=ae(e,(u+a)%7,r,"day");return s}function le(t,e,n,r){var i=Vt(e,n);return t._milliseconds+=r*i._milliseconds,t._days+=r*i._days,t._months+=r*i._months,t._bubble()}function ce(t){return t<0?Math.floor(t):Math.ceil(t)}function fe(t){return 4800*t/146097}function he(t){return 146097*t/4800}function de(t){return function(){return this.as(t)}}function pe(t){return function(){return this.isValid()?this._data[t]:NaN}}function ge(t,e,n,r,i){return i.relativeTime(e||1,!!n,t,r)}function ve(t,e,n){var r=Vt(t).abs(),i=mr(r.as("s")),o=mr(r.as("m")),a=mr(r.as("h")),u=mr(r.as("d")),s=mr(r.as("M")),l=mr(r.as("y")),c=i<=yr.ss&&["s",i]||i<yr.s&&["ss",i]||o<=1&&["m"]||o<yr.m&&["mm",o]||a<=1&&["h"]||a<yr.h&&["hh",a]||u<=1&&["d"]||u<yr.d&&["dd",u]||s<=1&&["M"]||s<yr.M&&["MM",s]||l<=1&&["y"]||["yy",l];return c[2]=e,c[3]=+t>0,c[4]=n,ge.apply(null,c)}function me(){if(!this.isValid())return this.localeData().invalidDate();var t,e,n,r=xr(this._milliseconds)/1e3,i=xr(this._days),o=xr(this._months);e=y((t=y(r/60))/60),r%=60,t%=60;var a=n=y(o/12),u=o%=12,s=i,l=e,c=t,f=r,h=this.asSeconds();return h?(h<0?"-":"")+"P"+(a?a+"Y":"")+(u?u+"M":"")+(s?s+"D":"")+(l||c||f?"T":"")+(l?l+"H":"")+(c?c+"M":"")+(f?f+"S":""):"P0D"}var ye,xe,be=xe=Array.prototype.some?Array.prototype.some:function(t){for(var e=Object(this),n=e.length>>>0,r=0;r<n;r++)if(r in e&&t.call(this,e[r],r,e))return!0;return!1},we=t.momentProperties=[],_e=!1,Me={};t.suppressDeprecationWarnings=!1,t.deprecationHandler=null;var Ae,ke,Se=Ae=Object.keys?Object.keys:function(t){var e,n=[];for(e in t)s(t,e)&&n.push(e);return n},Te={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},Ce={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},De=/\d{1,2}/,Ee={future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Ne={},Le={},Oe=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Re=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,je={},Pe={},Fe=/\d/,Ie=/\d\d/,Ye=/\d{3}/,He=/\d{4}/,$e=/[+-]?\d{6}/,qe=/\d\d?/,Ue=/\d\d\d\d?/,ze=/\d\d\d\d\d\d?/,We=/\d{1,3}/,Be=/\d{1,4}/,Ve=/[+-]?\d{1,6}/,Ge=/\d+/,Xe=/[+-]?\d+/,Ze=/Z|[+-]\d\d:?\d\d/gi,Ke=/Z|[+-]\d\d(?::?\d\d)?/gi,Qe=/[+-]?\d+(\.\d{1,3})?/,Je=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,tn={},en={},nn=0,rn=1,on=2,an=3,un=4,sn=5,ln=6,cn=7,fn=8,hn=ke=Array.prototype.indexOf?Array.prototype.indexOf:function(t){var e;for(e=0;e<this.length;++e)if(this[e]===t)return e;return-1};P("M",["MM",2],"Mo",function(){return this.month()+1}),P("MMM",0,0,function(t){return this.localeData().monthsShort(this,t)}),P("MMMM",0,0,function(t){return this.localeData().months(this,t)}),T("month","M"),E("month",8),$("M",qe),$("MM",qe,Ie),$("MMM",function(t,e){return e.monthsShortRegex(t)}),$("MMMM",function(t,e){return e.monthsRegex(t)}),W(["M","MM"],function(t,e){e[rn]=x(t)-1}),W(["MMM","MMMM"],function(t,e,n,r){var i=n._locale.monthsParse(t,r,n._strict);null!=i?e[rn]=i:h(n).invalidMonth=t});var dn=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,pn="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),gn="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),vn=Je,mn=Je;P("Y",0,0,function(){var t=this.year();return t<=9999?""+t:"+"+t}),P(0,["YY",2],0,function(){return this.year()%100}),P(0,["YYYY",4],0,"year"),P(0,["YYYYY",5],0,"year"),P(0,["YYYYYY",6,!0],0,"year"),T("year","y"),E("year",1),$("Y",Xe),$("YY",qe,Ie),$("YYYY",Be,He),$("YYYYY",Ve,$e),$("YYYYYY",Ve,$e),W(["YYYYY","YYYYYY"],nn),W("YYYY",function(e,n){n[nn]=2===e.length?t.parseTwoDigitYear(e):x(e)}),W("YY",function(e,n){n[nn]=t.parseTwoDigitYear(e)}),W("Y",function(t,e){e[nn]=parseInt(t,10)}),t.parseTwoDigitYear=function(t){return x(t)+(x(t)>68?1900:2e3)};var yn=L("FullYear",!0);P("w",["ww",2],"wo","week"),P("W",["WW",2],"Wo","isoWeek"),T("week","w"),T("isoWeek","W"),E("week",5),E("isoWeek",5),$("w",qe),$("ww",qe,Ie),$("W",qe),$("WW",qe,Ie),B(["w","ww","W","WW"],function(t,e,n,r){e[r.substr(0,1)]=x(t)});var xn={dow:0,doy:6};P("d",0,"do","day"),P("dd",0,0,function(t){return this.localeData().weekdaysMin(this,t)}),P("ddd",0,0,function(t){return this.localeData().weekdaysShort(this,t)}),P("dddd",0,0,function(t){return this.localeData().weekdays(this,t)}),P("e",0,0,"weekday"),P("E",0,0,"isoWeekday"),T("day","d"),T("weekday","e"),T("isoWeekday","E"),E("day",11),E("weekday",11),E("isoWeekday",11),$("d",qe),$("e",qe),$("E",qe),$("dd",function(t,e){return e.weekdaysMinRegex(t)}),$("ddd",function(t,e){return e.weekdaysShortRegex(t)}),$("dddd",function(t,e){return e.weekdaysRegex(t)}),B(["dd","ddd","dddd"],function(t,e,n,r){var i=n._locale.weekdaysParse(t,r,n._strict);null!=i?e.d=i:h(n).invalidWeekday=t}),B(["d","e","E"],function(t,e,n,r){e[r]=x(t)});var bn="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),wn="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),_n="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Mn=Je,An=Je,kn=Je;P("H",["HH",2],0,"hour"),P("h",["hh",2],0,ft),P("k",["kk",2],0,function(){return this.hours()||24}),P("hmm",0,0,function(){return""+ft.apply(this)+j(this.minutes(),2)}),P("hmmss",0,0,function(){return""+ft.apply(this)+j(this.minutes(),2)+j(this.seconds(),2)}),P("Hmm",0,0,function(){return""+this.hours()+j(this.minutes(),2)}),P("Hmmss",0,0,function(){return""+this.hours()+j(this.minutes(),2)+j(this.seconds(),2)}),ht("a",!0),ht("A",!1),T("hour","h"),E("hour",13),$("a",dt),$("A",dt),$("H",qe),$("h",qe),$("k",qe),$("HH",qe,Ie),$("hh",qe,Ie),$("kk",qe,Ie),$("hmm",Ue),$("hmmss",ze),$("Hmm",Ue),$("Hmmss",ze),W(["H","HH"],an),W(["k","kk"],function(t,e,n){var r=x(t);e[an]=24===r?0:r}),W(["a","A"],function(t,e,n){n._isPm=n._locale.isPM(t),n._meridiem=t}),W(["h","hh"],function(t,e,n){e[an]=x(t),h(n).bigHour=!0}),W("hmm",function(t,e,n){var r=t.length-2;e[an]=x(t.substr(0,r)),e[un]=x(t.substr(r)),h(n).bigHour=!0}),W("hmmss",function(t,e,n){var r=t.length-4,i=t.length-2;e[an]=x(t.substr(0,r)),e[un]=x(t.substr(r,2)),e[sn]=x(t.substr(i)),h(n).bigHour=!0}),W("Hmm",function(t,e,n){var r=t.length-2;e[an]=x(t.substr(0,r)),e[un]=x(t.substr(r))}),W("Hmmss",function(t,e,n){var r=t.length-4,i=t.length-2;e[an]=x(t.substr(0,r)),e[un]=x(t.substr(r,2)),e[sn]=x(t.substr(i))});var Sn,Tn=/[ap]\.?m?\.?/i,Cn=L("Hours",!0),Dn={calendar:Te,longDateFormat:Ce,invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:De,relativeTime:Ee,months:pn,monthsShort:gn,week:xn,weekdays:bn,weekdaysMin:_n,weekdaysShort:wn,meridiemParse:Tn},En={},Nn={},Ln=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,On=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Rn=/Z|[+-]\d\d(?::?\d\d)?/,jn=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Pn=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Fn=/^\/?Date\((\-?\d+)/i,In=/^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;t.createFromInputFallback=_("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))}),t.ISO_8601=function(){},t.RFC_2822=function(){};var Yn=_("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var t=Pt.apply(null,arguments);return this.isValid()&&t.isValid()?t<this?this:t:p()}),Hn=_("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var t=Pt.apply(null,arguments);return this.isValid()&&t.isValid()?t>this?this:t:p()}),$n=["year","quarter","month","week","day","hour","minute","second","millisecond"];qt("Z",":"),qt("ZZ",""),$("Z",Ke),$("ZZ",Ke),W(["Z","ZZ"],function(t,e,n){n._useUTC=!0,n._tzm=Ut(Ke,t)});var qn=/([\+\-]|\d\d)/gi;t.updateOffset=function(){};var Un=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,zn=/^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;Vt.fn=Yt.prototype,Vt.invalid=function(){return Vt(NaN)};var Wn=Kt(1,"add"),Bn=Kt(-1,"subtract");t.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",t.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var Vn=_("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(t){return void 0===t?this.localeData():this.locale(t)});P(0,["gg",2],0,function(){return this.weekYear()%100}),P(0,["GG",2],0,function(){return this.isoWeekYear()%100}),ne("gggg","weekYear"),ne("ggggg","weekYear"),ne("GGGG","isoWeekYear"),ne("GGGGG","isoWeekYear"),T("weekYear","gg"),T("isoWeekYear","GG"),E("weekYear",1),E("isoWeekYear",1),$("G",Xe),$("g",Xe),$("GG",qe,Ie),$("gg",qe,Ie),$("GGGG",Be,He),$("gggg",Be,He),$("GGGGG",Ve,$e),$("ggggg",Ve,$e),B(["gggg","ggggg","GGGG","GGGGG"],function(t,e,n,r){e[r.substr(0,2)]=x(t)}),B(["gg","GG"],function(e,n,r,i){n[i]=t.parseTwoDigitYear(e)}),P("Q",0,"Qo","quarter"),T("quarter","Q"),E("quarter",7),$("Q",Fe),W("Q",function(t,e){e[rn]=3*(x(t)-1)}),P("D",["DD",2],"Do","date"),T("date","D"),E("date",9),$("D",qe),$("DD",qe,Ie),$("Do",function(t,e){return t?e._dayOfMonthOrdinalParse||e._ordinalParse:e._dayOfMonthOrdinalParseLenient}),W(["D","DD"],on),W("Do",function(t,e){e[on]=x(t.match(qe)[0],10)});var Gn=L("Date",!0);P("DDD",["DDDD",3],"DDDo","dayOfYear"),T("dayOfYear","DDD"),E("dayOfYear",4),$("DDD",We),$("DDDD",Ye),W(["DDD","DDDD"],function(t,e,n){n._dayOfYear=x(t)}),P("m",["mm",2],0,"minute"),T("minute","m"),E("minute",14),$("m",qe),$("mm",qe,Ie),W(["m","mm"],un);var Xn=L("Minutes",!1);P("s",["ss",2],0,"second"),T("second","s"),E("second",15),$("s",qe),$("ss",qe,Ie),W(["s","ss"],sn);var Zn=L("Seconds",!1);P("S",0,0,function(){return~~(this.millisecond()/100)}),P(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),P(0,["SSS",3],0,"millisecond"),P(0,["SSSS",4],0,function(){return 10*this.millisecond()}),P(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),P(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),P(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),P(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),P(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),T("millisecond","ms"),E("millisecond",16),$("S",We,Fe),$("SS",We,Ie),$("SSS",We,Ye);var Kn;for(Kn="SSSS";Kn.length<=9;Kn+="S")$(Kn,Ge);for(Kn="S";Kn.length<=9;Kn+="S")W(Kn,function(t,e){e[ln]=x(1e3*("0."+t))});var Qn=L("Milliseconds",!1);P("z",0,0,"zoneAbbr"),P("zz",0,0,"zoneName");var Jn=v.prototype;Jn.add=Wn,Jn.calendar=function(e,n){var r=e||Pt(),i=zt(r,this).startOf("day"),o=t.calendarFormat(this,i)||"sameElse",a=n&&(A(n[o])?n[o].call(this,r):n[o]);return this.format(a||this.localeData().calendar(o,this,Pt(r)))},Jn.clone=function(){return new v(this)},Jn.diff=function(t,e,n){var r,i,o,a;return this.isValid()&&(r=zt(t,this)).isValid()?(i=6e4*(r.utcOffset()-this.utcOffset()),"year"===(e=C(e))||"month"===e||"quarter"===e?(a=Jt(this,r),"quarter"===e?a/=3:"year"===e&&(a/=12)):(o=this-r,a="second"===e?o/1e3:"minute"===e?o/6e4:"hour"===e?o/36e5:"day"===e?(o-i)/864e5:"week"===e?(o-i)/6048e5:o),n?a:y(a)):NaN},Jn.endOf=function(t){return void 0===(t=C(t))||"millisecond"===t?this:("date"===t&&(t="day"),this.startOf(t).add(1,"isoWeek"===t?"week":t).subtract(1,"ms"))},Jn.format=function(e){e||(e=this.isUtc()?t.defaultFormatUtc:t.defaultFormat);var n=Y(this,e);return this.localeData().postformat(n)},Jn.from=function(t,e){return this.isValid()&&(m(t)&&t.isValid()||Pt(t).isValid())?Vt({to:this,from:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()},Jn.fromNow=function(t){return this.from(Pt(),t)},Jn.to=function(t,e){return this.isValid()&&(m(t)&&t.isValid()||Pt(t).isValid())?Vt({from:this,to:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()},Jn.toNow=function(t){return this.to(Pt(),t)},Jn.get=function(t){return t=C(t),A(this[t])?this[t]():this},Jn.invalidAt=function(){return h(this).overflow},Jn.isAfter=function(t,e){var n=m(t)?t:Pt(t);return!(!this.isValid()||!n.isValid())&&("millisecond"===(e=C(i(e)?"millisecond":e))?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(e).valueOf())},Jn.isBefore=function(t,e){var n=m(t)?t:Pt(t);return!(!this.isValid()||!n.isValid())&&("millisecond"===(e=C(i(e)?"millisecond":e))?this.valueOf()<n.valueOf():this.clone().endOf(e).valueOf()<n.valueOf())},Jn.isBetween=function(t,e,n,r){return("("===(r=r||"()")[0]?this.isAfter(t,n):!this.isBefore(t,n))&&(")"===r[1]?this.isBefore(e,n):!this.isAfter(e,n))},Jn.isSame=function(t,e){var n,r=m(t)?t:Pt(t);return!(!this.isValid()||!r.isValid())&&("millisecond"===(e=C(e||"millisecond"))?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(e).valueOf()<=n&&n<=this.clone().endOf(e).valueOf()))},Jn.isSameOrAfter=function(t,e){return this.isSame(t,e)||this.isAfter(t,e)},Jn.isSameOrBefore=function(t,e){return this.isSame(t,e)||this.isBefore(t,e)},Jn.isValid=function(){return d(this)},Jn.lang=Vn,Jn.locale=te,Jn.localeData=ee,Jn.max=Hn,Jn.min=Yn,Jn.parsingFlags=function(){return l({},h(this))},Jn.set=function(t,e){if("object"==typeof t)for(var n=N(t=D(t)),r=0;r<n.length;r++)this[n[r].unit](t[n[r].unit]);else if(t=C(t),A(this[t]))return this[t](e);return this},Jn.startOf=function(t){switch(t=C(t)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===t&&this.weekday(0),"isoWeek"===t&&this.isoWeekday(1),"quarter"===t&&this.month(3*Math.floor(this.month()/3)),this},Jn.subtract=Bn,Jn.toArray=function(){var t=this;return[t.year(),t.month(),t.date(),t.hour(),t.minute(),t.second(),t.millisecond()]},Jn.toObject=function(){var t=this;return{years:t.year(),months:t.month(),date:t.date(),hours:t.hours(),minutes:t.minutes(),seconds:t.seconds(),milliseconds:t.milliseconds()}},Jn.toDate=function(){return new Date(this.valueOf())},Jn.toISOString=function(){if(!this.isValid())return null;var t=this.clone().utc();return t.year()<0||t.year()>9999?Y(t,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):A(Date.prototype.toISOString)?this.toDate().toISOString():Y(t,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]")},Jn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var t="moment",e="";this.isLocal()||(t=0===this.utcOffset()?"moment.utc":"moment.parseZone",e="Z");var n="["+t+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",i=e+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+i)},Jn.toJSON=function(){return this.isValid()?this.toISOString():null},Jn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},Jn.unix=function(){return Math.floor(this.valueOf()/1e3)},Jn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},Jn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},Jn.year=yn,Jn.isLeapYear=function(){return tt(this.year())},Jn.weekYear=function(t){return re.call(this,t,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},Jn.isoWeekYear=function(t){return re.call(this,t,this.isoWeek(),this.isoWeekday(),1,4)},Jn.quarter=Jn.quarters=function(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)},Jn.month=K,Jn.daysInMonth=function(){return G(this.year(),this.month())},Jn.week=Jn.weeks=function(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")},Jn.isoWeek=Jn.isoWeeks=function(t){var e=ot(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")},Jn.weeksInYear=function(){var t=this.localeData()._week;return at(this.year(),t.dow,t.doy)},Jn.isoWeeksInYear=function(){return at(this.year(),1,4)},Jn.date=Gn,Jn.day=Jn.days=function(t){if(!this.isValid())return null!=t?this:NaN;var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=ut(t,this.localeData()),this.add(t-e,"d")):e},Jn.weekday=function(t){if(!this.isValid())return null!=t?this:NaN;var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")},Jn.isoWeekday=function(t){if(!this.isValid())return null!=t?this:NaN;if(null!=t){var e=st(t,this.localeData());return this.day(this.day()%7?e:e-7)}return this.day()||7},Jn.dayOfYear=function(t){var e=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")},Jn.hour=Jn.hours=Cn,Jn.minute=Jn.minutes=Xn,Jn.second=Jn.seconds=Zn,Jn.millisecond=Jn.milliseconds=Qn,Jn.utcOffset=function(e,n,r){var i,o=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Ut(Ke,e)))return this}else Math.abs(e)<16&&!r&&(e*=60);return!this._isUTC&&n&&(i=Wt(this)),this._offset=e,this._isUTC=!0,null!=i&&this.add(i,"m"),o!==e&&(!n||this._changeInProgress?Qt(this,Vt(e-o,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,t.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?o:Wt(this)},Jn.utc=function(t){return this.utcOffset(0,t)},Jn.local=function(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract(Wt(this),"m")),this},Jn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var t=Ut(Ze,this._i);null!=t?this.utcOffset(t):this.utcOffset(0,!0)}return this},Jn.hasAlignedHourOffset=function(t){return!!this.isValid()&&(t=t?Pt(t).utcOffset():0,(this.utcOffset()-t)%60==0)},Jn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},Jn.isLocal=function(){return!!this.isValid()&&!this._isUTC},Jn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},Jn.isUtc=Bt,Jn.isUTC=Bt,Jn.zoneAbbr=function(){return this._isUTC?"UTC":""},Jn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},Jn.dates=_("dates accessor is deprecated. Use date instead.",Gn),Jn.months=_("months accessor is deprecated. Use month instead",K),Jn.years=_("years accessor is deprecated. Use year instead",yn),Jn.zone=_("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()}),Jn.isDSTShifted=_("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!i(this._isDSTShifted))return this._isDSTShifted;var t={};if(g(t,this),(t=Ot(t))._a){var e=t._isUTC?c(t._a):Pt(t._a);this._isDSTShifted=this.isValid()&&b(t._a,e.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted});var tr=S.prototype;tr.calendar=function(t,e,n){var r=this._calendar[t]||this._calendar.sameElse;return A(r)?r.call(e,n):r},tr.longDateFormat=function(t){var e=this._longDateFormat[t],n=this._longDateFormat[t.toUpperCase()];return e||!n?e:(this._longDateFormat[t]=n.replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t])},tr.invalidDate=function(){return this._invalidDate},tr.ordinal=function(t){return this._ordinal.replace("%d",t)},tr.preparse=oe,tr.postformat=oe,tr.relativeTime=function(t,e,n,r){var i=this._relativeTime[n];return A(i)?i(t,e,n,r):i.replace(/%d/i,t)},tr.pastFuture=function(t,e){var n=this._relativeTime[t>0?"future":"past"];return A(n)?n(e):n.replace(/%s/i,e)},tr.set=function(t){var e,n;for(n in t)A(e=t[n])?this[n]=e:this["_"+n]=e;this._config=t,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},tr.months=function(t,n){return t?e(this._months)?this._months[t.month()]:this._months[(this._months.isFormat||dn).test(n)?"format":"standalone"][t.month()]:e(this._months)?this._months:this._months.standalone},tr.monthsShort=function(t,n){return t?e(this._monthsShort)?this._monthsShort[t.month()]:this._monthsShort[dn.test(n)?"format":"standalone"][t.month()]:e(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},tr.monthsParse=function(t,e,n){var r,i,o;if(this._monthsParseExact)return X.call(this,t,e,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(i=c([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(o="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[r]=new RegExp(o.replace(".",""),"i")),n&&"MMMM"===e&&this._longMonthsParse[r].test(t))return r;if(n&&"MMM"===e&&this._shortMonthsParse[r].test(t))return r;if(!n&&this._monthsParse[r].test(t))return r}},tr.monthsRegex=function(t){return this._monthsParseExact?(s(this,"_monthsRegex")||Q.call(this),t?this._monthsStrictRegex:this._monthsRegex):(s(this,"_monthsRegex")||(this._monthsRegex=mn),this._monthsStrictRegex&&t?this._monthsStrictRegex:this._monthsRegex)},tr.monthsShortRegex=function(t){return this._monthsParseExact?(s(this,"_monthsRegex")||Q.call(this),t?this._monthsShortStrictRegex:this._monthsShortRegex):(s(this,"_monthsShortRegex")||(this._monthsShortRegex=vn),this._monthsShortStrictRegex&&t?this._monthsShortStrictRegex:this._monthsShortRegex)},tr.week=function(t){return ot(t,this._week.dow,this._week.doy).week},tr.firstDayOfYear=function(){return this._week.doy},tr.firstDayOfWeek=function(){return this._week.dow},tr.weekdays=function(t,n){return t?e(this._weekdays)?this._weekdays[t.day()]:this._weekdays[this._weekdays.isFormat.test(n)?"format":"standalone"][t.day()]:e(this._weekdays)?this._weekdays:this._weekdays.standalone},tr.weekdaysMin=function(t){return t?this._weekdaysMin[t.day()]:this._weekdaysMin},tr.weekdaysShort=function(t){return t?this._weekdaysShort[t.day()]:this._weekdaysShort},tr.weekdaysParse=function(t,e,n){var r,i,o;if(this._weekdaysParseExact)return lt.call(this,t,e,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(i=c([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(i,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(i,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(i,"").replace(".",".?")+"$","i")),this._weekdaysParse[r]||(o="^"+this.weekdays(i,"")+"|^"+this.weekdaysShort(i,"")+"|^"+this.weekdaysMin(i,""),this._weekdaysParse[r]=new RegExp(o.replace(".",""),"i")),n&&"dddd"===e&&this._fullWeekdaysParse[r].test(t))return r;if(n&&"ddd"===e&&this._shortWeekdaysParse[r].test(t))return r;if(n&&"dd"===e&&this._minWeekdaysParse[r].test(t))return r;if(!n&&this._weekdaysParse[r].test(t))return r}},tr.weekdaysRegex=function(t){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||ct.call(this),t?this._weekdaysStrictRegex:this._weekdaysRegex):(s(this,"_weekdaysRegex")||(this._weekdaysRegex=Mn),this._weekdaysStrictRegex&&t?this._weekdaysStrictRegex:this._weekdaysRegex)},tr.weekdaysShortRegex=function(t){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||ct.call(this),t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(s(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=An),this._weekdaysShortStrictRegex&&t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},tr.weekdaysMinRegex=function(t){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||ct.call(this),t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(s(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=kn),this._weekdaysMinStrictRegex&&t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},tr.isPM=function(t){return"p"===(t+"").toLowerCase().charAt(0)},tr.meridiem=function(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"},mt("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10;return t+(1===x(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")}}),t.lang=_("moment.lang is deprecated. Use moment.locale instead.",mt),t.langData=_("moment.langData is deprecated. Use moment.localeData instead.",xt);var er=Math.abs,nr=de("ms"),rr=de("s"),ir=de("m"),or=de("h"),ar=de("d"),ur=de("w"),sr=de("M"),lr=de("y"),cr=pe("milliseconds"),fr=pe("seconds"),hr=pe("minutes"),dr=pe("hours"),pr=pe("days"),gr=pe("months"),vr=pe("years"),mr=Math.round,yr={ss:44,s:45,m:45,h:22,d:26,M:11},xr=Math.abs,br=Yt.prototype;return br.isValid=function(){return this._isValid},br.abs=function(){var t=this._data;return this._milliseconds=er(this._milliseconds),this._days=er(this._days),this._months=er(this._months),t.milliseconds=er(t.milliseconds),t.seconds=er(t.seconds),t.minutes=er(t.minutes),t.hours=er(t.hours),t.months=er(t.months),t.years=er(t.years),this},br.add=function(t,e){return le(this,t,e,1)},br.subtract=function(t,e){return le(this,t,e,-1)},br.as=function(t){if(!this.isValid())return NaN;var e,n,r=this._milliseconds;if("month"===(t=C(t))||"year"===t)return e=this._days+r/864e5,n=this._months+fe(e),"month"===t?n:n/12;switch(e=this._days+Math.round(he(this._months)),t){case"week":return e/7+r/6048e5;case"day":return e+r/864e5;case"hour":return 24*e+r/36e5;case"minute":return 1440*e+r/6e4;case"second":return 86400*e+r/1e3;case"millisecond":return Math.floor(864e5*e)+r;default:throw new Error("Unknown unit "+t)}},br.asMilliseconds=nr,br.asSeconds=rr,br.asMinutes=ir,br.asHours=or,br.asDays=ar,br.asWeeks=ur,br.asMonths=sr,br.asYears=lr,br.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*x(this._months/12):NaN},br._bubble=function(){var t,e,n,r,i,o=this._milliseconds,a=this._days,u=this._months,s=this._data;return o>=0&&a>=0&&u>=0||o<=0&&a<=0&&u<=0||(o+=864e5*ce(he(u)+a),a=0,u=0),s.milliseconds=o%1e3,t=y(o/1e3),s.seconds=t%60,e=y(t/60),s.minutes=e%60,n=y(e/60),s.hours=n%24,a+=y(n/24),i=y(fe(a)),u+=i,a-=ce(he(i)),r=y(u/12),u%=12,s.days=a,s.months=u,s.years=r,this},br.get=function(t){return t=C(t),this.isValid()?this[t+"s"]():NaN},br.milliseconds=cr,br.seconds=fr,br.minutes=hr,br.hours=dr,br.days=pr,br.weeks=function(){return y(this.days()/7)},br.months=gr,br.years=vr,br.humanize=function(t){if(!this.isValid())return this.localeData().invalidDate();var e=this.localeData(),n=ve(this,!t,e);return t&&(n=e.pastFuture(+this,n)),e.postformat(n)},br.toISOString=me,br.toString=me,br.toJSON=me,br.locale=te,br.localeData=ee,br.toIsoString=_("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",me),br.lang=Vn,P("X",0,0,"unix"),P("x",0,0,"valueOf"),$("x",Xe),$("X",Qe),W("X",function(t,e,n){n._d=new Date(1e3*parseFloat(t,10))}),W("x",function(t,e,n){n._d=new Date(x(t))}),t.version="2.18.1",function(t){ye=t}(Pt),t.fn=Jn,t.min=function(){return Ft("isBefore",[].slice.call(arguments,0))},t.max=function(){return Ft("isAfter",[].slice.call(arguments,0))},t.now=function(){return Date.now?Date.now():+new Date},t.utc=c,t.unix=function(t){return Pt(1e3*t)},t.months=function(t,e){return ue(t,e,"months")},t.isDate=a,t.locale=mt,t.invalid=p,t.duration=Vt,t.isMoment=m,t.weekdays=function(t,e,n){return se(t,e,n,"weekdays")},t.parseZone=function(){return Pt.apply(null,arguments).parseZone()},t.localeData=xt,t.isDuration=Ht,t.monthsShort=function(t,e){return ue(t,e,"monthsShort")},t.weekdaysMin=function(t,e,n){return se(t,e,n,"weekdaysMin")},t.defineLocale=yt,t.updateLocale=function(t,e){if(null!=e){var n,r=Dn;null!=En[t]&&(r=En[t]._config),(n=new S(e=k(r,e))).parentLocale=En[t],En[t]=n,mt(t)}else null!=En[t]&&(null!=En[t].parentLocale?En[t]=En[t].parentLocale:null!=En[t]&&delete En[t]);return En[t]},t.locales=function(){return Se(En)},t.weekdaysShort=function(t,e,n){return se(t,e,n,"weekdaysShort")},t.normalizeUnits=C,t.relativeTimeRounding=function(t){return void 0===t?mr:"function"==typeof t&&(mr=t,!0)},t.relativeTimeThreshold=function(t,e){return void 0!==yr[t]&&(void 0===e?yr[t]:(yr[t]=e,"s"===t&&(yr.ss=e-1),!0))},t.calendarFormat=function(t,e){var n=t.diff(e,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},t.prototype=Jn,t});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
